{"info":{"_postman_id":"f367b534-c9ea-e7c5-1f46-7a27dc6a30ba","name":"commercetools Composable Commerce API","description":"# commercetools API Postman Collection\n\nThis Postman collection contains examples of requests and responses for most endpoints and commands of the\ncommercetools Composable Commerce API. For every command the smallest possible payload is given. Please find optional\nfields in the related official documentation. Additionally the collection provides example requests and\nresponses for specific tasks and more complex data models.\n\n## Disclaimer\n\nThis is not the official commercetools Composable Commerce API documentation. Please see [here](http://docs.commercetools.com/)\nfor a complete and approved documentation of the commercetools Composable Commerce API.\n\n## How to use\n\n**:warning: Be aware that postman automatically synchronizes environment variables (including your API client credentials) to your workspace if logged in.\nUse this collection only for development purposes and non-production projects.**\n\nTo use this collection in Postman please perform the following steps:\n\n1. Download and install the Postman Client\n2. Import the [collection.json](collection.json) and [template.json](template.json) in your postman application\n3. In the Merchant Center, create a new API Client and fill in the client credentials in your environment\n4. Obtain an access token by sending the \"Authorization/Obtain access token\" request at the bottom of the request list. Now you can use all other endpoints\n\nFeel free to clone and modify this collection to your needs.\n\nTo automate frequent tasks the collection automatically manages commonly required values and parameters such\nas resource ids, keys and versions in Postman environment variables for you.\n\nPlease see http://docs.commercetools.com/ for further information about the commercetools Plattform.","schema":"https://schema.getpostman.com/json/collection/v2.0.0/collection.json"},"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"item":[{"name":"Authorization","description":"Authorization","item":[{"name":"Obtain access token","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code is 200\"] = responseCode.code === 200;","var data = JSON.parse(responseBody);","if(data.access_token){","    pm.environment.set(\"ctp_access_token\", data.access_token);","}","if (data.scope) {","    parts = data.scope.split(\" \");","    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))","    if (parts.length > 0) {","        scopeParts = parts[0];","        pm.environment.set(\"project-key\", scopeParts[1]);","        parts = parts.filter(scope => scope.length >= 3)","        if (parts.length > 0) {","            scopeParts = parts[0];","            pm.environment.set(\"store-key\", scopeParts[2]);","        }","    }","}"]}}],"request":{"auth":{"type":"basic","basic":{"username":"{{client_id}}","password":"{{client_secret}}"}},"method":"POST","header":[],"body":{"mode":"raw","raw":""},"url":{"raw":"{{auth_url}}/oauth/token?grant_type=client_credentials","host":["{{auth_url}}"],"path":["oauth","token"],"query":[{"key":"grant_type","value":"client_credentials","equals":true}]},"description":"Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."},"response":[]},{"name":"Obtain access token through password flow","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code is 200\"] = responseCode.code === 200;","var data = JSON.parse(responseBody);","if(data.access_token){","    pm.environment.set(\"ctp_access_token\", data.access_token);","}","if (data.scope) {","    parts = data.scope.split(\" \");","    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))","    if (parts.length > 0) {","        scopeParts = parts[0];","        pm.environment.set(\"project-key\", scopeParts[1]);","        parts = parts.filter(scope => scope.length >= 3)","        if (parts.length > 0) {","            scopeParts = parts[0];","            pm.environment.set(\"store-key\", scopeParts[2]);","        }","    }","}"]}}],"request":{"auth":{"type":"basic","basic":{"username":"{{client_id}}","password":"{{client_secret}}"}},"method":"POST","header":[{"key":"","value":"","disabled":true}],"body":{"mode":"raw","raw":""},"url":{"raw":"{{auth_url}}/oauth/{{project-key}}/customers/token?grant_type=password&username={{user_email}}&password={{user_password}}","host":["{{auth_url}}"],"path":["oauth","{{project-key}}","customers","token"],"query":[{"key":"grant_type","value":"password","equals":true},{"key":"username","value":"","equals":true},{"key":"password","value":"","equals":true}]},"description":"Use this request to obtain an access token for your commercetools platform project via Password Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id, client_secret, user_email and user_password to use this."},"response":[]},{"name":"Token for Anonymous Sessions","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code is 200\"] = responseCode.code === 200;","var data = JSON.parse(responseBody);","if(data.access_token){","    pm.environment.set(\"ctp_access_token\", data.access_token);","}","if (data.scope) {","    parts = data.scope.split(\" \");","    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))","    if (parts.length > 0) {","        scopeParts = parts[0];","        pm.environment.set(\"project-key\", scopeParts[1]);","        parts = parts.filter(scope => scope.length >= 3)","        if (parts.length > 0) {","            scopeParts = parts[0];","            pm.environment.set(\"store-key\", scopeParts[2]);","        }","    }","}"]}}],"request":{"auth":{"type":"basic","basic":{"username":"{{client_id}}","password":"{{client_secret}}"}},"method":"POST","header":[],"body":{"mode":"raw","raw":""},"url":{"raw":"{{auth_url}}/oauth/{{project-key}}/anonymous/token?grant_type=client_credentials","host":["{{auth_url}}"],"path":["oauth","{{project-key}}","anonymous","token"],"query":[{"key":"grant_type","value":"client_credentials","equals":true}]},"description":"Use this request to obtain an access token for a anonymous session. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."},"response":[]},{"name":"Token Introspection","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code is 200\"] = responseCode.code === 200;"]}}],"request":{"auth":{"type":"basic","basic":{"username":"{{client_id}}","password":"{{client_secret}}"}},"method":"POST","header":[{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":""},"url":{"raw":"{{auth_url}}/oauth/introspect?token={{ctp_access_token}}","host":["{{auth_url}}"],"path":["oauth","introspect"],"query":[{"key":"token","value":"{{ctp_access_token}}","equals":true}]},"description":"Token introspection allows to determine the active state of an OAuth 2.0 access token and to determine meta-information about this accces token, such as the `scope`."},"response":[]}]},{"name":"Project","description":"The Project endpoint is used to retrieve certain information from a project.","item":[{"name":"As-associate","description":"null","item":[{"name":"Business-units","description":"A Business Unit can represent a Company or a Division.","item":[{"name":"Get BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","key={{business-unit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","key={{business-unit-key}}"],"query":[]},"description":"Checks if a BusinessUnit exists with the provided `key`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","key={{business-unit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Get BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[]},"description":"Checks if a BusinessUnit exists with the provided `id`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Query BusinessUnits as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists by Query Predicate as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more BusinessUnits exist for the provided query predicate. Returns a `200` status if any BusinessUnits match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"commercetools\",\n  \"unitType\" : \"Company\",\n  \"key\" : \"commercetools\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAddress\",\n            \"address\" : {\n              \"id\" : \"exampleAddress\",\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"mail@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAssociate\",\n            \"associate\" : {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              }, {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAddress\",\n            \"addressId\" : \"{{addressId}}\",\n            \"address\" : {\n              \"id\" : \"exampleAddress\",\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeApprovalRuleMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeApprovalRuleMode\",\n            \"approvalRuleMode\" : \"Explicit\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssociate\",\n            \"associate\" : {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              }, {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAssociateMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n                |{\n            \"action\": \"changeAssociateMode\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"commercetools\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeParentUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeParentUnit\",\n            \"parentUnit\" : {\n              \"typeId\" : \"business-unit\",\n              \"key\" : \"commercetools\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeStatus","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeStatus\",\n            \"status\" : \"Inactive\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAssociate\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"some-customer-id\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\",\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAssociates","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssociates\",\n            \"associates\" : [ {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              } ]\n            }, {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"another-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetContactEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setContactEmail\",\n            \"contactEmail\" : \"contact@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetDefaultBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultBillingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetDefaultShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultShippingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetStoreMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStoreMode\",\n            \"storeMode\" : \"FromParent\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetStores","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStores\",\n            \"stores\" : [ {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetUnitType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setUnitType\",\n            \"unitType\" : \"Division\",\n            \"parentUnit\" : {\n              \"typeId\" : \"business-unit\",\n              \"key\" : \"commercetools\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]}]}]},{"name":"In-business-unit","description":"null","item":[{"name":"Approval-rules","description":"An Approval Rule describes the conditions determining whether an Order that matches the predicate needs approval by an approver before it can be ordered by an requester within a Business Unit.","item":[{"name":"Get ApprovalRule in BusinessUnit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ApprovalRule in BusinessUnit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setStatus\",\n    \"status\" : \"Active\"\n  } ]\n}"}},"response":[]},{"name":"Get ApprovalRule in BusinessUnit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/key={{approval-rule-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","key={{approval-rule-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ApprovalRule in BusinessUnit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/key={{approval-rule-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","key={{approval-rule-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setStatus\",\n    \"status\" : \"Active\"\n  } ]\n}"}},"response":[]},{"name":"Query ApprovalRules in BusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ApprovalRule in BusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"my approval rule\",\n  \"status\" : \"Inactive\",\n  \"predicate\" : \"totalPrice.centAmount >= 100000\",\n  \"approvers\" : {\n    \"tiers\" : [ {\n      \"and\" : [ {\n        \"or\" : [ {\n          \"associateRole\" : {\n            \"typeId\" : \"associate-role\",\n            \"key\" : \"project-team-lead\"\n          }\n        }, {\n          \"associateRole\" : {\n            \"typeId\" : \"associate-role\",\n            \"key\" : \"project-team-lead-substitute\"\n          }\n        } ]\n      } ]\n    } ]\n  },\n  \"requesters\" : [ {\n    \"associateRole\" : {\n      \"typeId\" : \"associate-role\",\n      \"key\" : \"project-manager\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"SetApprovers","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setApprovers\",\n            \"approvers\" : {\n              \"tiers\" : [ {\n                \"and\" : [ {\n                  \"or\" : [ {\n                    \"associateRole\" : {\n                      \"key\" : \"approver1\"\n                    }\n                  } ]\n                } ]\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : \"New description\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : \"New name\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]},{"name":"SetPredicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPredicate\",\n            \"predicate\" : \"totalPrice > \"1000.00 EUR\"\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]},{"name":"SetRequesters","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setRequesters\",\n            \"requesters\" : [ {\n              \"associateRole\" : {\n                \"typeId\" : \"associate-role\",\n                \"key\" : \"buyer\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]},{"name":"SetStatus","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-rule-id\", data.results[0].id); ","    pm.environment.set(\"approval-rule-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-rule-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-rule-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-rule-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-rule-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-rule-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStatus\",\n            \"status\" : \"Active\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-rules/{{approval-rule-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-rules","{{approval-rule-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalRules"},"response":[]}]}]},{"name":"Approval-flows","description":"Approval Flows connect Orders that require approval with the Approval Rules that initiate the approval requirement.\nThey represent the approval process by including information about approvals, rejections, and all involved parties.\n","item":[{"name":"Get ApprovalFlow in BusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-flow-id\", data.results[0].id); ","    pm.environment.set(\"approval-flow-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-flow-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-flow-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-flow-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-flow-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-flows/{{approval-flow-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-flows","{{approval-flow-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ApprovalFlow in BusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-flow-id\", data.results[0].id); ","    pm.environment.set(\"approval-flow-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-flow-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-flow-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-flow-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-flow-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-flows/{{approval-flow-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-flows","{{approval-flow-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"reject\",\n    \"reason\" : \"Out of policy\"\n  } ]\n}"}},"response":[]},{"name":"Query ApprovalFlows in BusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-flow-id\", data.results[0].id); ","    pm.environment.set(\"approval-flow-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-flow-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-flow-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-flow-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-flow-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-flows","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-flows"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update actions","item":[{"name":"Approve","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-flow-id\", data.results[0].id); ","    pm.environment.set(\"approval-flow-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-flow-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-flow-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-flow-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-flow-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-flow-version}},\n    \"actions\": [\n        {\n            \"action\" : \"approve\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-flows/{{approval-flow-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-flows","{{approval-flow-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalFlows"},"response":[]},{"name":"Reject","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-flow-id\", data.results[0].id); ","    pm.environment.set(\"approval-flow-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-flow-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-flow-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-flow-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-flow-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-flow-version}},\n    \"actions\": [\n        {\n            \"action\" : \"reject\",\n            \"reason\" : \"Out of policy\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-flows/{{approval-flow-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-flows","{{approval-flow-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalFlows"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-flow-id\", data.results[0].id); ","    pm.environment.set(\"approval-flow-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-flow-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-flow-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-flow-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-flow-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-flow-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-flows/{{approval-flow-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-flows","{{approval-flow-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalFlows"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"approval-flow-id\", data.results[0].id); ","    pm.environment.set(\"approval-flow-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"approval-flow-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"approval-flow-version\", data.version);","}","if(data.id){","    pm.environment.set(\"approval-flow-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"approval-flow-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{approval-flow-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/approval-flows/{{approval-flow-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","approval-flows","{{approval-flow-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ApprovalFlows"},"response":[]}]}]},{"name":"Carts","description":"A shopping cart holds product variants and can be ordered.","item":[{"name":"Get Cart in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","key={{cart-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","key={{cart-key}}"],"query":[]},"description":"Checks if a Cart exists with the provided `key`. Returns a `200` status if the Cart exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Cart in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","key={{cart-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addLineItem\",\n    \"productId\" : \"9f10dcfb-5cc9-4a18-843a-c07f7e22d01f\",\n    \"variantId\" : 1,\n    \"quantity\" : 1\n  } ]\n}"}},"response":[]},{"name":"Delete Cart in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","key={{cart-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{cart-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Cart in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[]},"description":"Checks if a Cart exists with the provided `id`. Returns a `200` status if the Cart exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Cart in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addLineItem\",\n    \"productId\" : \"9f10dcfb-5cc9-4a18-843a-c07f7e22d01f\",\n    \"variantId\" : 1,\n    \"quantity\" : 1\n  } ]\n}"}},"response":[]},{"name":"Delete Cart in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{cart-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Replicate Cart in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"replicate-id\", data.results[0].id); ","    pm.environment.set(\"replicate-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"replicate-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"replicate-version\", data.version);","}","if(data.id){","    pm.environment.set(\"replicate-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"replicate-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/replicate","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","replicate"],"query":[]},"description":"Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.\n\nThe replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).\n\nThe new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.\n\nIf the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n\nSpecific Error Codes:\n\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"reference\" : {\n    \"id\" : \"74dcac8b-0c67-4f37-b693-3acd33e3c457\",\n    \"typeId\" : \"cart\"\n  }\n}"}},"response":[]},{"name":"Query Carts in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists in BusinessUnit by Query Predicate as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Carts exist for the provided query predicate. Returns a `200` status if any Carts match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Cart in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a Cart in the [BusinessUnit](ctp:api:type:BusinessUnit) referenced by `businessUnitKey`. As such, the `businessUnit` field on [CartDraft](ctp:api:type:CartDraft) is ignored for this request.\nCreating a Cart can fail with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match the Cart.\n\nSpecific Error Codes:\n\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"currency\" : \"EUR\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddCustomLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCustomLineItem\",\n            \"name\" : {\n              \"en\" : \"Name EN\",\n              \"de\" : \"Name DE\"\n            },\n            \"quantity\" : 1,\n            \"money\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4200\n            },\n            \"slug\" : \"mySlug\",\n            \"taxCategory\" : {\n              \"typeId\" : \"tax-category\",\n              \"id\" : \"{{tax-category-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddCustomShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCustomShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"shippingMethodName\" : \"oneOfCustomShippingMethods\",\n            \"shippingAddress\" : {\n              \"key\" : \"exampleKey\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\"\n            },\n            \"shippingRate\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            },\n            \"taxCategory\" : {\n              \"id\" : \"{{tax-category-id}}\",\n              \"typeId\" : \"tax-category\"\n            },\n            \"deliveries\" : [ ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDiscountCode\",\n            \"code\" : \"mydiscountcode\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLineItem\",\n            \"productId\" : \"{{product-id}}\",\n            \"variantId\" : 2,\n            \"quantity\" : 1,\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"externalTaxRate\" : {\n              \"name\" : \"StandardExternalTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\",\n              \"state\" : \"Bavaria\"\n            },\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddPayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"shippingMethod\" : {\n              \"id\" : \"{{shipping-method-id}}\",\n              \"typeId\" : \"shipping-method\"\n            },\n            \"shippingAddress\" : {\n              \"key\" : \"exampleKey\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\"\n            },\n            \"shippingRateInput\" : {\n              \"type\" : \"Classification\",\n              \"key\" : \"shippingRateString\"\n            },\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddShoppingList","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShoppingList\",\n            \"shoppingList\" : {\n              \"id\" : \"{{shopping-list-id}}\",\n              \"typeId\" : \"shopping-list\"\n            },\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ApplyDeltaToCustomLineItemShippingDetailsTargets","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyDeltaToCustomLineItemShippingDetailsTargets\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"targetsDelta\" : [ {\n              \"addressKey\" : \"addressKeyString\",\n              \"quantity\" : 1\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ApplyDeltaToLineItemShippingDetailsTargets","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyDeltaToLineItemShippingDetailsTargets\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"targetsDelta\" : [ {\n              \"addressKey\" : \"addressKeyString\",\n              \"quantity\" : 1\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeCustomLineItemMoney","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemMoney\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"money\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4200\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeCustomLineItemPriceMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemPriceMode\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"mode\" : \"External\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeCustomLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemQuantity\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemsOrder\",\n            \"lineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangePriceRoundingMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePriceRoundingMode\",\n            \"priceRoundingMode\" : \"HalfDown\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeTaxCalculationMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxCalculationMode\",\n            \"taxCalculationMode\" : \"LineItemLevel\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeTaxMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxMode\",\n            \"taxMode\" : \"Platform\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeTaxRoundingMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxRoundingMode\",\n            \"taxRoundingMode\" : \"HalfUp\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"FreezeCart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"freezeCart\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"Recalculate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"recalculate\",\n            \"updateProductData\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemoveCustomLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeCustomLineItem\",\n            \"customLineItemId\" : \"{{customLineItemId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemoveDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDiscountCode\",\n            \"discountCode\" : {\n              \"typeId\" : \"discount-code\",\n              \"id\" : \"{{discount-code-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemoveItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeItemShippingAddress\",\n            \"addressKey\" : \"{{addressKey}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemoveLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1,\n            \"externalPrice\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            },\n            \"shippingDetailsToRemove\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemovePayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemoveShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetAnonymousId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAnonymousId\",\n            \"anonymousId\" : \"idString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetBillingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetBillingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBusinessUnit\",\n            \"businessUnit\" : {\n              \"key\" : \"{{business-unit-key}}\",\n              \"typeId\" : \"business-unit\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCartTotalTax","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCartTotalTax\",\n            \"externalTotalGross\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 10000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCountry","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCountry\",\n            \"country\" : \"DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomField\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"customLineItemId\" : \"{{customLineItemId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemRecurrenceInfo\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemShippingDetails\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 1\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemTaxAmount\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"centAmount\" : 2000000,\n                \"currencyCode\" : \"EUR\"\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemTaxRate\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"externalTaxRate\" : {\n              \"name\" : \"TaxRateName\",\n              \"country\" : \"DE\",\n              \"amount\" : 0.19\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomShippingMethod\",\n            \"shippingMethodName\" : \"myCustomShippingMethod\",\n            \"shippingRate\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            },\n            \"taxCategory\" : {\n              \"id\" : \"{{tax-category-id}}\",\n              \"typeId\" : \"tax-category\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomerEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"email\" : \"email@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomerGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerGroup\",\n            \"customerGroup\" : {\n              \"id\" : \"{{customer-group-id}}\",\n              \"typeId\" : \"customer-group\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomerId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerId\",\n            \"customerId\" : \"{{customer-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetDeleteDaysAfterLastModification","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeleteDaysAfterLastModification\",\n            \"deleteDaysAfterLastModification\" : 90\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetDirectDiscounts","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDirectDiscounts\",\n            \"discounts\" : [ {\n              \"value\" : {\n                \"type\" : \"relative\",\n                \"permyriad\" : 1000\n              },\n              \"target\" : {\n                \"type\" : \"lineItems\",\n                \"predicate\" : \"1=1\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetItemShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomField\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetItemShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomType\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"myNewKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemDistributionChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemDistributionChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemInventoryMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemInventoryMode\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"inventoryMode\" : \"TrackOnly\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemPrice\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalPrice\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemRecurrenceInfo\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              },\n              \"priceSelectionMode\" : \"Fixed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemShippingDetails\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 1\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemSupplyChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemSupplyChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTaxAmount\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 100\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTaxRate\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemTotalPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTotalPrice\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTotalPrice\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              },\n              \"totalPrice\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomField\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomType\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethod\",\n            \"shippingMethod\" : {\n              \"id\" : \"{{shipping-method-id}}\",\n              \"typeId\" : \"shipping-method\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingMethodTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethodTaxAmount\",\n            \"shippingKey\" : \"shipping-method-key\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"centAmount\" : 2000000,\n                \"currencyCode\" : \"EUR\"\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingMethodTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethodTaxRate\",\n            \"shippingKey\" : \"shipping-method-key\",\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingRateInput","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingRateInput\",\n            \"shippingRateInput\" : {\n              \"type\" : \"Classification\",\n              \"key\" : \"shippingRateString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"UnfreezeCart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"unfreezeCart\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"UpdateItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]}]}]},{"name":"Shopping-lists","description":"shopping-lists e.g. for wishlist support\n","item":[{"name":"Get ShoppingList in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `key` in a [BusinessUnit](ctp:api:type:BusinessUnit).\nIf the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `key` in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ShoppingList in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/shoppingLists#update-actions).\nIf the ShoppingList exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ShoppingList in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList in a [BusinessUnit](ctp:api:type:BusinessUnit).\n\nIf the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ShoppingList in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `key` in a [BusinessUnit](ctp:api:type:BusinessUnit).\n\nIf the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists","{{shopping-list-id}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `id` in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ShoppingList in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/shoppingLists#update-actions).\nIf the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ShoppingList in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList in a [BusinessUnit](ctp:api:type:BusinessUnit).\n\nIf the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ShoppingLists in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves ShoppingLists in a [BusinessUnit](ctp:api:type:BusinessUnit).","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists in BusinessUnit by Query Predicate as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ShoppingLists exist for the provided query predicate in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if any ShoppingLists match the query predicate, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ShoppingList in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a ShoppingList in the [BusinessUnit](ctp:api:type:BusinessUnit) referenced by `businessUnitKey`. As such, the `businessUnit` field on [ShoppingListDraft](ctp:api:type:ShoppingListDraft) is ignored for this request.\n","body":{"mode":"raw","raw":"{\n  \"name\" : {\n    \"en\" : \"My shopping list\"\n  },\n  \"slug\" : {\n    \"en\" : \"my-shopping-list\"\n  },\n  \"customer\" : {\n    \"typeId\" : \"customer\",\n    \"id\" : \"e73cd97f-846e-44a0-b418-3ed044a8e398\"\n  },\n  \"key\" : \"my-shopping-list\",\n  \"deleteDaysAfterLastModification\" : 100,\n  \"lineItems\" : [ {\n    \"sku\" : \"product-variant-sku\",\n    \"quantity\" : 5\n  }, {\n    \"productId\" : \"0e131f46-8d1a-4761-9c83-b45ab5d3501e\",\n    \"variantId\" : 2\n  } ],\n  \"textLineItems\" : [ {\n    \"name\" : {\n      \"en\" : \"My shopping list item\"\n    },\n    \"description\" : {\n      \"en\" : \"This is a good gift idea\"\n    },\n    \"quantity\" : 5\n  } ],\n  \"businessUnit\" : {\n    \"key\" : \"bu-345-france\",\n    \"typeId\" : \"business-unit\"\n  }\n}"}},"response":[]}]},{"name":"Orders","description":"null","item":[{"name":"Create Order in BusinessUnit from Quote as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/quotes","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","quotes"],"query":[]},"description":"\nCreates an Order from a [Quote](ctp:api:type:Quote) in a [BusinessUnit](ctp:api:type:BusinessUnit).\n\nThe Quote must reference the same Business Unit as the `businessUnitKey` path parameter, must have the `Pending` [state](ctp:api:type:QuoteState), and must be valid (not past the `validTo` date). If these criteria are not met, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.\n\nSpecific Error Codes:\n\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [OutOfStock](ctp:api:type:OutOfStockError)\n","body":{"mode":"raw","raw":"{\n  \"quote\" : {\n    \"id\" : \"40d04a85-34d3-4769-a1b6-ecd00db2a587\",\n    \"typeId\" : \"quote\"\n  },\n  \"version\" : 1\n}"}},"response":[]},{"name":"Get Order in BusinessUnit by OrderNumber as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","order-number={{order-number}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an Order with the provided `orderNumber` in a [BusinessUnit](ctp:api:type:BusinessUnit).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Order exists in BusinessUnit by OrderNumber as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","order-number={{order-number}}"],"query":[]},"description":"Checks if an Order exists with the provided `orderNumber` in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if the Order exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Order in BusinessUnit by OrderNumber as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","order-number={{order-number}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeOrderState\",\n    \"orderState\" : \"Complete\"\n  } ]\n}"}},"response":[]},{"name":"Get Order in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an Order with the provided `id` in a [BusinessUnit](ctp:api:type:BusinessUnit).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Order exists in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[]},"description":"Checks if an Order exists with the provided `id` in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if the Order exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Order in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeOrderState\",\n    \"orderState\" : \"Complete\"\n  } ]\n}"}},"response":[]},{"name":"Query Orders in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Orders in a [BusinessUnit](ctp:api:type:BusinessUnit).","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Order exists in BusinessUnit by Query Predicate as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Orders exist with provided query predicate in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if any Orders match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Order in BusinessUnit from Cart as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates an Order from a [Cart](ctp:api:type:Cart) in a [BusinessUnit](ctp:api:type:BusinessUnit).\n\nThe Cart must have a shipping address and an active Shipping Method set.\n\nIf the Cart does not reference the same BusinessUnit as the `businessUnitKey` path parameter, an [InvalidOperation](ctp:api:type:InvalidOperationError) is returned.\n\nSpecific Error Codes:\n\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [OutOfStock](ctp:api:type:OutOfStockError)\n- [PriceChanged](ctp:api:type:PriceChangedError)\n- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"cart\" : {\n    \"id\" : \"7c2e2694-aefe-43d7-888e-6a99514caaca\",\n    \"typeId\" : \"cart\"\n  },\n  \"version\" : 10\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDelivery\",\n            \"items\" : [ {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 1\n            } ],\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            },\n            \"parcels\" : [ {\n              \"measurements\" : {\n                \"heightInMillimeter\" : 11,\n                \"widthInMillimeter\" : 11\n              },\n              \"trackingData\" : {\n                \"trackingId\" : \"{{trackingId}}\",\n                \"carrier\" : \"TNT\",\n                \"provider\" : \"providerName\",\n                \"providerTransaction\" : \"{{transactionId}}\",\n                \"isReturn\" : false\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddParcelToDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addParcelToDelivery\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"measurements\" : {\n              \"heightInMillimeter\" : 11,\n              \"widthInMillimeter\" : 11\n            },\n            \"trackingData\" : {\n              \"trackingId\" : \"{{trackingId}}\",\n              \"carrier\" : \"TNT\",\n              \"provider\" : \"providerName\",\n              \"providerTransaction\" : \"{{transactionId}}\",\n              \"isReturn\" : false\n            },\n            \"items\" : {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 2\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddPayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPayment\",\n            \"payment\" : {\n              \"typeId\" : \"payment\",\n              \"id\" : \"{{payment-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"AddReturnInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addReturnInfo\",\n            \"items\" : [ {\n              \"quantity\" : 1,\n              \"lineItemId\" : \"{{lineItemId}}\",\n              \"shipmentState\" : \"Returned\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeOrderState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeOrderState\",\n            \"orderState\" : \"Open\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangePaymentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePaymentState\",\n            \"paymentState\" : \"Failed\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeShipmentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeShipmentState\",\n            \"shipmentState\" : \"Ready\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ImportCustomLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"importCustomLineItemState\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"state\" : [ {\n              \"quantity\" : 6,\n              \"state\" : {\n                \"typeId\" : \"state\",\n                \"id\" : \"{{state-id}}\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ImportLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"importLineItemState\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"state\" : [ {\n              \"quantity\" : 5,\n              \"state\" : {\n                \"typeId\" : \"state\",\n                \"id\" : \"{{state-id}}\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemoveDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDelivery\",\n            \"deliveryId\" : \"{{deliveryId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemoveItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeItemShippingAddress\",\n            \"addressKey\" : \"addressKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemoveParcelFromDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeParcelFromDelivery\",\n            \"parcelId\" : \"{{parcelId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RemovePayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePayment\",\n            \"payment\" : {\n              \"typeId\" : \"payment\",\n              \"id\" : \"{{payment-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetBillingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetBillingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBusinessUnit\",\n            \"businessUnit\" : {\n              \"key\" : \"{{business-unit-key}}\",\n              \"typeId\" : \"business-unit\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomField\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomType\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemShippingDetails\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomerEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"email\" : \"email@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomerId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerId\",\n            \"customerId\" : \"{{customer-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetDeliveryAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddress\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetDeliveryAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddressCustomField\",\n            \"deliveryId\" : \"{{delivery-id}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetDeliveryAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddressCustomType\",\n            \"deliveryId\" : \"{{delivery-id}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetDeliveryCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryCustomField\",\n            \"deliveryId\" : \"exampleDeliveryID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetDeliveryCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryCustomType\",\n            \"deliveryId\" : \"exampleDeliveryID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetDeliveryItems","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryItems\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"items\" : [ {\n              \"id\" : \"{{itemId}}\",\n              \"quantity\" : 2\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetItemShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomField\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetItemShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomType\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemShippingDetails\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetOrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setOrderNumber\",\n            \"orderNumber\" : \"myOrderNumber\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetParcelCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelCustomField\",\n            \"parcelId\" : \"exampleParcelID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetParcelCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelCustomType\",\n            \"parcelId\" : \"exampleParcelID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetParcelItems","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelItems\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"items\" : [ {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 2\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetParcelMeasurements","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelMeasurements\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"measurements\" : {\n              \"heightInMillimeter\" : 11,\n              \"lengthInMillimeter\" : 11\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetParcelTrackingData","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelTrackingData\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"trackingData\" : {\n              \"trackingId\" : \"{{trackingId}}\",\n              \"carrier\" : \"TNT\",\n              \"provider\" : \"providerName\",\n              \"providerTransaction\" : \"{{transactionId}}\",\n              \"isReturn\" : false\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetPurchaseOrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPurchaseOrderNumber\",\n            \"purchaseOrderNumber\" : \"purchaseOrderNumberString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetReturnInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnInfo\",\n            \"items\" : [ {\n              \"items\" : [ {\n                \"quantity\" : 1,\n                \"lineItemId\" : \"{{lineItemId}}\",\n                \"comment\" : \"any comment\",\n                \"shipmentState\" : \"Returned\"\n              } ],\n              \"returnTrackingId\" : \"returnTrackingId-example\",\n              \"returnDate\" : \"2021-04-30T09:21:15.003Z\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetReturnItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnItemCustomField\",\n            \"returnItemId\" : \"exampleReturnItemID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetReturnItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnItemCustomType\",\n            \"returnItemId\" : \"exampleReturnItemID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetReturnPaymentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnPaymentState\",\n            \"returnItemId\" : \"{{returnItemId}}\",\n            \"paymentState\" : \"NotRefunded\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetReturnShipmentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnShipmentState\",\n            \"returnItemId\" : \"{{returnItemId}}\",\n            \"shipmentState\" : \"BackInStock\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomField\",\n            \"shippingKey\" : \"shipping-key-express\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetShippingCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomType\",\n            \"shippingKey\" : \"shipping-key-express\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"TransitionCustomLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionCustomLineItemState\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"quantity\" : 6,\n            \"fromState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            },\n            \"toState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"TransitionLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionLineItemState\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 3,\n            \"fromState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            },\n            \"toState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"UpdateItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"UpdateSyncInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateSyncInfo\",\n            \"channel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]}]}]},{"name":"Quotes","description":"A quote holds the negotiated offer.","item":[{"name":"Get Quote in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","key={{quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","key={{quote-key}}"],"query":[]},"description":"Checks if a Quote exists with the provided `key`. Returns a `200` status if the Quote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Quote in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","key={{quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteState\",\n    \"quoteState\" : \"Accepted\"\n  } ]\n}"}},"response":[]},{"name":"Get Quote in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[]},"description":"Checks if a Quote exists with the provided `id`. Returns a `200` status if the Quote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Quote in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteState\",\n    \"quoteState\" : \"Accepted\"\n  } ]\n}"}},"response":[]},{"name":"Query Quotes in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists in BusinessUnit by Query Predicate as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Quotes exist for the provided query predicate. Returns a `200` status if any Quotes match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"43ddac22-3daa-4689-8975-9f80750ea2e7\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeQuoteState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeQuoteState\",\n            \"quoteState\" : \"Accepted\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"RequestQuoteRenegotiation","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"requestQuoteRenegotiation\",\n            \"buyerComment\" : \"Please also give me a 10% discount on the red T-shirts.\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]}]}]},{"name":"Quote-requests","description":"null","item":[{"name":"Get QuoteRequest in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","key={{quote-request-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","key={{quote-request-key}}"],"query":[]},"description":"Checks if a QuoteRequest exists with the provided `key`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update QuoteRequest in BusinessUnit by Key as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","key={{quote-request-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteRequestState\",\n    \"quoteRequestState\" : \"Cancelled\"\n  } ]\n}"}},"response":[]},{"name":"Get QuoteRequest in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","{{quote-request-id}}"],"query":[]},"description":"Checks if a QuoteRequest exists with the provided `id`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update QuoteRequest in BusinessUnit by ID as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteRequestState\",\n    \"quoteRequestState\" : \"Cancelled\"\n  } ]\n}"}},"response":[]},{"name":"Query QuoteRequests in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists in BusinessUnit by Query Predicate as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more QuoteRequests exist for the provided query predicate. Returns a `200` status if any QuoteRequests match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create QuoteRequest in BusinessUnit as Associate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a QuoteRequest in a [BusinessUnit](ctp:api:type:BusinessUnit). Creating QuoteRequest fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the Cart does not reference the same BusinessUnit as the `businessUnitKey` path parameter.","body":{"mode":"raw","raw":"{\n  \"cart\" : {\n    \"typeId\" : \"cart\",\n    \"id\" : \"168e5783-73c8-4f2d-91f4-3c90b872c708\"\n  },\n  \"cartVersion\" : 1,\n  \"comment\" : \"Give me 10% discount\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"900bcbef-77e6-4739-8fdf-c3511d14b32a\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"ChangeQuoteRequestState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeQuoteRequestState\",\n            \"quoteRequestState\" : \"Rejected\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/as-associate/{{associate-id}}/in-business-unit/key={{business-unit-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","as-associate","{{associate-id}}","in-business-unit","key={{business-unit-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.\n"},"response":[]}]}]}]}]},{"name":"Associate-roles","description":"An Associate Role enables permissions over a Business Unit to an Associate.","item":[{"name":"Get AssociateRole by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/key={{associate-role-key}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","key={{associate-role-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if AssociateRole exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/key={{associate-role-key}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","key={{associate-role-key}}"],"query":[]},"description":"Checks if an AssociateRole exists with the provided `key`. Returns a `200` status if the AssociateRole exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update AssociateRole by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/key={{associate-role-key}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","key={{associate-role-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"setName\",\n    \"name\" : \"regional-manager\"\n  } ]\n}"}},"response":[]},{"name":"Delete AssociateRole by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/key={{associate-role-key}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","key={{associate-role-key}}"],"query":[{"key":"version","value":"{{associate-role-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting an AssociateRole generates the [AssociateRoleDeleted](ctp:api:type:AssociateRoleDeletedMessage) Message. An AssociateRole can only be deleted if it is not assigned to any [Associates](ctp:api:type:Associate).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get AssociateRole by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if AssociateRole exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[]},"description":"Checks if an AssociateRole exists with the provided `id`. Returns a `200` status if the AssociateRole exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update AssociateRole by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"setName\",\n    \"name\" : \"regional-manager\"\n  } ]\n}"}},"response":[]},{"name":"Delete AssociateRole by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"version","value":"{{associate-role-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query AssociateRoles","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles","host":["{{host}}"],"path":["{{project-key}}","associate-roles"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if AssociateRole exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles","host":["{{host}}"],"path":["{{project-key}}","associate-roles"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more AssociateRoles exist for the provided query predicate. Returns a `200` status if any AssociateRole match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create AssociateRole","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles","host":["{{host}}"],"path":["{{project-key}}","associate-roles"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creating a Associate Role generates the [AssociateRoleCreated](ctp:api:type:AssociateRoleCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"regional-manager\",\n  \"permissions\" : [ \"ViewMyCarts\", \"UpdateMyCarts\" ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddPermission","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{associate-role-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPermission\",\n            \"permission\" : \"ViewMyCarts\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AssociateRoles"},"response":[]},{"name":"ChangeBuyerAssignable","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{associate-role-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeBuyerAssignable\",\n            \"buyerAssignable\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AssociateRoles"},"response":[]},{"name":"RemovePermission","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{associate-role-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePermission\",\n            \"permission\" : \"ViewMyCarts\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AssociateRoles"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{associate-role-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"ExamplaryStringTypeField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AssociateRoles"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{associate-role-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"examplaryStringTypeField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AssociateRoles"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{associate-role-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : \"regional-manager\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AssociateRoles"},"response":[]},{"name":"SetPermissions","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-role-id\", data.results[0].id); ","    pm.environment.set(\"associate-role-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-role-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-role-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-role-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-role-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{associate-role-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPermissions\",\n            \"permissions\" : [ \"ViewMyCarts\", \"ViewOthersCarts\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/associate-roles/{{associate-role-id}}","host":["{{host}}"],"path":["{{project-key}}","associate-roles","{{associate-role-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AssociateRoles"},"response":[]}]}]},{"name":"Business-units","description":"A Business Unit can represent a Company or a Division.","item":[{"name":"Get BusinessUnit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","business-units","key={{business-unit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","business-units","key={{business-unit-key}}"],"query":[]},"description":"Checks if a BusinessUnit exists with the provided `key`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update BusinessUnit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","business-units","key={{business-unit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete BusinessUnit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","business-units","key={{business-unit-key}}"],"query":[{"key":"version","value":"{{business-unit-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get BusinessUnit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[]},"description":"Checks if a BusinessUnit exists with the provided `id`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update BusinessUnit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete BusinessUnit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"version","value":"{{business-unit-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Associate in BusinessUnit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-id\", data.results[0].id); ","    pm.environment.set(\"associate-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/key={{associate-key}}/associates/{{associate-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","key={{associate-key}}","associates","{{associate-id}}"],"query":[]},"description":"Retrieves roles and permissions of an Associate in a Business Unit.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Associate in BusinessUnit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-id\", data.results[0].id); ","    pm.environment.set(\"associate-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}/associates/{{associate-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}","associates","{{associate-id}}"],"query":[]},"description":"Retrieves roles and permissions of an Associate in a Business Unit.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Search Business Units","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/search","host":["{{host}}"],"path":["{{project-key}}","business-units","search"],"query":[]},"description":"If the initial indexing is in progress or the feature is inactive, A [SearchNotReady](ctp:api:type:SearchNotReadyError) error is returned. If inactive, you can [reactivate](/../api/projects/business-unit-search#reactivate) it.\n","body":{"mode":"raw","raw":"{\n  \"query\" : {\n    \"fullText\" : {\n      \"field\" : \"all\",\n      \"value\" : \"plumbing\"\n    }\n  }\n}"}},"response":[]},{"name":"Check if Business Unit Search index exists","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/search","host":["{{host}}"],"path":["{{project-key}}","business-units","search"],"query":[]},"description":"Checks whether a search index of Business Units exists for a Project.\nReturns a `200 OK` if an index exists; otherwise, returns a `409 Conflict`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get indexing status of Business Unit Search","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"indexing-statu-id\", data.results[0].id); ","    pm.environment.set(\"indexing-statu-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"indexing-statu-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"indexing-statu-version\", data.version);","}","if(data.id){","    pm.environment.set(\"indexing-statu-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"indexing-statu-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/search/indexing-status","host":["{{host}}"],"path":["{{project-key}}","business-units","search","indexing-status"],"query":[]},"description":"Returns the indexing status of the Business Unit Search for a Project.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query BusinessUnits","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units","host":["{{host}}"],"path":["{{project-key}}","business-units"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units","host":["{{host}}"],"path":["{{project-key}}","business-units"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more BusinessUnits exist for the provided query predicate. Returns a `200` status if any BusinessUnits match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create BusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units","host":["{{host}}"],"path":["{{project-key}}","business-units"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"commercetools\",\n  \"unitType\" : \"Company\",\n  \"key\" : \"commercetools\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAddress\",\n            \"address\" : {\n              \"id\" : \"exampleAddress\",\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"mail@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAssociate\",\n            \"associate\" : {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              }, {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAddress\",\n            \"addressId\" : \"{{addressId}}\",\n            \"address\" : {\n              \"id\" : \"exampleAddress\",\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeApprovalRuleMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeApprovalRuleMode\",\n            \"approvalRuleMode\" : \"Explicit\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssociate\",\n            \"associate\" : {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              }, {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAssociateMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n                |{\n            \"action\": \"changeAssociateMode\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"commercetools\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeParentUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeParentUnit\",\n            \"parentUnit\" : {\n              \"typeId\" : \"business-unit\",\n              \"key\" : \"commercetools\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeStatus","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeStatus\",\n            \"status\" : \"Inactive\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAssociate\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"some-customer-id\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\",\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAssociates","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssociates\",\n            \"associates\" : [ {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              } ]\n            }, {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"another-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetContactEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setContactEmail\",\n            \"contactEmail\" : \"contact@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetDefaultBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultBillingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetDefaultShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultShippingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetStoreMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStoreMode\",\n            \"storeMode\" : \"FromParent\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetStores","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStores\",\n            \"stores\" : [ {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetUnitType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setUnitType\",\n            \"unitType\" : \"Division\",\n            \"parentUnit\" : {\n              \"typeId\" : \"business-unit\",\n              \"key\" : \"commercetools\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]}]}]},{"name":"Categories","description":"Categories are used to organize products in a hierarchical structure.","item":[{"name":"Get Category by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/key={{category-key}}","host":["{{host}}"],"path":["{{project-key}}","categories","key={{category-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Category exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/key={{category-key}}","host":["{{host}}"],"path":["{{project-key}}","categories","key={{category-key}}"],"query":[]},"description":"Checks if a Category exists with the provided `key`. Returns a `200` status if the Category exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Category by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/key={{category-key}}","host":["{{host}}"],"path":["{{project-key}}","categories","key={{category-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Category by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/key={{category-key}}","host":["{{host}}"],"path":["{{project-key}}","categories","key={{category-key}}"],"query":[{"key":"version","value":"{{category-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Category by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Category exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[]},"description":"Checks if a Category exists with the provided `id`. Returns a `200` status if the Category exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Category by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Category by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"version","value":"{{category-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Categories","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories","host":["{{host}}"],"path":["{{project-key}}","categories"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Category exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories","host":["{{host}}"],"path":["{{project-key}}","categories"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Categories exist for the provided query predicate. Returns a `200` status if any Categories match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Category","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories","host":["{{host}}"],"path":["{{project-key}}","categories"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n\nCreating a Category produces the [CategoryCreated](ctp:api:type:CategoryCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"name\" : {\n    \"en\" : \"Hats\"\n  },\n  \"slug\" : {\n    \"en\" : \"hats\"\n  },\n  \"parent\" : {\n    \"typeId\" : \"category\",\n    \"id\" : \"123456\"\n  },\n  \"orderHint\" : \"0.1\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAsset","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAsset\",\n            \"asset\" : {\n              \"sources\" : [ {\n                \"uri\" : \"https://www.commercetools.de/ct-logo.svg\",\n                \"key\" : \"vector\"\n              } ],\n              \"name\" : {\n                \"de\" : \"commercetools Logo\",\n                \"en\" : \"commercetools logo\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"ChangeAssetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssetName\",\n            \"assetId\" : \"{{assetId}}\",\n            \"name\" : {\n              \"de\" : \"Mein Asset\",\n              \"en\" : \"My asset\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"ChangeAssetOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssetOrder\",\n            \"assetOrder\" : [ \"{{assetId1}}\", \"{{assetId2}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"de\" : \"neuer Category Name\",\n              \"en\" : \"new category name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"ChangeOrderHint","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeOrderHint\",\n            \"orderHint\" : \"0.1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"ChangeParent","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeParent\",\n            \"parent\" : {\n              \"typeId\" : \"category\",\n              \"id\" : \"{{category-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"ChangeSlug","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeSlug\",\n            \"slug\" : {\n              \"de\" : \"meine-kategorie\",\n              \"en\" : \"my-category\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"RemoveAsset","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAsset\",\n            \"assetId\" : \"{{assetId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetAssetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetCustomField\",\n            \"assetId\" : \"{{assetId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetAssetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetCustomType\",\n            \"assetId\" : \"{{assetId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetAssetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetDescription\",\n            \"assetId\" : \"{{assetId}}\",\n            \"description\" : {\n              \"de\" : \"Dies ist eine Asset-Beschreibung\",\n              \"en\" : \"This is an asset description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetAssetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetKey\",\n            \"assetId\" : \"{{assetId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetAssetSources","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetSources\",\n            \"assetId\" : \"{{assetId}}\",\n            \"sources\" : [ {\n              \"uri\" : \"https://www.commercetools.de/ct-logo.svg\",\n              \"key\" : \"vector\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetAssetTags","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetTags\",\n            \"assetId\" : \"{{assetId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"de\" : \"This is a category description\",\n              \"en\" : \"Dies ist eine Kategorie-Beschreibung\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetExternalId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setExternalId\",\n            \"externalId\" : \"externalIdString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"myNewKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetMetaDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaDescription\",\n            \"metaDescription\" : {\n              \"de\" : \"Dies ist meine MetaDecription\",\n              \"en\" : \"this is my meta description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetMetaKeywords","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaKeywords\",\n            \"metaKeywords\" : {\n              \"de\" : \"commercetools, genial\",\n              \"en\" : \"commercetools, aweseome\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]},{"name":"SetMetaTitle","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"category-id\", data.results[0].id); ","    pm.environment.set(\"category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaTitle\",\n            \"metaTitle\" : {\n              \"de\" : \"Dies ist mein Meta-Title\",\n              \"en\" : \"This is my meta title\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/categories/{{category-id}}","host":["{{host}}"],"path":["{{project-key}}","categories","{{category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.\n"},"response":[]}]}]},{"name":"Carts","description":"A shopping cart holds product variants and can be ordered.","item":[{"name":"Replicate cart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"replicate-id\", data.results[0].id); ","    pm.environment.set(\"replicate-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"replicate-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"replicate-version\", data.version);","}","if(data.id){","    pm.environment.set(\"replicate-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"replicate-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/replicate","host":["{{host}}"],"path":["{{project-key}}","carts","replicate"],"query":[]},"description":"Creates a new Cart by replicating an existing Cart or Order.\n\nThe following applies to the new Cart:\n\n- It contains the same Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the originating Cart or Order.\n- If a Line Item becomes invalid, it is removed from the new Cart. A common reason for this is removed Products or Prices.\n- Line items and Custom Line Items are reset to their initial [state](/projects/carts#itemstate).\n- It contains no payments or delivery information.\n- It contains up-to-date Tax Rates, Prices, and Line Item product data.\n- The [CartState](/projects/carts#cartstate) is `Active`.\n- If using the `customerGroup` field (for a single Customer Group) and the referenced Customer switched to another Customer Group, the new Cart is automatically updated to reflect the new group and corresponding prices.\n- If using the `customerGroupAssignments` field (for multiple Customer Groups), the Cart no longer keeps a direct reference to a Customer Group. If a Customer’s group assignments change, the Cart and its Line Item prices are not updated automatically. Prices are only updated when the Cart is changed via a [direct update action](/projects/carts#update-actions).\n\nSpecific Error Codes:\n\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"reference\" : {\n    \"id\" : \"74dcac8b-0c67-4f37-b693-3acd33e3c457\",\n    \"typeId\" : \"cart\"\n  }\n}"}},"response":[]},{"name":"Get Cart by Customer ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/customer-id={{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","customer-id={{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves the most recently modified active Cart of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nTo ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists by Customer ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/customer-id={{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","customer-id={{customer-id}}"],"query":[]},"description":"Checks if a Cart exists for a Customer. Returns a `200` status if the Cart exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Cart by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","carts","key={{cart-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Cart with the provided `key`.\nTo ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","carts","key={{cart-key}}"],"query":[]},"description":"Checks if a Cart exists with the provided `key`. Returns a `200` status if the Cart exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Cart by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","carts","key={{cart-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addLineItem\",\n    \"productId\" : \"9f10dcfb-5cc9-4a18-843a-c07f7e22d01f\",\n    \"variantId\" : 1,\n    \"quantity\" : 1\n  } ]\n}"}},"response":[]},{"name":"Delete Cart by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","carts","key={{cart-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{cart-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a Cart in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Cart by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Cart with the provided `id`.\nTo ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[]},"description":"Checks if a Cart exists for the provided `id`. Returns a `200` status if the Cart exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Cart by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addLineItem\",\n    \"productId\" : \"9f10dcfb-5cc9-4a18-843a-c07f7e22d01f\",\n    \"variantId\" : 1,\n    \"quantity\" : 1\n  } ]\n}"}},"response":[]},{"name":"Delete Cart by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{cart-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a Cart in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Carts","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Carts in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","carts"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Carts exist for the provided query predicate. Returns a `200` status if any Carts match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Cart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"\nCreates a Cart in the Project.\n\nIf the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match, or if the Shipping Method is not active, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.\n\nSpecific Error Codes:\n\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"currency\" : \"EUR\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddCustomLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCustomLineItem\",\n            \"name\" : {\n              \"en\" : \"Name EN\",\n              \"de\" : \"Name DE\"\n            },\n            \"quantity\" : 1,\n            \"money\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4200\n            },\n            \"slug\" : \"mySlug\",\n            \"taxCategory\" : {\n              \"typeId\" : \"tax-category\",\n              \"id\" : \"{{tax-category-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"AddCustomShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCustomShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"shippingMethodName\" : \"oneOfCustomShippingMethods\",\n            \"shippingAddress\" : {\n              \"key\" : \"exampleKey\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\"\n            },\n            \"shippingRate\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            },\n            \"taxCategory\" : {\n              \"id\" : \"{{tax-category-id}}\",\n              \"typeId\" : \"tax-category\"\n            },\n            \"deliveries\" : [ ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"AddDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDiscountCode\",\n            \"code\" : \"mydiscountcode\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"AddItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"AddLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLineItem\",\n            \"productId\" : \"{{product-id}}\",\n            \"variantId\" : 2,\n            \"quantity\" : 1,\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"externalTaxRate\" : {\n              \"name\" : \"StandardExternalTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\",\n              \"state\" : \"Bavaria\"\n            },\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"AddPayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"AddShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"shippingMethod\" : {\n              \"id\" : \"{{shipping-method-id}}\",\n              \"typeId\" : \"shipping-method\"\n            },\n            \"shippingAddress\" : {\n              \"key\" : \"exampleKey\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\"\n            },\n            \"shippingRateInput\" : {\n              \"type\" : \"Classification\",\n              \"key\" : \"shippingRateString\"\n            },\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"AddShoppingList","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShoppingList\",\n            \"shoppingList\" : {\n              \"id\" : \"{{shopping-list-id}}\",\n              \"typeId\" : \"shopping-list\"\n            },\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ApplyDeltaToCustomLineItemShippingDetailsTargets","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyDeltaToCustomLineItemShippingDetailsTargets\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"targetsDelta\" : [ {\n              \"addressKey\" : \"addressKeyString\",\n              \"quantity\" : 1\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ApplyDeltaToLineItemShippingDetailsTargets","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyDeltaToLineItemShippingDetailsTargets\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"targetsDelta\" : [ {\n              \"addressKey\" : \"addressKeyString\",\n              \"quantity\" : 1\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangeCustomLineItemMoney","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemMoney\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"money\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4200\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangeCustomLineItemPriceMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemPriceMode\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"mode\" : \"External\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangeCustomLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemQuantity\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangeLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangeLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemsOrder\",\n            \"lineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangePriceRoundingMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePriceRoundingMode\",\n            \"priceRoundingMode\" : \"HalfDown\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangeTaxCalculationMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxCalculationMode\",\n            \"taxCalculationMode\" : \"LineItemLevel\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangeTaxMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxMode\",\n            \"taxMode\" : \"Platform\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"ChangeTaxRoundingMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxRoundingMode\",\n            \"taxRoundingMode\" : \"HalfUp\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"FreezeCart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"freezeCart\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"Recalculate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"recalculate\",\n            \"updateProductData\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"RemoveCustomLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeCustomLineItem\",\n            \"customLineItemId\" : \"{{customLineItemId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"RemoveDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDiscountCode\",\n            \"discountCode\" : {\n              \"typeId\" : \"discount-code\",\n              \"id\" : \"{{discount-code-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"RemoveItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeItemShippingAddress\",\n            \"addressKey\" : \"{{addressKey}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"RemoveLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1,\n            \"externalPrice\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            },\n            \"shippingDetailsToRemove\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"RemovePayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"RemoveShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetAnonymousId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAnonymousId\",\n            \"anonymousId\" : \"idString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetBillingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetBillingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBusinessUnit\",\n            \"businessUnit\" : {\n              \"key\" : \"{{business-unit-key}}\",\n              \"typeId\" : \"business-unit\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCartTotalTax","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCartTotalTax\",\n            \"externalTotalGross\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 10000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCountry","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCountry\",\n            \"country\" : \"DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomField\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"customLineItemId\" : \"{{customLineItemId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemRecurrenceInfo\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemShippingDetails\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 1\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomLineItemTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemTaxAmount\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"centAmount\" : 2000000,\n                \"currencyCode\" : \"EUR\"\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomLineItemTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemTaxRate\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"externalTaxRate\" : {\n              \"name\" : \"TaxRateName\",\n              \"country\" : \"DE\",\n              \"amount\" : 0.19\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomShippingMethod\",\n            \"shippingMethodName\" : \"myCustomShippingMethod\",\n            \"shippingRate\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            },\n            \"taxCategory\" : {\n              \"id\" : \"{{tax-category-id}}\",\n              \"typeId\" : \"tax-category\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomerEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"email\" : \"email@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomerGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerGroup\",\n            \"customerGroup\" : {\n              \"id\" : \"{{customer-group-id}}\",\n              \"typeId\" : \"customer-group\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetCustomerId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerId\",\n            \"customerId\" : \"{{customer-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetDeleteDaysAfterLastModification","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeleteDaysAfterLastModification\",\n            \"deleteDaysAfterLastModification\" : 90\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetDirectDiscounts","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDirectDiscounts\",\n            \"discounts\" : [ {\n              \"value\" : {\n                \"type\" : \"relative\",\n                \"permyriad\" : 1000\n              },\n              \"target\" : {\n                \"type\" : \"lineItems\",\n                \"predicate\" : \"1=1\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetItemShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomField\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetItemShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomType\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"myNewKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemDistributionChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemDistributionChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemInventoryMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemInventoryMode\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"inventoryMode\" : \"TrackOnly\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemPrice\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalPrice\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemRecurrenceInfo\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              },\n              \"priceSelectionMode\" : \"Fixed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemShippingDetails\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 1\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemSupplyChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemSupplyChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTaxAmount\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 100\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTaxRate\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLineItemTotalPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTotalPrice\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTotalPrice\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              },\n              \"totalPrice\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomField\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomType\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethod\",\n            \"shippingMethod\" : {\n              \"id\" : \"{{shipping-method-id}}\",\n              \"typeId\" : \"shipping-method\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingMethodTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethodTaxAmount\",\n            \"shippingKey\" : \"shipping-method-key\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"centAmount\" : 2000000,\n                \"currencyCode\" : \"EUR\"\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingMethodTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethodTaxRate\",\n            \"shippingKey\" : \"shipping-method-key\",\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"SetShippingRateInput","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingRateInput\",\n            \"shippingRateInput\" : {\n              \"type\" : \"Classification\",\n              \"key\" : \"shippingRateString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"UnfreezeCart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"unfreezeCart\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]},{"name":"UpdateItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions)."},"response":[]}]}]},{"name":"Cart-discounts","description":"Cart discounts are used to change the prices of different elements within a cart.","item":[{"name":"Get CartDiscount by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/key={{cart-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","key={{cart-discount-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CartDiscount exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/key={{cart-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","key={{cart-discount-key}}"],"query":[]},"description":"Checks if a CartDiscount exists with the provided `key`. Returns a `200` status if the CartDiscount exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update CartDiscount by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/key={{cart-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","key={{cart-discount-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeValue\",\n    \"value\" : {\n      \"type\" : \"relative\",\n      \"permyriad\" : 1500\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete CartDiscount by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/key={{cart-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","key={{cart-discount-key}}"],"query":[{"key":"version","value":"{{cart-discount-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get CartDiscount by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CartDiscount exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[]},"description":"Checks if a CartDiscount exists with the provided `id`. Returns a `200` status if the CartDiscount exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update CartDiscount by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeValue\",\n    \"value\" : {\n      \"type\" : \"relative\",\n      \"permyriad\" : 1500\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete CartDiscount by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"version","value":"{{cart-discount-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query CartDiscounts","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts","host":["{{host}}"],"path":["{{project-key}}","cart-discounts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CartDiscount exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts","host":["{{host}}"],"path":["{{project-key}}","cart-discounts"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more CartDiscounts exist for the provided query predicate. Returns a `200` status if any CartDiscounts match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create CartDiscount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts","host":["{{host}}"],"path":["{{project-key}}","cart-discounts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creating a Cart Discount produces the [CartDiscountCreated](ctp:api:type:CartDiscountCreatedMessage) Message.","body":{"mode":"raw","raw":"{\n  \"key\" : \"black-friday-sale\",\n  \"name\" : {\n    \"en\" : \"Black Friday Sale\"\n  },\n  \"description\" : {\n    \"en\" : \"10% discount on all items in cart\"\n  },\n  \"value\" : {\n    \"type\" : \"relative\",\n    \"permyriad\" : 1000\n  },\n  \"cartPredicate\" : \"lineItemTotal(true = true) >= \\\"500.00 USD\\\"\",\n  \"target\" : {\n    \"type\" : \"lineItems\",\n    \"predicate\" : \"categories.id = (\\\"{{category-id}}\\\")\"\n  },\n  \"sortOrder\" : \"0.01\",\n  \"stores\" : [ {\n    \"key\" : \"europe\",\n    \"typeId\" : \"store\"\n  } ],\n  \"isActive\" : true,\n  \"requiresDiscountCode\" : true,\n  \"stackingMode\" : \"Stacking\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"ChangeCartPredicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCartPredicate\",\n            \"cartPredicate\" : \"shippingInfo.taxRate.country = \"DE\"\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"ChangeIsActive","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeIsActive\",\n            \"isActive\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"en\" : \"New name\",\n              \"de\" : \"Neuer Name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"ChangeRequiresDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeRequiresDiscountCode\",\n            \"requiresDiscountCode\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"ChangeSortOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeSortOrder\",\n            \"sortOrder\" : \"0.1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"ChangeStackingMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeStackingMode\",\n            \"stackingMode\" : \"StopAfterThisDiscount\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"ChangeTarget","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTarget\",\n            \"target\" : {\n              \"type\" : \"lineItems\",\n              \"predicate\" : \"sku = \"myOtherSKU\"\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"ChangeValue","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeValue\",\n            \"value\" : {\n              \"type\" : \"absolute\",\n              \"money\" : [ {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 40099\n              } ],\n              \"applicationMode\" : \"IndividualApplication\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"RemoveStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"en\" : \"New description\",\n              \"de\" : \"neue Beschreibung\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetDiscountGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDiscountGroup\",\n            \"discountGroup\" : {\n              \"key\" : \"{{discount-group-key}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetStores","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStores\",\n            \"stores\" : [ {\n              \"key\" : \"store-one\"\n            }, {\n              \"key\" : \"store-two\"\n            }, {\n              \"key\" : \"store-three\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetValidFrom","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidFrom\",\n            \"validFrom\" : \"2025-10-15T15:00:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetValidFromAndUntil","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidFromAndUntil\",\n            \"validFrom\" : \"2025-10-15T15:00:00.000Z\",\n            \"validUntil\" : \"2025-11-15T15:05:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]},{"name":"SetValidUntil","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidUntil\",\n            \"validUntil\" : \"2025-11-15T20:00:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CartDiscounts"},"response":[]}]}]},{"name":"Channels","description":"Channels represent a source or destination of different entities. They can be used to model warehouses or stores.\n","item":[{"name":"Get Channel by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Channel exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[]},"description":"Checks if a Channel exists with the provided `id`. Returns a `200` status if the Channel exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Channel by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Channel by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"version","value":"{{channel-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Returns a [ReferenceExists](ctp:api:type:ReferenceExistsError) error if other resources reference the Channel to be deleted.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Channel by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/key={{channel-key}}","host":["{{host}}"],"path":["{{project-key}}","channels","key={{channel-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Channel exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/key={{channel-key}}","host":["{{host}}"],"path":["{{project-key}}","channels","key={{channel-key}}"],"query":[]},"description":"Checks if a Channel exists with the provided `key`. Returns a `200` status if the Channel exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Channel by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/key={{channel-key}}","host":["{{host}}"],"path":["{{project-key}}","channels","key={{channel-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Channel by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/key={{channel-key}}","host":["{{host}}"],"path":["{{project-key}}","channels","key={{channel-key}}"],"query":[{"key":"version","value":"{{channel-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Returns a [ReferenceExists](ctp:api:type:ReferenceExistsError) error if other resources reference the Channel to be deleted.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Channels","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels","host":["{{host}}"],"path":["{{project-key}}","channels"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Channel exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels","host":["{{host}}"],"path":["{{project-key}}","channels"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Channels exist for the provided query predicate. Returns a `200` status if any Channels match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Channel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels","host":["{{host}}"],"path":["{{project-key}}","channels"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"key\" : \"commercetools\",\n  \"roles\" : [ \"InventorySupply\" ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddRoles","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addRoles\",\n            \"roles\" : [ \"InventorySupply\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"ChangeDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeDescription\",\n            \"description\" : {\n              \"en\" : \"new Description EN\",\n              \"de\" : \"new Description DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"ChangeKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeKey\",\n            \"key\" : \"myNewChannelKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"en\" : \"new Channel Name EN\",\n              \"de\" : \"new Channel Name DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"RemoveRoles","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeRoles\",\n            \"roles\" : [ \"InventorySupply\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"SetAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"SetAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"SetAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"SetGeoLocation","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setGeoLocation\",\n            \"geoLocation\" : {\n              \"type\" : \"Point\",\n              \"coordinates\" : [ 13.412119019109015, 52.50103330534661 ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]},{"name":"SetRoles","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"channel-id\", data.results[0].id); ","    pm.environment.set(\"channel-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"channel-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"channel-version\", data.version);","}","if(data.id){","    pm.environment.set(\"channel-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"channel-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{channel-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setRoles\",\n            \"roles\" : [ \"ProductDistribution\", \"Primary\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/channels/{{channel-id}}","host":["{{host}}"],"path":["{{project-key}}","channels","{{channel-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Channels"},"response":[]}]}]},{"name":"Customers","description":"A Customer is a person purchasing products. Carts, Orders, Quotes, Reviews and Payments can be associated to a Customer.\n","item":[{"name":"Get Customer by password token","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/password-token={{password-token}}","host":["{{host}}"],"path":["{{project-key}}","customers","password-token={{password-token}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Use this method to retrieve the details of a global Customer by using the password token during their [password reset process](/../api/customers-overview#customer-password-reset).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Customer by email token","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/email-token={{email-token}}","host":["{{host}}"],"path":["{{project-key}}","customers","email-token={{email-token}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Use this method to retrieve a global Customer's details by using the email token during their [email verification process](/../api/customers-overview#customer-email-verification).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create email token for Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"email-token-id\", data.results[0].id); ","    pm.environment.set(\"email-token-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"email-token-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"email-token-version\", data.version);","}","if(data.id){","    pm.environment.set(\"email-token-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"email-token-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/email-token","host":["{{host}}"],"path":["{{project-key}}","customers","email-token"],"query":[]},"description":"Use this method to create an email token for a global Customer during their [email verification process](/../api/customers-overview#customer-email-verification).\n\nCreating an email token for the Customer produces the [CustomerEmailTokenCreated](ctp:api:type:CustomerEmailTokenCreatedMessage) Message.\nThe Message will include the token's value, if the token's validity is 60 minutes or less.\n","body":{"mode":"raw","raw":"{\n  \"id\" : \"58ae9ffc-7e7b-414c-b060-357749d80c55\",\n  \"ttlMinutes\" : 4320\n}"}},"response":[]},{"name":"Verify email of Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"confirm-id\", data.results[0].id); ","    pm.environment.set(\"confirm-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"confirm-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"confirm-version\", data.version);","}","if(data.id){","    pm.environment.set(\"confirm-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"confirm-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/email/confirm","host":["{{host}}"],"path":["{{project-key}}","customers","email","confirm"],"query":[]},"description":"Use this method to verify a global Customer's email during their [email verification process](/../api/customers-overview#customer-email-verification).\n\nVerifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.\n\nAfter the email is verified, all email tokens issued previously through the [email verification flow](/../api/projects/customers#email-verification-of-customer) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).\n","body":{"mode":"raw","raw":"{\n  \"tokenValue\" : \"hI_6fkuFIyd_wadz1JmpRGh1vMvgFrlsSJia3G6d\"\n}"}},"response":[]},{"name":"Change password of Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"password-id\", data.results[0].id); ","    pm.environment.set(\"password-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"password-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"password-version\", data.version);","}","if(data.id){","    pm.environment.set(\"password-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"password-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/password","host":["{{host}}"],"path":["{{project-key}}","customers","password"],"query":[]},"description":"Changing the password produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.\n","body":{"mode":"raw","raw":"{\n  \"id\" : \"3cdcdcc8-80c5-41bb-abb5-ac8772c9cc24\",\n  \"version\" : 1,\n  \"currentPassword\" : \"secret123\",\n  \"newPassword\" : \"newSecret456\"\n}"}},"response":[]},{"name":"Reset password of Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"reset-id\", data.results[0].id); ","    pm.environment.set(\"reset-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"reset-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"reset-version\", data.version);","}","if(data.id){","    pm.environment.set(\"reset-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"reset-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/password/reset","host":["{{host}}"],"path":["{{project-key}}","customers","password","reset"],"query":[]},"description":"Use this method to reset a global Customer's password during their [password reset process](/../api/customers-overview#customer-password-reset).\n\nResetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.\n\nAfter the password is reset, all password tokens issued previously through the [password reset flow](/../api/projects/customers#password-reset-of-customer) are invalidated. In addition, any access and refresh tokens issued previously through the [password flow](/../api/authorization#password-flow) and [refresh token flow](/../api/authorization#refresh-token-flow) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).\n","body":{"mode":"raw","raw":"{\n  \"tokenValue\" : \"VRndRV5oCr-pKH2360DnlhqEOVVUZXSAIUXgT5HL\",\n  \"newPassword\" : \"newsecret123\"\n}"}},"response":[]},{"name":"Create password reset token for Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"password-token-id\", data.results[0].id); ","    pm.environment.set(\"password-token-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"password-token-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"password-token-version\", data.version);","}","if(data.id){","    pm.environment.set(\"password-token-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"password-token-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/password-token","host":["{{host}}"],"path":["{{project-key}}","customers","password-token"],"query":[]},"description":"Use this method to create a password reset token for a global Customer during their [password reset process](/../api/customers-overview#customer-password-reset).\n\nCreating a password reset token for the Customer produces the [CustomerPasswordTokenCreated](ctp:api:type:CustomerPasswordTokenCreatedMessage) Message.\nThe Message will include the token's value, if the token's validity is 60 minutes or less.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\"\n}"}},"response":[]},{"name":"Get Customer by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/key={{customer-key}}","host":["{{host}}"],"path":["{{project-key}}","customers","key={{customer-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Customer exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/key={{customer-key}}","host":["{{host}}"],"path":["{{project-key}}","customers","key={{customer-key}}"],"query":[]},"description":"Checks if a Customer exists with the provided `key`. Returns a `200` status if the Customer exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Customer by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/key={{customer-key}}","host":["{{host}}"],"path":["{{project-key}}","customers","key={{customer-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Customer by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/key={{customer-key}}","host":["{{host}}"],"path":["{{project-key}}","customers","key={{customer-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{customer-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Customer by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Customer exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[]},"description":"Checks if a Customer exists with the provided `id`. Returns a `200` status if the Customer exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Customer by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Customer by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{customer-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Search Customers","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/search","host":["{{host}}"],"path":["{{project-key}}","customers","search"],"query":[]},"description":"If the initial indexing is in progress or the feature is inactive, a [SearchNotReady](ctp:api:type:SearchNotReadyError) error is returned.\nIf inactive, you can [reactivate](/../api/projects/customer-search#reactivate) it.\n","body":{"mode":"raw","raw":"{\n  \"query\" : {\n    \"fullText\" : {\n      \"field\" : \"all\",\n      \"value\" : \"john\"\n    }\n  }\n}"}},"response":[]},{"name":"Check if Customer Search index exists","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/search","host":["{{host}}"],"path":["{{project-key}}","customers","search"],"query":[]},"description":"Checks whether a search index of Customers exists for a Project.\nReturns a `200 OK` if an index exists; otherwise, returns a `409 Conflict`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get indexing status of Customer Search","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"indexing-statu-id\", data.results[0].id); ","    pm.environment.set(\"indexing-statu-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"indexing-statu-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"indexing-statu-version\", data.version);","}","if(data.id){","    pm.environment.set(\"indexing-statu-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"indexing-statu-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/search/indexing-status","host":["{{host}}"],"path":["{{project-key}}","customers","search","indexing-status"],"query":[]},"description":"Returns the indexing status of the Customer Search for a Project.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Customers","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers","host":["{{host}}"],"path":["{{project-key}}","customers"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Customer exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers","host":["{{host}}"],"path":["{{project-key}}","customers"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Customers exist for the provided query predicate. Returns a `200` status if any Customers match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create (sign up) Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers","host":["{{host}}"],"path":["{{project-key}}","customers"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).\nSimilarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.\n\nCreating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message. Simultaneously creating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\",\n  \"firstName\" : \"John\",\n  \"lastName\" : \"Doe\",\n  \"password\" : \"secret123\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"AddBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"AddCustomerGroupAssignment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCustomerGroupAssignment\",\n            \"customerGroupAssignment\" : {\n              \"customerGroup\" : {\n                \"id\" : \"{{customer-group-id}}\",\n                \"typeId\" : \"customer-group\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"AddShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"AddStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"ChangeAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAddress\",\n            \"addressId\" : \"{{addressId}}\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"ChangeEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeEmail\",\n            \"email\" : \"email@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"RemoveAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"RemoveBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"RemoveCustomerGroupAssignment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeCustomerGroupAssignment\",\n            \"customerGroup\" : {\n              \"id\" : \"{{customer-group-id}}\",\n              \"typeId\" : \"customer-group\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"RemoveShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"RemoveStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\",\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetAuthenticationMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAuthenticationMode\",\n            \"authMode\" : \"ExternalAuth\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetCompanyName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCompanyName\",\n            \"companyName\" : \"Company Ltd.\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetCustomerGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerGroup\",\n            \"customerGroup\" : {\n              \"id\" : \"{{customer-group-id}}\",\n              \"typeId\" : \"customer-group\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetCustomerGroupAssignments","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerGroupAssignments\",\n            \"customerGroupAssignments\" : [ {\n              \"customerGroup\" : {\n                \"id\" : \"{{customer-group-id-1}}\",\n                \"typeId\" : \"customer-group\"\n              }\n            }, {\n              \"customerGroup\" : {\n                \"id\" : \"{{customer-group-id-2}}\",\n                \"typeId\" : \"customer-group\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetCustomerNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerNumber\",\n            \"customerNumber\" : \"123\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetDateOfBirth","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDateOfBirth\",\n            \"dateOfBirth\" : \"2015-10-21\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetDefaultBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultBillingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetDefaultShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultShippingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetExternalId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setExternalId\",\n            \"externalId\" : \"123\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetFirstName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setFirstName\",\n            \"firstName\" : \"John\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"newKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetLastName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLastName\",\n            \"lastName\" : \"Person\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetMiddleName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMiddleName\",\n            \"middleName\" : \"middleName\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetSalutation","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSalutation\",\n            \"salutation\" : \"Mr\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetStores","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStores\",\n            \"stores\" : [ {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetTitle","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTitle\",\n            \"title\" : \"Dr\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]},{"name":"SetVatId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setVatId\",\n            \"vatId\" : \"vatId\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error."},"response":[]}]}]},{"name":"Customer-groups","description":"customer-groups are used to evaluate products and channels.","item":[{"name":"Get CustomerGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/key={{customer-group-key}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","key={{customer-group-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CustomerGroup exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/key={{customer-group-key}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","key={{customer-group-key}}"],"query":[]},"description":"Checks if a CustomerGroup exists with the provided `key`. Returns a `200` status if the CustomerGroup exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update CustomerGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/key={{customer-group-key}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","key={{customer-group-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"New Name\"\n  } ]\n}"}},"response":[]},{"name":"Delete CustomerGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/key={{customer-group-key}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","key={{customer-group-key}}"],"query":[{"key":"version","value":"{{customer-group-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get CustomerGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/{{customer-group-id}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","{{customer-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CustomerGroup exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/{{customer-group-id}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","{{customer-group-id}}"],"query":[]},"description":"Checks if a CustomerGroup exists with the provided `id`. Returns a `200` status if the CustomerGroup exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update CustomerGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/{{customer-group-id}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","{{customer-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"New Name\"\n  } ]\n}"}},"response":[]},{"name":"Delete CustomerGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/{{customer-group-id}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","{{customer-group-id}}"],"query":[{"key":"version","value":"{{customer-group-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query CustomerGroups","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups","host":["{{host}}"],"path":["{{project-key}}","customer-groups"],"query":[{"key":"where","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CustomerGroup exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups","host":["{{host}}"],"path":["{{project-key}}","customer-groups"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more CustomerGroups exist for the provided query predicate. Returns a `200` status if any CustomerGroup match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create CustomerGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups","host":["{{host}}"],"path":["{{project-key}}","customer-groups"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"groupName\" : \"Webshop user\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"New Name\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/{{customer-group-id}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","{{customer-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CustomerGroups"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/{{customer-group-id}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","{{customer-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CustomerGroups"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/{{customer-group-id}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","{{customer-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CustomerGroups"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-group-id\", data.results[0].id); ","    pm.environment.set(\"customer-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"newKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/customer-groups/{{customer-group-id}}","host":["{{host}}"],"path":["{{project-key}}","customer-groups","{{customer-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post CustomerGroups"},"response":[]}]}]},{"name":"Custom-objects","description":"Store custom JSON values.","item":[{"name":"Get CustomObject by Container and Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"custom-object-id\", data.results[0].id); ","    pm.environment.set(\"custom-object-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"custom-object-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"custom-object-version\", data.version);","}","if(data.id){","    pm.environment.set(\"custom-object-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"custom-object-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/custom-objects/{{container}}/{{custom-object-key}}","host":["{{host}}"],"path":["{{project-key}}","custom-objects","{{container}}","{{custom-object-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Delete CustomObject by Container and Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"custom-object-id\", data.results[0].id); ","    pm.environment.set(\"custom-object-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"custom-object-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"custom-object-version\", data.version);","}","if(data.id){","    pm.environment.set(\"custom-object-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"custom-object-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/custom-objects/{{container}}/{{custom-object-key}}","host":["{{host}}"],"path":["{{project-key}}","custom-objects","{{container}}","{{custom-object-key}}"],"query":[{"key":"version","value":"{{custom-object-version}}","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query CustomObjects","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"custom-object-id\", data.results[0].id); ","    pm.environment.set(\"custom-object-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"custom-object-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"custom-object-version\", data.version);","}","if(data.id){","    pm.environment.set(\"custom-object-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"custom-object-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/custom-objects/{{container}}","host":["{{host}}"],"path":["{{project-key}}","custom-objects","{{container}}"],"query":[{"key":"sort","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CustomObject exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"custom-object-id\", data.results[0].id); ","    pm.environment.set(\"custom-object-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"custom-object-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"custom-object-version\", data.version);","}","if(data.id){","    pm.environment.set(\"custom-object-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"custom-object-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/custom-objects","host":["{{host}}"],"path":["{{project-key}}","custom-objects"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more CustomObjects exist for the provided query predicate. Returns a `200` status if any CustomObjects match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create or update CustomObject","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"custom-object-id\", data.results[0].id); ","    pm.environment.set(\"custom-object-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"custom-object-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"custom-object-version\", data.version);","}","if(data.id){","    pm.environment.set(\"custom-object-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"custom-object-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/custom-objects","host":["{{host}}"],"path":["{{project-key}}","custom-objects"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If an object with the given container/key exists, the object will be replaced with the new value and the version is incremented.\nIf the request contains a version and an object with the given container/key, then the version must match the version of the existing object. Concurrent updates to the same Custom Object returns a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error even if the version is not provided.\n\nFields within `value` that have `null` values **are not saved**.\n","body":{"mode":"raw","raw":"{\n  \"container\" : \"test-container\",\n  \"key\" : \"test-key\",\n  \"value\" : \"test-value\"\n}"}},"response":[]}]},{"name":"Discount-codes","description":"Discount Codes can be added to a discount-code to enable certain discount-code discounts.","item":[{"name":"Get DiscountCode by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if DiscountCode exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[]},"description":"Checks if a DiscountCode exists with the provided `id`. Returns a `200` status if the DiscountCode exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update DiscountCode by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setMaxApplicationsPerCustomer\",\n    \"maxApplicationsPerCustomer\" : 5\n  } ]\n}"}},"response":[]},{"name":"Delete DiscountCode by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{discount-code-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting a Discount Code produces the [DiscountCodeDeleted](ctp:api:type:DiscountCodeDeletedMessage) Message.\n\nDeprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get DiscountCode by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/key={{discount-code-key}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","key={{discount-code-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if DiscountCode exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/key={{discount-code-key}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","key={{discount-code-key}}"],"query":[]},"description":"Checks if a DiscountCode exists with the provided `key`. Returns a `200` status if the DiscountCode exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update DiscountCode by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/key={{discount-code-key}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","key={{discount-code-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setMaxApplicationsPerCustomer\",\n    \"maxApplicationsPerCustomer\" : 5\n  } ]\n}"}},"response":[]},{"name":"Delete DiscountCode by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/key={{discount-code-key}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","key={{discount-code-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{discount-code-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting a Discount Code produces the [DiscountCodeDeleted](ctp:api:type:DiscountCodeDeletedMessage) Message.\n\nDeprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query DiscountCodes","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes","host":["{{host}}"],"path":["{{project-key}}","discount-codes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if DiscountCode exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes","host":["{{host}}"],"path":["{{project-key}}","discount-codes"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more DiscountCodes exist for the provided query predicate. Returns a `200` status if any DiscountCodes match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create DiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes","host":["{{host}}"],"path":["{{project-key}}","discount-codes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creating a Discount Code produces the [DiscountCodeCreated](ctp:api:type:DiscountCodeCreatedMessage) Message.\n\nDeprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"save10_code\",\n  \"name\" : {\n    \"en\" : \"Save10\"\n  },\n  \"description\" : {\n    \"en\" : \"Save 10% using this code\"\n  },\n  \"code\" : \"SAVE10\",\n  \"cartDiscounts\" : [ {\n    \"typeId\" : \"cart-discount\",\n    \"id\" : \"{{cart-discount-id}}\"\n  } ],\n  \"cartPredicate\" : \"customer.email = \\\"john.doe@example.com\\\" and customer.customerGroup.id = \\\"{{customer-group-id}}\\\"\",\n  \"isActive\" : true,\n  \"maxApplications\" : 100,\n  \"maxApplicationsPerCustomer\" : 2,\n  \"groups\" : [ \"new customers\" ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeCartDiscounts","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCartDiscounts\",\n            \"cartDiscounts\" : [ {\n              \"typeId\" : \"cart-discount\",\n              \"id\" : \"{{cartDiscountId}}\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"ChangeGroups","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeGroups\",\n            \"groups\" : [ \"groupString\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"ChangeIsActive","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeIsActive\",\n            \"isActive\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetCartPredicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCartPredicate\",\n            \"cartPredicate\" : \"lineItemCount(sku = \"mySKU\") > 1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"en\" : \"New description\",\n              \"de\" : \"Neue Beschreibung\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetMaxApplications","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMaxApplications\",\n            \"maxApplications\" : 150\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetMaxApplicationsPerCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMaxApplicationsPerCustomer\",\n            \"maxApplicationsPerCustomer\" : 10\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : {\n              \"en\" : \"New name\",\n              \"de\" : \"Neuer Name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetValidFrom","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidFrom\",\n            \"validFrom\" : \"2025-10-12T14:00:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetValidFromAndUntil","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidFromAndUntil\",\n            \"validFrom\" : \"2025-10-12T14:00:00.000Z\",\n            \"validUntil\" : \"2025-11-12T14:05:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]},{"name":"SetValidUntil","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-code-id\", data.results[0].id); ","    pm.environment.set(\"discount-code-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-code-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-code-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-code-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-code-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-code-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidUntil\",\n            \"validUntil\" : \"2025-11-12T14:00:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-codes/{{discount-code-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-codes","{{discount-code-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`"},"response":[]}]}]},{"name":"Discount-groups","description":"Discount groups are used to group the discounts that are applied to a cart or an order.","item":[{"name":"Get DiscountGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/key={{discount-group-key}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","key={{discount-group-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a DiscountGroup with the provided `key`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if DiscountGroup exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/key={{discount-group-key}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","key={{discount-group-key}}"],"query":[]},"description":"Checks if a DiscountGroup exists with the provided `key`.\nReturns a `200` status if a DiscountGroup exists, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update DiscountGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/key={{discount-group-key}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","key={{discount-group-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a DiscountGroup in the Project using one or more [update actions](/../api/projects/discount-groups#update-actions).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"my-new-discount-group-key\"\n  } ]\n}"}},"response":[]},{"name":"Delete DiscountGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/key={{discount-group-key}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","key={{discount-group-key}}"],"query":[{"key":"version","value":"{{discount-group-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a DiscountGroup in the Project.\nThis request generates the [DiscountGroupDeleted](ctp:api:type:DiscountGroupDeletedMessage) Message.\n\nIf the DiscountGroup is referenced by a CartDiscount, a [ReferenceExists](ctp:api:type:ReferenceExistsError) error is returned.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get DiscountGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/{{discount-group-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","{{discount-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a DiscountGroup with the provided `id`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if DiscountGroup exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/{{discount-group-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","{{discount-group-id}}"],"query":[]},"description":"Checks if a DiscountGroup exists with the provided `id`.\nReturns a `200` status if a DiscountGroup exists, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update DiscountGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/{{discount-group-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","{{discount-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a DiscountGroup in the Project using one or more [update actions](/../api/projects/discount-groups#update-actions).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"my-new-discount-group-key\"\n  } ]\n}"}},"response":[]},{"name":"Delete DiscountGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/{{discount-group-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","{{discount-group-id}}"],"query":[{"key":"version","value":"{{discount-group-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a DiscountGroup in the Project.\nThis request generates the [DiscountGroupDeleted](ctp:api:type:DiscountGroupDeletedMessage) Message.\n\nIf the DiscountGroup is referenced by a CartDiscount, a [ReferenceExists](ctp:api:type:ReferenceExistsError) error is returned.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query DiscountGroups","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups","host":["{{host}}"],"path":["{{project-key}}","discount-groups"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves all DiscountGroups in the Project.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if DiscountGroup exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups","host":["{{host}}"],"path":["{{project-key}}","discount-groups"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more DiscountGroups exist for the provided query predicate.\nReturns a `200` status if any DiscountGroups match the query predicate, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create DiscountGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups","host":["{{host}}"],"path":["{{project-key}}","discount-groups"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a DiscountGroup in the Project.\nThis request generates the [DiscountGroupCreated](ctp:api:type:DiscountGroupCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"black-friday-sale\",\n  \"name\" : {\n    \"en\" : \"Black Friday Sale\"\n  },\n  \"description\" : {\n    \"en\" : \"10% discount on all items in cart\"\n  },\n  \"sortOrder\" : \"0.01\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"en\" : \"New description\",\n              \"de\" : \"Neue Beschreibung\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/{{discount-group-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","{{discount-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a DiscountGroup in the Project using one or more [update actions](/../api/projects/discount-groups#update-actions).\n"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/{{discount-group-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","{{discount-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a DiscountGroup in the Project using one or more [update actions](/../api/projects/discount-groups#update-actions).\n"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : {\n              \"en\" : \"New name\",\n              \"de\" : \"Neuer Name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/{{discount-group-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","{{discount-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a DiscountGroup in the Project using one or more [update actions](/../api/projects/discount-groups#update-actions).\n"},"response":[]},{"name":"SetSortOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"discount-group-id\", data.results[0].id); ","    pm.environment.set(\"discount-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"discount-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"discount-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"discount-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"discount-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{discount-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSortOrder\",\n            \"sortOrder\" : \"0.2\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/discount-groups/{{discount-group-id}}","host":["{{host}}"],"path":["{{project-key}}","discount-groups","{{discount-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a DiscountGroup in the Project using one or more [update actions](/../api/projects/discount-groups#update-actions).\n"},"response":[]}]}]},{"name":"GraphQL","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"graphql-id\", data.results[0].id); ","    pm.environment.set(\"graphql-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"graphql-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"graphql-version\", data.version);","}","if(data.id){","    pm.environment.set(\"graphql-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"graphql-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/graphql","host":["{{host}}"],"path":["{{project-key}}","graphql"],"query":[]},"description":"Execute a GraphQL request.","body":{"mode":"raw","raw":"{\n  \"query\" : \"query getProductByKey($productKey: String!) {  product(key: $productKey) { id version }}\",\n  \"operationName\" : \"getProductByKey\",\n  \"variables\" : {\n    \"productKey\" : \"a-product-key\"\n  }\n}"}},"response":[]},{"name":"Inventory","description":"Inventory allows you to track stock quantities.","item":[{"name":"Get InventoryEntry by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if InventoryEntry exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[]},"description":"Checks if an InventoryEntry exists with the provided `id`. Returns a `200` status if the InventoryEntry exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update InventoryEntry by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addQuantity\",\n    \"quantity\" : 4\n  } ]\n}"}},"response":[]},{"name":"Delete InventoryEntry by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"version","value":"{{inventory-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get InventoryEntry by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/key={{inventory-key}}","host":["{{host}}"],"path":["{{project-key}}","inventory","key={{inventory-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if InventoryEntry exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/key={{inventory-key}}","host":["{{host}}"],"path":["{{project-key}}","inventory","key={{inventory-key}}"],"query":[]},"description":"Checks if an InventoryEntry exists with the provided `key`. Returns a `200` status if the InventoryEntry exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update InventoryEntry by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/key={{inventory-key}}","host":["{{host}}"],"path":["{{project-key}}","inventory","key={{inventory-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addQuantity\",\n    \"quantity\" : 4\n  } ]\n}"}},"response":[]},{"name":"Delete InventoryEntry by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/key={{inventory-key}}","host":["{{host}}"],"path":["{{project-key}}","inventory","key={{inventory-key}}"],"query":[{"key":"version","value":"{{inventory-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query InventoryEntries","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory","host":["{{host}}"],"path":["{{project-key}}","inventory"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if InventoryEntry exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory","host":["{{host}}"],"path":["{{project-key}}","inventory"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more InventoryEntries exist for the provided query predicate. Returns a `200` status if any Inventory Entries match the Query Predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create InventoryEntry","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory","host":["{{host}}"],"path":["{{project-key}}","inventory"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Produces the [InventoryEntryCreated](ctp:api:type:InventoryEntryCreatedMessage) Message.","body":{"mode":"raw","raw":"{\n  \"key\" : \"ie-key-1\",\n  \"sku\" : \"sku_GIRLS_CREW_variant1_1421832124541\",\n  \"quantityOnStock\" : 4\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addQuantity\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]},{"name":"ChangeQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeQuantity\",\n            \"quantity\" : 5\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]},{"name":"RemoveQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeQuantity\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]},{"name":"SetExpectedDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setExpectedDelivery\",\n            \"expectedDelivery\" : \"2015-10-21T14:00:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"ie-key-1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]},{"name":"SetRestockableInDays","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setRestockableInDays\",\n            \"restockableInDays\" : 7\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]},{"name":"SetSupplyChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"inventory-id\", data.results[0].id); ","    pm.environment.set(\"inventory-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"inventory-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"inventory-version\", data.version);","}","if(data.id){","    pm.environment.set(\"inventory-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"inventory-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{inventory-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSupplyChannel\",\n            \"supplyChannel\" : {\n              \"id\" : \"{{supplyChannelId}}\",\n              \"typeId\" : \"channel\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/inventory/{{inventory-id}}","host":["{{host}}"],"path":["{{project-key}}","inventory","{{inventory-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Inventory"},"response":[]}]}]},{"name":"Authenticate (sign in) Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"login-id\", data.results[0].id); ","    pm.environment.set(\"login-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"login-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"login-version\", data.version);","}","if(data.id){","    pm.environment.set(\"login-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"login-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/login","host":["{{host}}"],"path":["{{project-key}}","login"],"query":[]},"description":"Authenticates a global Customer not associated with a Store.\nFor more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).\nIf the Customer is registered in a Store, use the [Authenticate (sign in) Customer in Store](ctp:api:endpoint:/{projectKey}/in-store/key={storeKey}/login:POST) method.\n\nTriggers [Cart merge during sign-in](/../api/customers-overview#cart-merge-during-sign-in).\n\nA Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#update-a-cart) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).\n\nIf an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\",\n  \"password\" : \"secret123\",\n  \"anonymousCart\" : {\n    \"id\" : \"{{cart-id}}\",\n    \"typeId\" : \"cart\"\n  }\n}"}},"response":[]},{"name":"Messages","description":"A message represents a change or an action performed on a resource (like an Order or a Product).","item":[{"name":"Get Message by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"message-id\", data.results[0].id); ","    pm.environment.set(\"message-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"message-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"message-version\", data.version);","}","if(data.id){","    pm.environment.set(\"message-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"message-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/messages/{{message-id}}","host":["{{host}}"],"path":["{{project-key}}","messages","{{message-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Message exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"message-id\", data.results[0].id); ","    pm.environment.set(\"message-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"message-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"message-version\", data.version);","}","if(data.id){","    pm.environment.set(\"message-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"message-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/messages/{{message-id}}","host":["{{host}}"],"path":["{{project-key}}","messages","{{message-id}}"],"query":[]},"description":"Checks if a Message exists with the provided `id`. Returns a `200` status if the Message exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Messages","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"message-id\", data.results[0].id); ","    pm.environment.set(\"message-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"message-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"message-version\", data.version);","}","if(data.id){","    pm.environment.set(\"message-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"message-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/messages","host":["{{host}}"],"path":["{{project-key}}","messages"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Message exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"message-id\", data.results[0].id); ","    pm.environment.set(\"message-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"message-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"message-version\", data.version);","}","if(data.id){","    pm.environment.set(\"message-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"message-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/messages","host":["{{host}}"],"path":["{{project-key}}","messages"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Messages exist for the provided query predicate. Returns a `200` status if any Messages match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]}]},{"name":"Orders","description":"An order can be created from a order, usually after a checkout process has been completed.","item":[{"name":"Create Order by Import","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"import-id\", data.results[0].id); ","    pm.environment.set(\"import-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"import-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"import-version\", data.version);","}","if(data.id){","    pm.environment.set(\"import-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"import-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/import","host":["{{host}}"],"path":["{{project-key}}","orders","import"],"query":[]},"description":"Creates an Order without needing to create a Cart first.\nImporting an Order produces the [Order Imported](ctp:api:type:OrderImportedMessage) Message.\n\nSpecific Error Codes:\n\n- [OutOfStock](ctp:api:type:OutOfStockError)\n- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)\n","body":{"mode":"raw","raw":"{\n  \"orderNumber\" : \"100000001\",\n  \"totalPrice\" : {\n    \"centAmount\" : 4200,\n    \"currencyCode\" : \"EUR\"\n  },\n  \"lineItems\" : [ ],\n  \"customLineItems\" : [ {\n    \"name\" : {\n      \"en\" : \"Name EN\",\n      \"de\" : \"Name DE\"\n    },\n    \"quantity\" : 1,\n    \"money\" : {\n      \"currencyCode\" : \"EUR\",\n      \"centAmount\" : 4200\n    },\n    \"slug\" : \"mySlug\"\n  } ]\n}"}},"response":[]},{"name":"Create Order from Quote","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/quotes","host":["{{host}}"],"path":["{{project-key}}","orders","quotes"],"query":[]},"description":"\nCreates an Order from a Quote. The referenced Quote must have the `Pending` [state](ctp:api:type:QuoteState) and must be valid (not past the `validTo` date); otherwise, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.\n\nProduces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.\n\nSpecific Error Codes:\n\n- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [InvalidOperation](ctp:api:type:InvalidOperationError)\n- [OutOfStock](ctp:api:type:OutOfStockError)\n","body":{"mode":"raw","raw":"{\n  \"quote\" : {\n    \"id\" : \"40d04a85-34d3-4769-a1b6-ecd00db2a587\",\n    \"typeId\" : \"quote\"\n  },\n  \"version\" : 1\n}"}},"response":[]},{"name":"Get Order by OrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","orders","order-number={{order-number}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an Order with the provided `orderNumber`.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Order exists by OrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","orders","order-number={{order-number}}"],"query":[]},"description":"Checks if an Order exists with the provided `orderNumber`. Returns a `200` status if the Order exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Order by OrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","orders","order-number={{order-number}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeOrderState\",\n    \"orderState\" : \"Complete\"\n  } ]\n}"}},"response":[]},{"name":"Delete Order by OrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","orders","order-number={{order-number}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{order-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes an Order in the Project.\nDeleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Edits","description":"OrderEdit are containers for financial changes after an Order has been placed.","item":[{"name":"Get OrderEdit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/key={{edit-key}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","key={{edit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an OrderEdit with the provided `key`.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if OrderEdit exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/key={{edit-key}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","key={{edit-key}}"],"query":[]},"description":"Checks if an OrderEdit exists with the provided `key`. Returns a `200` status if the OrderEdit exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update OrderEdit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/key={{edit-key}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","key={{edit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 7,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"another-key\"\n  }, {\n    \"action\" : \"addStagedAction\",\n    \"stagedAction\" : {\n      \"action\" : \"setCountry\",\n      \"country\" : \"ES\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete OrderEdit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/key={{edit-key}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","key={{edit-key}}"],"query":[{"key":"version","value":"{{edit-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes an OrderEdit in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Apply order edit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"apply-id\", data.results[0].id); ","    pm.environment.set(\"apply-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"apply-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"apply-version\", data.version);","}","if(data.id){","    pm.environment.set(\"apply-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"apply-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}/apply","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}","apply"],"query":[]},"description":"Applying an OrderEdit produces the [OrderEditApplied](ctp:api:type:OrderEditAppliedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get OrderEdit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an OrderEdit with the provided `id`.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if OrderEdit exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[]},"description":"Checks if an OrderEdit exists with the provided `id`. Returns a `200` status if the OrderEdit exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update OrderEdit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 7,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"another-key\"\n  }, {\n    \"action\" : \"addStagedAction\",\n    \"stagedAction\" : {\n      \"action\" : \"setCountry\",\n      \"country\" : \"ES\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete OrderEdit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"version","value":"{{edit-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes an OrderEdit in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query OrderEdits","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits","host":["{{host}}"],"path":["{{project-key}}","orders","edits"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves OrderEdits in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if OrderEdit exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits","host":["{{host}}"],"path":["{{project-key}}","orders","edits"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more OrderEdits exist for the provided query predicate. Returns a `200` status if any OrderEdits match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create OrderEdit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits","host":["{{host}}"],"path":["{{project-key}}","orders","edits"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates an OrderEdit in the Project.\nYou can either create multiple Order Edits for an Order and apply them sequentially to an Order, or create multiple Order Edits parallelly (as alternatives to each other) and apply one of them to the Order.\n\nYou can only create an Order Edit if the [InventoryMode](/projects/carts#inventorymode) of the Order and its [LineItems](/projects/carts#lineitem) is `None`.\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"order-edit-key\",\n  \"resource\" : {\n    \"typeId\" : \"order\",\n    \"id\" : \"ed454f4e-c43a-485f-a86f-046c691b1363\"\n  },\n  \"stagedActions\" : [ {\n    \"action\" : \"setCustomerEmail\",\n    \"email\" : \"user@localhost\"\n  } ],\n  \"comment\" : \"sample-comment\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddStagedAction","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{edit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addStagedAction\",\n            \"stagedAction\" : {\n              \"action\" : \"setCountry\",\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions)."},"response":[]},{"name":"SetComment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{edit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setComment\",\n            \"comment\" : \"commentString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions)."},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{edit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions)."},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{edit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions)."},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{edit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"keyString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions)."},"response":[]},{"name":"SetStagedActions","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"edit-id\", data.results[0].id); ","    pm.environment.set(\"edit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"edit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"edit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"edit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"edit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{edit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStagedActions\",\n            \"stagedActions\" : [ {\n              \"action\" : \"setCountry\",\n              \"country\" : \"DE\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/edits/{{edit-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","edits","{{edit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions)."},"response":[]}]}]},{"name":"Get Order by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an Order with the provided `id`.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Order exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[]},"description":"Checks if an Order exists with the provided `id`. Returns a `200` status if the Order exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Order by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeOrderState\",\n    \"orderState\" : \"Complete\"\n  } ]\n}"}},"response":[]},{"name":"Delete Order by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{order-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes an Order in the Project.\nDeleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Search Orders","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/search","host":["{{host}}"],"path":["{{project-key}}","orders","search"],"query":[]},"description":"null","body":{"mode":"raw","raw":"{\n  \"query\" : {\n    \"and\" : [ {\n      \"fullText\" : {\n        \"field\" : \"customLineItems.name\",\n        \"language\" : \"en\",\n        \"value\" : \"banana\"\n      }\n    }, {\n      \"filter\" : [ {\n        \"exact\" : {\n          \"field\" : \"store.name\",\n          \"language\" : \"en\",\n          \"value\" : \"fruit_store\"\n        }\n      } ]\n    } ]\n  },\n  \"sort\" : [ {\n    \"field\" : \"customLineItems.name\",\n    \"language\" : \"en\",\n    \"order\" : \"desc\"\n  } ],\n  \"limit\" : 50,\n  \"offset\" : 0\n}"}},"response":[]},{"name":"head ByProjectKeyOrdersSearch","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/search","host":["{{host}}"],"path":["{{project-key}}","orders","search"],"query":[]},"description":"Checks whether a search index for the Project's Orders exists.\nReturns a `200` status if the index exists, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Orders","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Orders in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Order exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","orders"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Orders exist for the provided query predicate. Returns a `200` status if any Orders match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Order","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates an Order from a Cart.\n\nThe Cart must have a shipping address and an active Shipping Method set.\n\nThe shipping address is used for tax calculation for a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode).\n\nCreating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message. If the Order is created from a Recurring Order schedule, the [OrderCreatedFromRecurringOrder](ctp:api:type:OrderCreatedFromRecurringOrderMessage) Message is generated.\n\nIf a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.\nIf you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.\n\nSpecific Error Codes:\n\n- [OutOfStock](ctp:api:type:OutOfStockError)\n- [PriceChanged](ctp:api:type:PriceChangedError)\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [InvalidOperation](ctp:api:type:InvalidOperationError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"cart\" : {\n    \"id\" : \"7c2e2694-aefe-43d7-888e-6a99514caaca\",\n    \"typeId\" : \"cart\"\n  },\n  \"version\" : 10\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDelivery\",\n            \"items\" : [ {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 1\n            } ],\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            },\n            \"parcels\" : [ {\n              \"measurements\" : {\n                \"heightInMillimeter\" : 11,\n                \"widthInMillimeter\" : 11\n              },\n              \"trackingData\" : {\n                \"trackingId\" : \"{{trackingId}}\",\n                \"carrier\" : \"TNT\",\n                \"provider\" : \"providerName\",\n                \"providerTransaction\" : \"{{transactionId}}\",\n                \"isReturn\" : false\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"AddItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"AddParcelToDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addParcelToDelivery\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"measurements\" : {\n              \"heightInMillimeter\" : 11,\n              \"widthInMillimeter\" : 11\n            },\n            \"trackingData\" : {\n              \"trackingId\" : \"{{trackingId}}\",\n              \"carrier\" : \"TNT\",\n              \"provider\" : \"providerName\",\n              \"providerTransaction\" : \"{{transactionId}}\",\n              \"isReturn\" : false\n            },\n            \"items\" : {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 2\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"AddPayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPayment\",\n            \"payment\" : {\n              \"typeId\" : \"payment\",\n              \"id\" : \"{{payment-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"AddReturnInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addReturnInfo\",\n            \"items\" : [ {\n              \"quantity\" : 1,\n              \"lineItemId\" : \"{{lineItemId}}\",\n              \"shipmentState\" : \"Returned\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"ChangeOrderState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeOrderState\",\n            \"orderState\" : \"Open\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"ChangePaymentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePaymentState\",\n            \"paymentState\" : \"Failed\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"ChangeShipmentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeShipmentState\",\n            \"shipmentState\" : \"Ready\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"ImportCustomLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"importCustomLineItemState\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"state\" : [ {\n              \"quantity\" : 6,\n              \"state\" : {\n                \"typeId\" : \"state\",\n                \"id\" : \"{{state-id}}\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"ImportLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"importLineItemState\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"state\" : [ {\n              \"quantity\" : 5,\n              \"state\" : {\n                \"typeId\" : \"state\",\n                \"id\" : \"{{state-id}}\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"RemoveDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDelivery\",\n            \"deliveryId\" : \"{{deliveryId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"RemoveItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeItemShippingAddress\",\n            \"addressKey\" : \"addressKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"RemoveParcelFromDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeParcelFromDelivery\",\n            \"parcelId\" : \"{{parcelId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"RemovePayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePayment\",\n            \"payment\" : {\n              \"typeId\" : \"payment\",\n              \"id\" : \"{{payment-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetBillingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetBillingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBusinessUnit\",\n            \"businessUnit\" : {\n              \"key\" : \"{{business-unit-key}}\",\n              \"typeId\" : \"business-unit\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetCustomLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomField\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetCustomLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomType\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetCustomLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemShippingDetails\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetCustomerEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"email\" : \"email@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetCustomerId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerId\",\n            \"customerId\" : \"{{customer-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetDeliveryAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddress\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetDeliveryAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddressCustomField\",\n            \"deliveryId\" : \"{{delivery-id}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetDeliveryAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddressCustomType\",\n            \"deliveryId\" : \"{{delivery-id}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetDeliveryCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryCustomField\",\n            \"deliveryId\" : \"exampleDeliveryID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetDeliveryCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryCustomType\",\n            \"deliveryId\" : \"exampleDeliveryID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetDeliveryItems","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryItems\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"items\" : [ {\n              \"id\" : \"{{itemId}}\",\n              \"quantity\" : 2\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetItemShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomField\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetItemShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomType\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemShippingDetails\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetOrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setOrderNumber\",\n            \"orderNumber\" : \"myOrderNumber\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetParcelCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelCustomField\",\n            \"parcelId\" : \"exampleParcelID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetParcelCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelCustomType\",\n            \"parcelId\" : \"exampleParcelID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetParcelItems","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelItems\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"items\" : [ {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 2\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetParcelMeasurements","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelMeasurements\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"measurements\" : {\n              \"heightInMillimeter\" : 11,\n              \"lengthInMillimeter\" : 11\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetParcelTrackingData","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelTrackingData\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"trackingData\" : {\n              \"trackingId\" : \"{{trackingId}}\",\n              \"carrier\" : \"TNT\",\n              \"provider\" : \"providerName\",\n              \"providerTransaction\" : \"{{transactionId}}\",\n              \"isReturn\" : false\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetPurchaseOrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPurchaseOrderNumber\",\n            \"purchaseOrderNumber\" : \"purchaseOrderNumberString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetReturnInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnInfo\",\n            \"items\" : [ {\n              \"items\" : [ {\n                \"quantity\" : 1,\n                \"lineItemId\" : \"{{lineItemId}}\",\n                \"comment\" : \"any comment\",\n                \"shipmentState\" : \"Returned\"\n              } ],\n              \"returnTrackingId\" : \"returnTrackingId-example\",\n              \"returnDate\" : \"2021-04-30T09:21:15.003Z\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetReturnItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnItemCustomField\",\n            \"returnItemId\" : \"exampleReturnItemID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetReturnItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnItemCustomType\",\n            \"returnItemId\" : \"exampleReturnItemID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetReturnPaymentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnPaymentState\",\n            \"returnItemId\" : \"{{returnItemId}}\",\n            \"paymentState\" : \"NotRefunded\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetReturnShipmentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnShipmentState\",\n            \"returnItemId\" : \"{{returnItemId}}\",\n            \"shipmentState\" : \"BackInStock\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetShippingCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomField\",\n            \"shippingKey\" : \"shipping-key-express\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetShippingCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomType\",\n            \"shippingKey\" : \"shipping-key-express\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"SetStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"TransitionCustomLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionCustomLineItemState\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"quantity\" : 6,\n            \"fromState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            },\n            \"toState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"TransitionLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionLineItemState\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 3,\n            \"fromState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            },\n            \"toState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"UpdateItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]},{"name":"UpdateSyncInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateSyncInfo\",\n            \"channel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions)."},"response":[]}]}]},{"name":"Payment-methods","description":"A PaymentMethod stores details about the method and the PSP","item":[{"name":"Get PaymentMethod by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/key={{payment-method-key}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","key={{payment-method-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a PaymentMethod with the provided `key`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if PaymentMethod exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/key={{payment-method-key}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","key={{payment-method-key}}"],"query":[]},"description":"Checks if a PaymentMethod exists with the provided `key`.\nReturns a `200` status if the PaymentMethod exists, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update PaymentMethod by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/key={{payment-method-key}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","key={{payment-method-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setPaymentMethodStatus\",\n    \"paymentMethodStatus\" : \"Active\"\n  } ]\n}"}},"response":[]},{"name":"Delete PaymentMethod by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/key={{payment-method-key}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","key={{payment-method-key}}"],"query":[{"key":"version","value":"{{payment-method-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a PaymentMethod in the Project.\nThis request generates the [PaymentMethodDeleted](ctp:api:type:PaymentMethodDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get PaymentMethod by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a PaymentMethod with the provided `id`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if PaymentMethod exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[]},"description":"Checks if a PaymentMethod exists with the provided `id`.\nReturns a `200` status if the PaymentMethod exists, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update PaymentMethod by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setPaymentMethodStatus\",\n    \"paymentMethodStatus\" : \"Active\"\n  } ]\n}"}},"response":[]},{"name":"Delete PaymentMethod by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"version","value":"{{payment-method-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a PaymentMethod in the Project.\nThis request generates the [PaymentMethodDeleted](ctp:api:type:PaymentMethodDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query PaymentMethods","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods","host":["{{host}}"],"path":["{{project-key}}","payment-methods"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves all PaymentMethods in the Project.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if PaymentMethod exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods","host":["{{host}}"],"path":["{{project-key}}","payment-methods"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more PaymentMethods exist for the provided query predicate.\nReturns a `200` status if any PaymentMethods match the query predicate, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create PaymentMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods","host":["{{host}}"],"path":["{{project-key}}","payment-methods"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a PaymentMethod in the Project.\nThis request generates the [PaymentMethodCreated](ctp:api:type:PaymentMethodCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"my-payment-method\",\n  \"customer\" : {\n    \"id\" : \"c7555392-a14c-48c8-9021-73d5d302b565\",\n    \"typeId\" : \"customer\"\n  },\n  \"businessUnit\" : {\n    \"key\" : \"my-bu\",\n    \"typeId\" : \"business-unit\"\n  },\n  \"token\" : {\n    \"value\" : \"PSPToken\"\n  },\n  \"method\" : \"Card\",\n  \"paymentInterface\" : \"Adyen\",\n  \"interfaceAccount\" : \"adyen-merchant-eu\",\n  \"default\" : true,\n  \"name\" : {\n    \"en\" : \"my custom localised name\"\n  },\n  \"paymentMethodStatus\" : \"Active\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]},{"name":"SetDefault","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefault\",\n            \"default\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]},{"name":"SetInterfaceAccount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setInterfaceAccount\",\n            \"interfaceAccount\" : \"newInterfaceAccount\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"payment-method-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]},{"name":"SetMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethod\",\n            \"method\" : \"newMethod\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : {\n              \"de\" : \"German name\",\n              \"en\" : \"English name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]},{"name":"SetPaymentInterface","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPaymentInterface\",\n            \"paymentInterface\" : \"newInterface\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]},{"name":"SetPaymentMethodStatus","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-method-id\", data.results[0].id); ","    pm.environment.set(\"payment-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPaymentMethodStatus\",\n            \"paymentMethodStatus\" : \"Active\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payment-methods/{{payment-method-id}}","host":["{{host}}"],"path":["{{project-key}}","payment-methods","{{payment-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).\n"},"response":[]}]}]},{"name":"Payments","description":"Payments hold information about the current state of receiving and/or refunding money","item":[{"name":"Get Payment by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/key={{payment-key}}","host":["{{host}}"],"path":["{{project-key}}","payments","key={{payment-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Payment with the provided `key`.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Payment exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/key={{payment-key}}","host":["{{host}}"],"path":["{{project-key}}","payments","key={{payment-key}}"],"query":[]},"description":"Checks if a Payment exists with the provided `key`. Returns a `200` status if the Payment exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Payment by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/key={{payment-key}}","host":["{{host}}"],"path":["{{project-key}}","payments","key={{payment-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"transitionState\",\n    \"state\" : {\n      \"typeId\" : \"state\",\n      \"id\" : \"18748fe6-7f77-456a-96c8-913b1e4bbc9c\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Payment by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/key={{payment-key}}","host":["{{host}}"],"path":["{{project-key}}","payments","key={{payment-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{payment-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a Payment in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Payment by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Payment with the provided `id`.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Payment exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[]},"description":"Checks if a Payment exists with the provided `id`. Returns a `200` status if the Payment exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Payment by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"transitionState\",\n    \"state\" : {\n      \"typeId\" : \"state\",\n      \"id\" : \"18748fe6-7f77-456a-96c8-913b1e4bbc9c\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Payment by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{payment-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a Payment in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Payments","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments","host":["{{host}}"],"path":["{{project-key}}","payments"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Payments in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Payment exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments","host":["{{host}}"],"path":["{{project-key}}","payments"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Payments exist for the provided query predicate. Returns a `200` status if any Payments match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Payment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments","host":["{{host}}"],"path":["{{project-key}}","payments"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a Payment in the Project.\nCreating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"123456\",\n  \"interfaceId\" : \"789011\",\n  \"amountPlanned\" : {\n    \"currencyCode\" : \"USD\",\n    \"centAmount\" : 1000\n  },\n  \"paymentMethodInfo\" : {\n    \"paymentInterface\" : \"STRIPE\",\n    \"method\" : \"CREDIT_CARD\",\n    \"name\" : {\n      \"en\" : \"Credit Card\"\n    }\n  },\n  \"transactions\" : [ {\n    \"timestamp\" : \"2015-10-20T08:54:24.000Z\",\n    \"type\" : \"Charge\",\n    \"amount\" : {\n      \"currencyCode\" : \"USD\",\n      \"centAmount\" : 1000\n    },\n    \"state\" : \"Pending\"\n  } ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddInterfaceInteraction","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addInterfaceInteraction\",\n            \"type\" : {\n              \"typeId\" : \"type\",\n              \"id\" : \"{{type-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"AddTransaction","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addTransaction\",\n            \"transaction\" : {\n              \"type\" : \"Authorization\",\n              \"amount\" : {\n                \"centAmount\" : 4000,\n                \"currencyCode\" : \"EUR\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"ChangeAmountPlanned","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAmountPlanned\",\n            \"amount\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"ChangeTransactionInteractionId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTransactionInteractionId\",\n            \"transactionId\" : \"{{transactionId}}\",\n            \"interactionId\" : \"{{newInteractionId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"ChangeTransactionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTransactionState\",\n            \"transactionId\" : \"{{transactionId}}\",\n            \"state\" : \"Failure\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"ChangeTransactionTimestamp","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTransactionTimestamp\",\n            \"transactionId\" : \"{{transactionId}}\",\n            \"timestamp\" : \"2018-10-12T14:00:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetAnonymousId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAnonymousId\",\n            \"anonymousId\" : \"anonymousId\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"{{customer-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetInterfaceId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setInterfaceId\",\n            \"interfaceId\" : \"InterfaceID\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"String\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetMethodInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfo\",\n            \"paymentInterface\" : \"STRIPE\",\n            \"method\" : \"CREDITCARD\",\n            \"name\" : {\n              \"en\" : \"Credit Card\",\n              \"de\" : \"Kreditkarte\"\n            },\n            \"token\" : {\n              \"value\" : \"sk_test_123456789\"\n            },\n            \"interfaceAccount\" : \"acct_1234567890\",\n            \"custom\" : {\n              \"type\" : {\n                \"id\" : \"{{type-id}}\",\n                \"typeId\" : \"type\"\n              },\n              \"fields\" : {\n                \"last4\" : 1234,\n                \"brand\" : \"VISA\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetMethodInfoCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoCustomField\",\n            \"name\" : \"last4\",\n            \"value\" : 4567\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetMethodInfoCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoCustomType\",\n            \"type\" : {\n              \"key\" : \"payment-method-info-cc-last4\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"last4\" : 1234\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetMethodInfoInterface","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoInterface\",\n            \"interface\" : \"MethodInfoInterfaceString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetMethodInfoInterfaceAccount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoInterfaceAccount\",\n            \"interfaceAccount\" : \"ADYEN-123\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetMethodInfoMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoMethod\",\n            \"method\" : \"MethodInfoMethodString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetMethodInfoName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoName\",\n            \"name\" : {\n              \"de\" : \"MethodInfoNameStringDE\",\n              \"en\" : \"MethodInfoNameStringEN\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetMethodInfoToken","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoToken\",\n            \"token\" : {\n              \"value\" : \"1234-5678-9010-1234\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetStatusInterfaceCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStatusInterfaceCode\",\n            \"interfaceCode\" : \"InterfaceCodeString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetStatusInterfaceText","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStatusInterfaceText\",\n            \"interfaceText\" : \"InterfaceTextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetTransactionCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTransactionCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\",\n            \"transactionId\" : \"transactionIdTest\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"SetTransactionCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTransactionCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"transactionId\" : \"transactionIdTest\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{paymentStateId}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions)."},"response":[]}]}]},{"name":"Products","description":"Products themselves are not sellable. Instead, they act as a parent structure for sellable Product Variants.\n","item":[{"name":"Query Product Selections for Product by Product Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/key={{product-key}}/product-selections","host":["{{host}}"],"path":["{{project-key}}","products","key={{product-key}}","product-selections"],"query":[{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Product by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/key={{product-key}}","host":["{{host}}"],"path":["{{project-key}}","products","key={{product-key}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Product exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/key={{product-key}}","host":["{{host}}"],"path":["{{project-key}}","products","key={{product-key}}"],"query":[]},"description":"Checks if a Product exists with the provided `key`. Returns a `200` status if the Product exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Product by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/key={{product-key}}","host":["{{host}}"],"path":["{{project-key}}","products","key={{product-key}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"A failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error.","body":{"mode":"raw","raw":"{\n  \"version\" : 2,\n  \"actions\" : [ {\n    \"action\" : \"setDescription\",\n    \"description\" : {\n      \"en\" : \"The best product ever!\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Product by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/key={{product-key}}","host":["{{host}}"],"path":["{{project-key}}","products","key={{product-key}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"version","value":"{{product-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\nProduces the [ProductDeleted](/projects/messages/product-catalog-messages#product-deleted) Message.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Upload Product image","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"image-id\", data.results[0].id); ","    pm.environment.set(\"image-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"image-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"image-version\", data.version);","}","if(data.id){","    pm.environment.set(\"image-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"image-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}/images","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}","images"],"query":[{"key":"filename","value":"","equals":true,"disabled":true},{"key":"variant","value":"","equals":true,"disabled":true},{"key":"sku","value":"","equals":true,"disabled":true},{"key":"staged","value":"","equals":true,"disabled":true}]},"description":"Uploads a JPEG, PNG, or a GIF image file to a [ProductVariant](ctp:api:type:ProductVariant).\nThe maximum file size of the image is **10MB**.\nEither `variant` or `sku` is required to update a specific ProductVariant.\nIf neither is provided, the image is uploaded to the Master Variant of the Product.\n\nThe response status code depends on the size of the original image.\nIf the image is small, the API responds with `200 OK`, and if the image is larger, it responds with `202 Accepted`.\nThe Product returned with a `202 Accepted` status code contains a `warnings` field with an [ImageProcessingOngoing](ctp:api:type:ImageProcessingOngoingWarning) Warning.\n\nProduces the [ProductImageAdded](/projects/messages/product-catalog-messages#product-image-added) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Product Selections for Product by Product ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}/product-selections","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}","product-selections"],"query":[{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Product by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Product exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[]},"description":"Checks if a Product exists with the provided `id`. Returns a `200` status if the Product exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Product by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error.","body":{"mode":"raw","raw":"{\n  \"version\" : 2,\n  \"actions\" : [ {\n    \"action\" : \"setDescription\",\n    \"description\" : {\n      \"en\" : \"The best product ever!\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Product by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"version","value":"{{product-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\nProduces the [ProductDeleted](/projects/messages/product-catalog-messages#product-deleted) Message.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Search Products","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/search","host":["{{host}}"],"path":["{{project-key}}","products","search"],"query":[]},"description":"If indexing is in progress or if Product Search is inactive, an [ObjectNotFound](ctp:api:type:ObjectNotFoundError) error is returned.\nIf inactive, you can [reactivate](/../api/projects/product-search#activate-the-product-search-api) it.\n","body":{"mode":"raw","raw":"{\n  \"query\" : {\n    \"and\" : [ {\n      \"fullText\" : {\n        \"field\" : \"name\",\n        \"language\" : \"en\",\n        \"value\" : \"banana\"\n      }\n    }, {\n      \"filter\" : [ {\n        \"exact\" : {\n          \"field\" : \"variants.attributes.farming\",\n          \"fieldType\" : \"text\",\n          \"value\" : \"organic\"\n        }\n      } ]\n    } ]\n  },\n  \"sort\" : [ {\n    \"field\" : \"name\",\n    \"language\" : \"en\",\n    \"order\" : \"desc\"\n  } ],\n  \"limit\" : 10,\n  \"offset\" : 0\n}"}},"response":[]},{"name":"Query Products","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products","host":["{{host}}"],"path":["{{project-key}}","products"],"query":[{"key":"where","value":"","equals":true,"disabled":true},{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Product exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products","host":["{{host}}"],"path":["{{project-key}}","products"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Products exist for the provided query predicate. Returns a `200` status if any Products match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Product","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products","host":["{{host}}"],"path":["{{project-key}}","products"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"To create a new Product, send a representation that is going to become the initial _staged_ and _current_ representation of the new Product in the catalog.\nIf [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, selected Prices will be added to the response.\nProduces the [ProductCreated](/projects/messages/product-catalog-messages#product-created) Message.\n","body":{"mode":"raw","raw":"{\n  \"productType\" : {\n    \"id\" : \"24f510c3-f334-4099-94e2-d6224a8eb919\",\n    \"typeId\" : \"product-type\"\n  },\n  \"categories\" : [ {\n    \"typeId\" : \"category\",\n    \"id\" : \"24f510c3-f334-4099-94e2-d6224a8eb919\"\n  } ],\n  \"name\" : {\n    \"en\" : \"Some Product\"\n  },\n  \"slug\" : {\n    \"en\" : \"product_slug_<random-uuid>\"\n  },\n  \"masterVariant\" : {\n    \"sku\" : \"SKU-1\",\n    \"prices\" : [ {\n      \"value\" : {\n        \"currencyCode\" : \"EUR\",\n        \"centAmount\" : 4200\n      }\n    } ],\n    \"images\" : [ {\n      \"url\" : \"http://my.custom.cdn.net/master.png\",\n      \"label\" : \"Master Image\",\n      \"dimensions\" : {\n        \"w\" : 303,\n        \"h\" : 197\n      }\n    } ]\n  },\n  \"variants\" : [ {\n    \"images\" : [ {\n      \"url\" : \"http://my.custom.cdn.net/variant.png\",\n      \"label\" : \"Variant Image\",\n      \"dimensions\" : {\n        \"w\" : 303,\n        \"h\" : 197\n      }\n    } ]\n  } ],\n  \"attributes\" : [ {\n    \"name\" : \"label\",\n    \"value\" : \"product-attribute\"\n  } ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAsset","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAsset\",\n            \"variantId\" : 1,\n            \"asset\" : {\n              \"sources\" : [ {\n                \"uri\" : \"//asset.mp4\"\n              } ],\n              \"name\" : {\n                \"de\" : \"FirstAssetDE\",\n                \"en\" : \"FirstassetEN\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"AddExternalImage","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addExternalImage\",\n            \"variantId\" : 1,\n            \"image\" : {\n              \"url\" : \"//myimage.jpg\",\n              \"dimensions\" : {\n                \"w\" : 1400,\n                \"h\" : 1400\n              },\n              \"label\" : \"myImage\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"AddPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPrice\",\n            \"variantId\" : 1,\n            \"price\" : {\n              \"value\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4000\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"AddToCategory","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addToCategory\",\n            \"category\" : {\n              \"typeId\" : \"category\",\n              \"id\" : \"{{category-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"AddVariant","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addVariant\",\n            \"key\" : \"VariantKey\",\n            \"sku\" : \"VariantSKU\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"ChangeAssetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssetName\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"name\" : {\n              \"de\" : \"Mein Asset\",\n              \"en\" : \"My asset\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"ChangeAssetOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssetOrder\",\n            \"variantId\" : 1,\n            \"assetOrder\" : [ \"{{assetId1}}\", \"{{assetId2}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"ChangeMasterVariant","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeMasterVariant\",\n            \"variantId\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"de\" : \"Mein neuer Produkt Name\",\n              \"en\" : \"My new product name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"ChangePrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePrice\",\n            \"priceId\" : \"{{priceId}}\",\n            \"price\" : {\n              \"value\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4000\n              }\n            },\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"ChangeSlug","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeSlug\",\n            \"slug\" : {\n              \"de\" : \"mein-neuer-produkt-slug\",\n              \"en\" : \"my-new-product-slug\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"LegacySetSku","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n                |{\n            \"action\": \"legacySetSku\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"MoveImageToPosition","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"moveImageToPosition\",\n            \"variantId\" : 1,\n            \"imageUrl\" : \"//myimage2.jpg\",\n            \"position\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"Publish","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"publish\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"RemoveAsset","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAsset\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"RemoveFromCategory","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeFromCategory\",\n            \"category\" : {\n              \"typeId\" : \"category\",\n              \"id\" : \"{{category-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"RemoveImage","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeImage\",\n            \"variantId\" : 1,\n            \"imageUrl\" : \"//myimage2.jpg\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"RemovePrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePrice\",\n            \"priceId\" : \"{{priceId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"RemoveVariant","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeVariant\",\n            \"id\" : 2\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"RevertStagedChanges","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"revertStagedChanges\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"RevertStagedVariantChanges","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"revertStagedVariantChanges\",\n            \"variantId\" : 2\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetAssetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetCustomField\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetAssetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetCustomType\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetAssetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetDescription\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"description\" : {\n              \"de\" : \"Dies ist eine Asset-Beschreibung\",\n              \"en\" : \"This is an asset description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetAssetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetKey\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"assetKey\" : \"assetKeyString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetAssetSources","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetSources\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"sources\" : [ {\n              \"uri\" : \"https://www.commercetools.de/ct-logo.svg\",\n              \"key\" : \"vector\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetAssetTags","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetTags\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"tags\" : [ \"commercetools\", \"awesome\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetAttribute","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAttribute\",\n            \"variantId\" : 1,\n            \"name\" : \"ExampleStringTypeAttribute\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetAttributeInAllVariants","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAttributeInAllVariants\",\n            \"name\" : \"ExampleStringTypeAttribute\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetCategoryOrderHint","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCategoryOrderHint\",\n            \"categoryId\" : \"{{category-id}}\",\n            \"orderHint\" : \"0.1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"de\" : \"Dies ist eine neue Produktbeschreibung\",\n              \"en\" : \"This is a new product description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetDiscountedPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDiscountedPrice\",\n            \"priceId\" : \"{{priceId}}\",\n            \"staged\" : true,\n            \"discounted\" : {\n              \"value\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4000\n              },\n              \"discount\" : {\n                \"typeId\" : \"product-discount\",\n                \"id\" : \"{{product-discount-id}}\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetImageLabel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setImageLabel\",\n            \"variantId\" : 2,\n            \"imageUrl\" : \"//image.png\",\n            \"label\" : \"labelString\",\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"DefaultKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetMetaDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaDescription\",\n            \"metaDescription\" : {\n              \"de\" : \"meine Meta Beschreibung\",\n              \"en\" : \"my metaDescription\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetMetaKeywords","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaKeywords\",\n            \"metaKeywords\" : {\n              \"de\" : \"mein MetaKeyword\",\n              \"en\" : \"my metaKeeyword\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetMetaTitle","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaTitle\",\n            \"metaTitle\" : {\n              \"de\" : \"mein MetaTitel\",\n              \"en\" : \"my metaTitle\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetPriceKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPriceKey\",\n            \"priceId\" : \"{{priceId}}\",\n            \"key\" : \"a-new-embedded-price-key\",\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetPriceMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPriceMode\",\n            \"priceMode\" : \"Standalone\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetPrices","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPrices\",\n            \"variantId\" : 1,\n            \"prices\" : [ {\n              \"value\" : {\n                \"currencyCode\" : \"USD\",\n                \"centAmount\" : 3100\n              }\n            }, {\n              \"value\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4000\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetProductAttribute","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setProductAttribute\",\n            \"name\" : \"ExampleStringTypeAttribute\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetProductPriceCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setProductPriceCustomField\",\n            \"priceId\" : \"{{priceId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetProductPriceCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setProductPriceCustomType\",\n            \"priceId\" : \"{{priceId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetProductVariantKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setProductVariantKey\",\n            \"variantId\" : 1,\n            \"key\" : \"keyString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetSearchKeywords","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSearchKeywords\",\n            \"searchKeywords\" : {\n              \"en\" : [ {\n                \"text\" : \"Super Keyword\"\n              }, {\n                \"text\" : \"What a keyword\",\n                \"suggestTokenizer\" : {\n                  \"type\" : \"whitespace\"\n                }\n              } ],\n              \"de\" : [ {\n                \"text\" : \"Ein super Schlüsselwort\",\n                \"suggestTokenizer\" : {\n                  \"type\" : \"custom\",\n                  \"inputs\" : [ \"wow wow wow\", \"super genial\", \"der Wahnsinn\" ]\n                }\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetSku","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSku\",\n            \"variantId\" : 1,\n            \"sku\" : \"SKU\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"SetTaxCategory","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTaxCategory\",\n            \"taxCategory\" : {\n              \"typeId\" : \"tax-category\",\n              \"id\" : \"{{tax-category-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]},{"name":"Unpublish","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-version}},\n    \"actions\": [\n        {\n            \"action\" : \"unpublish\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/products/{{product-id}}","host":["{{host}}"],"path":["{{project-key}}","products","{{product-id}}"],"query":[{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.\n\nA failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error."},"response":[]}]}]},{"name":"Product-discounts","description":"Product discounts are used to change certain product prices.","item":[{"name":"Get Matching ProductDiscount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-id\", data.results[0].id); ","    pm.environment.set(\"matching-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/matching","host":["{{host}}"],"path":["{{project-key}}","product-discounts","matching"],"query":[]},"description":"This endpoint can be used to simulate which Product Discounts would be applied if a specified Product Variant had a specified Price.\nGiven Product and Product Variant IDs and a Price, this endpoint will return the [ProductDiscount](ctp:api:type:ProductDiscount) that would have been applied to that Price.\n\nIf a Product Discount could not be found that could be applied to the Price of a Product Variant, a [NoMatchingProductDiscountFound](ctp:api:type:NoMatchingProductDiscountFoundError) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"productId\" : \"{{product-id}}\",\n  \"variantId\" : 1,\n  \"staged\" : false,\n  \"price\" : {\n    \"id\" : \"{{price-id}}\",\n    \"value\" : {\n      \"currencyCode\" : \"EUR\",\n      \"centAmount\" : 10000\n    },\n    \"country\" : \"DE\",\n    \"customerGroup\" : {\n      \"typeId\" : \"customer-group\",\n      \"id\" : \"{{customer-group-id}}\"\n    },\n    \"tiers\" : [ {\n      \"minimumQuantity\" : 10,\n      \"value\" : {\n        \"currencyCode\" : \"EUR\",\n        \"centAmount\" : 9000\n      }\n    } ]\n  }\n}"}},"response":[]},{"name":"Get ProductDiscount by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/key={{product-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","key={{product-discount-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductDiscount exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/key={{product-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","key={{product-discount-key}}"],"query":[]},"description":"Checks if a ProductDiscount exists with the provided `key`. Returns a `200` status if the ProductDiscount exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ProductDiscount by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/key={{product-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","key={{product-discount-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeValue\",\n    \"value\" : {\n      \"type\" : \"absolute\",\n      \"money\" : [ {\n        \"currencyCode\" : \"EUR\",\n        \"centAmount\" : 200\n      } ]\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ProductDiscount by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/key={{product-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","key={{product-discount-key}}"],"query":[{"key":"version","value":"{{product-discount-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ProductDiscount by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductDiscount exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[]},"description":"Checks if a ProductDiscount exists with the provided `id`. Returns a `200` status if the ProductDiscount exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ProductDiscount by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeValue\",\n    \"value\" : {\n      \"type\" : \"absolute\",\n      \"money\" : [ {\n        \"currencyCode\" : \"EUR\",\n        \"centAmount\" : 200\n      } ]\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ProductDiscount by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"version","value":"{{product-discount-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ProductDiscounts","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts","host":["{{host}}"],"path":["{{project-key}}","product-discounts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductDiscount exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts","host":["{{host}}"],"path":["{{project-key}}","product-discounts"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ProductDiscounts exist for the provided query predicate. Returns a `200` status if any ProductDiscounts match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ProductDiscount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts","host":["{{host}}"],"path":["{{project-key}}","product-discounts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"key\" : \"summer-sale\",\n  \"name\" : {\n    \"en\" : \"Summer Sale\"\n  },\n  \"description\" : {\n    \"en\" : \"1€ off all products\"\n  },\n  \"value\" : {\n    \"type\" : \"absolute\",\n    \"money\" : [ {\n      \"currencyCode\" : \"EUR\",\n      \"centAmount\" : 100\n    } ]\n  },\n  \"predicate\" : \"(product.id = \\\"{{product-id}}\\\" and variant.id = 1) or variant.key = \\\"{{product-variant-key}}\\\" or attributes.label = \\\"{{product-attribute-label}}\\\"\",\n  \"sortOrder\" : \"0.9534\",\n  \"isActive\" : true\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeIsActive","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeIsActive\",\n            \"isActive\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"de\" : \"Neuer Rabatt\",\n              \"en\" : \"New discount\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"ChangePredicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePredicate\",\n            \"predicate\" : \"product.id = \"{{product-id}}\"\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"ChangeSortOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeSortOrder\",\n            \"sortOrder\" : \"0.3\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"ChangeValue","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeValue\",\n            \"value\" : {\n              \"type\" : \"relative\",\n              \"permyriad\" : 2000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"de\" : \"Neue Beschreibung\",\n              \"en\" : \"New description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"SetValidFrom","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidFrom\",\n            \"validFrom\" : \"2025-10-12T14:05:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"SetValidFromAndUntil","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidFromAndUntil\",\n            \"validFrom\" : \"2025-10-12T14:00:00.000Z\",\n            \"validUntil\" : \"2025-11-12T14:05:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]},{"name":"SetValidUntil","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-discount-id\", data.results[0].id); ","    pm.environment.set(\"product-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-discount-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidUntil\",\n            \"validUntil\" : \"2025-11-12T14:05:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-discounts/{{product-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","product-discounts","{{product-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductDiscounts"},"response":[]}]}]},{"name":"Product-projections","description":"A projected representation of a product shows the product with its current or staged data. The current or staged\nrepresentation of a product in a catalog is called a product projection.\n","item":[{"name":"Product Projection Search with POST","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections/search","host":["{{host}}"],"path":["{{project-key}}","product-projections","search"],"query":[]},"description":"For implementing funnel search on Product Listing Pages where users select multiple filters, use this POST method.\nTo avoid URL length restrictions, this method passes the same query parameters as defined in the [GET](ctp:api:endpoint:/{projectKey}/product-projections/search:GET) method, within the request body in URL-encoded format.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Product Projection Search with GET","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"search-id\", data.results[0].id); ","    pm.environment.set(\"search-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"search-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"search-version\", data.version);","}","if(data.id){","    pm.environment.set(\"search-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"search-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections/search","host":["{{host}}"],"path":["{{project-key}}","product-projections","search"],"query":[{"key":"markMatchingVariants","value":"","equals":true,"disabled":true},{"key":"/text.[a-z]{2}(-[A-Z]{2})?/","value":"","equals":true,"disabled":true},{"key":"fuzzy","value":"","equals":true,"disabled":true},{"key":"fuzzyLevel","value":"","equals":true,"disabled":true},{"key":"filter.query","value":"","equals":true,"disabled":true},{"key":"filter","value":"","equals":true,"disabled":true},{"key":"facet","value":"","equals":true,"disabled":true},{"key":"filter.facets","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"staged","value":"","equals":true,"disabled":true},{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"localeProjection","value":"","equals":true,"disabled":true},{"key":"storeProjection","value":"","equals":true,"disabled":true}]},"description":"This method appends query parameters to the URL.\nThe maximum allowed URL length is 8192 characters.\nExceeding this limit will result in URL truncation, potentially leading to unexpected results.\nFor funnel searches on Product Listing Pages, where users select multiple filters, we recommend the [POST](ctp:api:endpoint:/{projectKey}/product-projections/search:POST) method which passes the query parameters within the request body, avoiding URL length restrictions.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Suggestions","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"suggest-id\", data.results[0].id); ","    pm.environment.set(\"suggest-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"suggest-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"suggest-version\", data.version);","}","if(data.id){","    pm.environment.set(\"suggest-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"suggest-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections/suggest","host":["{{host}}"],"path":["{{project-key}}","product-projections","suggest"],"query":[{"key":"/searchKeywords.[a-z]{2}(-[A-Z]{2})?/","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"fuzzy","value":"","equals":true,"disabled":true},{"key":"staged","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ProductProjection by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections/key={{product-projection-key}}","host":["{{host}}"],"path":["{{project-key}}","product-projections","key={{product-projection-key}}"],"query":[{"key":"staged","value":"","equals":true,"disabled":true},{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"localeProjection","value":"","equals":true,"disabled":true},{"key":"storeProjection","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Gets the current or staged representation of a [Product](ctp:api:type:Product) found by Key.\nWhen used with an API Client that has the `view_published_products:{projectKey}` scope,\nthis endpoint only returns published (current) Product Projections.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductProjection exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections/key={{product-projection-key}}","host":["{{host}}"],"path":["{{project-key}}","product-projections","key={{product-projection-key}}"],"query":[]},"description":"Checks if the current or staged representation of a Product exists with the provided `key`. Returns a `200` status if the ProductProjection exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ProductProjection by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections/{{product-projection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-projections","{{product-projection-id}}"],"query":[{"key":"staged","value":"","equals":true,"disabled":true},{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"localeProjection","value":"","equals":true,"disabled":true},{"key":"storeProjection","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID. When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductProjection exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections/{{product-projection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-projections","{{product-projection-id}}"],"query":[]},"description":"Checks if the current or staged representation of a Product exists with the provided `id`. Returns a `200` status if the ProductProjection exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ProductProjections","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections","host":["{{host}}"],"path":["{{project-key}}","product-projections"],"query":[{"key":"staged","value":"","equals":true,"disabled":true},{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"localeProjection","value":"","equals":true,"disabled":true},{"key":"storeProjection","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Use the Product Projections query endpoint to get the current or staged representations of Products.\nWhen used with an API Client that has the `view_published_products:{projectKey}` scope,\nthis endpoint only returns published (current) Product Projections.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductProjection exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-projections","host":["{{host}}"],"path":["{{project-key}}","product-projections"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if the current or staged representation of a Product exists for the provided query predicate. Returns a `200` status if any ProductProjections match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]}]},{"name":"Product-selections","description":"Manage individual Store assortments through Product Selections.\n\nAfter you have created Product Selections and populated them with Products,\nyou can manage Store assortments by assigning Product Selections to Stores.\nProduct Selections may be used by a single Store or shared across several Stores.\n\nAs a good practice, we recommend first creating Products in the project, and then creating Product Selection.\n","item":[{"name":"Query Products in ProductSelection by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/key={{product-selection-key}}/products","host":["{{host}}"],"path":["{{project-key}}","product-selections","key={{product-selection-key}}","products"],"query":[{"key":"where","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true}]},"description":"","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ProductSelection by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/key={{product-selection-key}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","key={{product-selection-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductSelection exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/key={{product-selection-key}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","key={{product-selection-key}}"],"query":[]},"description":"Checks if a ProductSelection exists with the provided `key`. Returns a `200` status if the ProductSelection exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ProductSelection by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/key={{product-selection-key}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","key={{product-selection-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"new selection name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ProductSelection by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/key={{product-selection-key}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","key={{product-selection-key}}"],"query":[{"key":"version","value":"{{product-selection-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletion will only succeed if the Product Selection is not assigned to any [Store](ctp:api:type:Store).","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Products in ProductSelection by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-id\", data.results[0].id); ","    pm.environment.set(\"product-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}/products","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}","products"],"query":[{"key":"where","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true}]},"description":"","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ProductSelection by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductSelection exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[]},"description":"Checks if a ProductSelection exists with the provided `id`. Returns a `200` status if the ProductSelection exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ProductSelection by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"new selection name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ProductSelection by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"version","value":"{{product-selection-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletion will only succeed if the Product Selection is not assigned to any [Store](ctp:api:type:Store).","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ProductSelections","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections","host":["{{host}}"],"path":["{{project-key}}","product-selections"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductSelection exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections","host":["{{host}}"],"path":["{{project-key}}","product-selections"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ProductSelections exist for the provided query predicate. Returns a `200` status if any ProductSelections match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ProductSelection","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections","host":["{{host}}"],"path":["{{project-key}}","product-selections"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"key\" : \"finest-selection\",\n  \"name\" : {\n    \"en\" : \"Finest Selection\"\n  }\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddProduct","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addProduct\",\n            \"product\" : {\n              \"typeId\" : \"product\",\n              \"key\" : \"millennium-falcon\"\n            },\n            \"variantSelection\" : {\n              \"type\" : \"includeOnly\",\n              \"skus\" : [ \"metallic-white\" ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"en\" : \"My Product Selection\",\n              \"de\" : \"Meine Product Selection\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]},{"name":"ExcludeProduct","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"excludeProduct\",\n            \"product\" : {\n              \"typeId\" : \"product\",\n              \"key\" : \"millennium-falcon\"\n            },\n            \"variantExclusion\" : {\n              \"skus\" : [ \"metallic-white\" ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]},{"name":"RemoveProduct","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeProduct\",\n            \"product\" : {\n              \"typeId\" : \"product\",\n              \"key\" : \"millennium-falcon\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"ProductSelectionKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]},{"name":"SetVariantExclusion","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setVariantExclusion\",\n            \"product\" : {\n              \"typeId\" : \"product\",\n              \"key\" : \"millennium-falcon\"\n            },\n            \"variantExclusion\" : {\n              \"skus\" : [ \"M0E20000000EH3V\", \"M0E20000000EH4Q\", \"M0E20000000EH5J\" ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]},{"name":"SetVariantSelection","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-selection-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setVariantSelection\",\n            \"product\" : {\n              \"typeId\" : \"product\",\n              \"key\" : \"millennium-falcon\"\n            },\n            \"variantSelection\" : {\n              \"type\" : \"includeOnly\",\n              \"skus\" : [ \"M0E20000000EH3V\" ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-selections/{{product-selection-id}}","host":["{{host}}"],"path":["{{project-key}}","product-selections","{{product-selection-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductSelections"},"response":[]}]}]},{"name":"Product-tailoring","description":"Product tailoring are used to contextualize product data for specific stores.","item":[{"name":"Get ProductTailoring by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/key={{product-tailoring-key}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","key={{product-tailoring-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ProductTailoring by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/key={{product-tailoring-key}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","key={{product-tailoring-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setDescription\",\n    \"description\" : {\n      \"en\" : \"A description\"\n    },\n    \"staged\" : true\n  } ]\n}"}},"response":[]},{"name":"Delete ProductTailoring by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/key={{product-tailoring-key}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","key={{product-tailoring-key}}"],"query":[{"key":"version","value":"{{product-tailoring-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ProductTailoring by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ProductTailoring by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setDescription\",\n    \"description\" : {\n      \"en\" : \"A description\"\n    },\n    \"staged\" : true\n  } ]\n}"}},"response":[]},{"name":"Delete ProductTailoring by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"version","value":"{{product-tailoring-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ProductTailoring","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","product-tailoring"],"query":[{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductTailoring exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","product-tailoring"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ProductTailorings exist for the provided query predicate. Returns a `200` status if any ProductTailoring match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ProductTailoring","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","product-tailoring"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Generates the [ProductTailoringCreated](ctp:api:type:ProductTailoringCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"product\" : {\n    \"typeId\" : \"product\",\n    \"id\" : \"daf720e5-9e8e-4300-98db-3a3219327db9\"\n  },\n  \"store\" : {\n    \"key\" : \"store-key\"\n  },\n  \"name\" : {\n    \"en\" : \"tailored name\"\n  },\n  \"metaTitle\" : {\n    \"en\" : \"tailored meta title\"\n  },\n  \"metaDescription\" : {\n    \"en\" : \"tailored meta description\"\n  },\n  \"metaKeywords\" : {\n    \"en\" : \"tailored meta keywords\"\n  },\n  \"slug\" : {\n    \"en\" : \"tailored-slug\"\n  },\n  \"description\" : {\n    \"en\" : \"tailored description\"\n  },\n  \"variants\" : [ {\n    \"id\" : 1,\n    \"images\" : [ {\n      \"url\" : \"//myimage.jpg\",\n      \"dimensions\" : {\n        \"w\" : 400,\n        \"h\" : 300\n      }\n    } ],\n    \"attributes\" : [ {\n      \"name\" : \"my-attribute\",\n      \"value\" : \"attribute-1\"\n    } ]\n  }, {\n    \"sku\" : \"sku-1\",\n    \"images\" : [ {\n      \"url\" : \"//myimage-2.png\",\n      \"dimensions\" : {\n        \"w\" : 400,\n        \"h\" : 300\n      }\n    } ],\n    \"attributes\" : [ {\n      \"name\" : \"my-attribute\",\n      \"value\" : \"attribute-2\"\n    } ]\n  } ],\n  \"attributes\" : [ {\n    \"name\" : \"label\",\n    \"value\" : \"product-attribute\"\n  } ],\n  \"publish\" : false\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAsset","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAsset\",\n            \"variantId\" : 1,\n            \"asset\" : {\n              \"sources\" : [ {\n                \"uri\" : \"//asset.mp4\"\n              } ],\n              \"name\" : {\n                \"de\" : \"FirstAssetDE\",\n                \"en\" : \"FirstassetEN\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"AddExternalImage","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addExternalImage\",\n            \"variantId\" : 1,\n            \"image\" : {\n              \"url\" : \"//myimage.jpg\",\n              \"dimensions\" : {\n                \"w\" : 1400,\n                \"h\" : 1400\n              },\n              \"label\" : \"myImage\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"AddVariant","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addVariant\",\n            \"id\" : 2,\n            \"sku\" : \"VariantSKU\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"ChangeAssetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssetName\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"name\" : {\n              \"de\" : \"Mein Asset\",\n              \"en\" : \"My asset\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"ChangeAssetOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssetOrder\",\n            \"variantId\" : 1,\n            \"assetOrder\" : [ \"{{assetId1}}\", \"{{assetId2}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"MoveImageToPosition","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"moveImageToPosition\",\n            \"variantId\" : 1,\n            \"imageUrl\" : \"//myimage2.jpg\",\n            \"position\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"Publish","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"publish\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"RemoveAsset","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAsset\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"RemoveImage","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeImage\",\n            \"variantId\" : 1,\n            \"imageUrl\" : \"//myimage2.jpg\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"RemoveVariant","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeVariant\",\n            \"id\" : 2\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetAssetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetCustomField\",\n            \"assetId\" : \"{{assetId}}\",\n            \"variantId\" : 1,\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetAssetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetCustomType\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetAssetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetDescription\",\n            \"assetId\" : \"{{assetId}}\",\n            \"variantId\" : 1,\n            \"description\" : {\n              \"de\" : \"Dies ist eine Asset-Beschreibung\",\n              \"en\" : \"This is an asset description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetAssetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetKey\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"assetKey\" : \"assetKeyString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetAssetSources","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetSources\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"sources\" : [ {\n              \"uri\" : \"https://www.commercetools.de/ct-logo.svg\",\n              \"key\" : \"vector\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetAssetTags","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssetTags\",\n            \"variantId\" : 1,\n            \"assetId\" : \"{{assetId}}\",\n            \"tags\" : [ \"commercetools\", \"awesome\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetAttribute","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAttribute\",\n            \"variantId\" : 1,\n            \"name\" : \"ExampleStringTypeAttribute\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetAttributeInAllVariants","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAttributeInAllVariants\",\n            \"name\" : \"ExampleStringTypeAttribute\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"en\" : \"A description\"\n            },\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetImageLabel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setImageLabel\",\n            \"variantId\" : 2,\n            \"imageUrl\" : \"//image.png\",\n            \"label\" : \"labelString\",\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetImages","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setImages\",\n            \"variantId\" : 1,\n            \"images\" : [ {\n              \"url\" : \"//myimage.jpg\",\n              \"dimensions\" : {\n                \"w\" : 100,\n                \"h\" : 100\n              }\n            }, {\n              \"url\" : \"//myimage2.jpg\",\n              \"dimensions\" : {\n                \"w\" : 100,\n                \"h\" : 100\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetMetaAttributes","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaAttributes\",\n            \"metaTitle\" : {\n              \"en\" : \"A Meta Title\"\n            },\n            \"metaDescription\" : {\n              \"en\" : \"A Meta Description\"\n            },\n            \"metaKeywords\" : {\n              \"en\" : \"Meta Keywords\"\n            },\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetMetaDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaDescription\",\n            \"metaDescription\" : {\n              \"en\" : \"A Meta Description\"\n            },\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetMetaKeywords","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaKeywords\",\n            \"metaKeywords\" : {\n              \"en\" : \"Meta Keywords\"\n            },\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetMetaTitle","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMetaTitle\",\n            \"metaTitle\" : {\n              \"en\" : \"A Meta Title\"\n            },\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : {\n              \"en\" : \"A name\"\n            },\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetProductAttribute","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setProductAttribute\",\n            \"name\" : \"ExampleStringTypeAttribute\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"SetSlug","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSlug\",\n            \"slug\" : {\n              \"en\" : \"a-slug\"\n            },\n            \"staged\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]},{"name":"Unpublish","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-tailoring-version}},\n    \"actions\": [\n        {\n            \"action\" : \"unpublish\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-tailoring/{{product-tailoring-id}}","host":["{{host}}"],"path":["{{project-key}}","product-tailoring","{{product-tailoring-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTailoring"},"response":[]}]}]},{"name":"Product-types","description":"Product Types are used to describe common characteristics, most importantly common custom attributes,\nof many concrete products.\n","item":[{"name":"Get ProductType by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/key={{product-type-key}}","host":["{{host}}"],"path":["{{project-key}}","product-types","key={{product-type-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductType exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/key={{product-type-key}}","host":["{{host}}"],"path":["{{project-key}}","product-types","key={{product-type-key}}"],"query":[]},"description":"Checks if a ProductType exists with the provided `key`. Returns a `200` status if the ProductType exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ProductType by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/key={{product-type-key}}","host":["{{host}}"],"path":["{{project-key}}","product-types","key={{product-type-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"new-product-type-name\"\n  } ]\n}"}},"response":[]},{"name":"Delete ProductType by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/key={{product-type-key}}","host":["{{host}}"],"path":["{{project-key}}","product-types","key={{product-type-key}}"],"query":[{"key":"version","value":"{{product-type-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ProductType by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductType exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[]},"description":"Checks if a ProductType exists with the provided `id`. Returns a `200` status if the ProductType exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ProductType by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"new-product-type-name\"\n  } ]\n}"}},"response":[]},{"name":"Delete ProductType by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"version","value":"{{product-type-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ProductTypes","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types","host":["{{host}}"],"path":["{{project-key}}","product-types"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ProductType exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types","host":["{{host}}"],"path":["{{project-key}}","product-types"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ProductTypes exist for the provided query predicate. Returns a `200` status if any ProductTypes match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ProductType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types","host":["{{host}}"],"path":["{{project-key}}","product-types"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"test_product_type\",\n  \"description\" : \"Test product type.\",\n  \"attributes\" : [ {\n    \"type\" : {\n      \"name\" : \"text\"\n    },\n    \"isSearchable\" : false,\n    \"inputHint\" : \"SingleLine\",\n    \"name\" : \"size\",\n    \"label\" : {\n      \"en\" : \"The right size is important.\"\n    },\n    \"isRequired\" : false,\n    \"attributeConstraint\" : \"None\",\n    \"level\" : \"Product\"\n  } ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAttributeDefinition","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAttributeDefinition\",\n            \"attribute\" : {\n              \"type\" : {\n                \"name\" : \"text\"\n              },\n              \"name\" : \"your-attribute-name\",\n              \"label\" : {\n                \"en\" : \"English label\",\n                \"de\" : \"German label\"\n              },\n              \"isRequired\" : false,\n              \"attributeConstraint\" : \"None\",\n              \"inputTip\" : {\n                \"en\" : \"English input tip\",\n                \"de\" : \"German input tip\"\n              },\n              \"inputHint\" : \"SingleLine\",\n              \"isSearchable\" : true\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"AddLocalizedEnumValue","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLocalizedEnumValue\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"value\" : {\n              \"key\" : \"New localized enum key\",\n              \"label\" : {\n                \"en\" : \"New English enum label\",\n                \"de\" : \"New German enum label\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"AddPlainEnumValue","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPlainEnumValue\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"value\" : {\n              \"key\" : \"New enum key\",\n              \"label\" : \"New enum label\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeAttributeConstraint","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAttributeConstraint\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"newValue\" : \"None\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeAttributeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAttributeName\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"newAttributeName\" : \"new-attribute-name\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeAttributeOrderByName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAttributeOrderByName\",\n            \"attributeNames\" : [ \"your-new-first-attribute\", \"your-new-second-attribute\", \"your-new-third-attribute\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeDescription\",\n            \"description\" : \"New Product Type description\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeEnumKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeEnumKey\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"key\" : \"current enum key\",\n            \"newKey\" : \"new enum key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeInputHint","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeInputHint\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"newValue\" : \"MultiLine\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeIsSearchable","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeIsSearchable\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"isSearchable\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeLabel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLabel\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"label\" : {\n              \"en\" : \"New English label\",\n              \"de\" : \"New German label\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeLocalizedEnumValueLabel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLocalizedEnumValueLabel\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"newValue\" : {\n              \"key\" : \"existing localized enum key\",\n              \"label\" : {\n                \"en\" : \"new English label for this enum\",\n                \"de\" : \"new German label for this enum\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeLocalizedEnumValueOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLocalizedEnumValueOrder\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"values\" : [ {\n              \"key\" : \"localized enum key 1\",\n              \"label\" : {\n                \"en\" : \"English label for enum key 1\",\n                \"de\" : \"German label for enum key 1\"\n              }\n            }, {\n              \"key\" : \"localized enum key 2\",\n              \"label\" : {\n                \"en\" : \"English label for enum key 2\",\n                \"de\" : \"German label for enum key 2\"\n              }\n            }, {\n              \"key\" : \"localized enum key 3\",\n              \"label\" : {\n                \"en\" : \"English label for enum key 3\",\n                \"de\" : \"German label for enum key 3\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"New Product Type name\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangePlainEnumValueLabel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePlainEnumValueLabel\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"newValue\" : {\n              \"key\" : \"existing enum key\",\n              \"label\" : \"new label for this enum\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"ChangePlainEnumValueOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePlainEnumValueOrder\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"values\" : [ {\n              \"key\" : \"enum key 1\",\n              \"label\" : \"enum value 1\"\n            }, {\n              \"key\" : \"enum key 2\",\n              \"label\" : \"enum value 2\"\n            }, {\n              \"key\" : \"enum key 3\",\n              \"label\" : \"enum value 3\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"RemoveAttributeDefinition","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAttributeDefinition\",\n            \"name\" : \"your-attribute-name\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"RemoveEnumValues","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeEnumValues\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"keys\" : [ \"enum key to remove 1\", \"enum key to remove 2\", \"enum key to remove 3\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"SetInputTip","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setInputTip\",\n            \"attributeName\" : \"your-attribute-name\",\n            \"inputTip\" : {\n              \"en\" : \"New English input tip\",\n              \"de\" : \"New German input tip\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-type-id\", data.results[0].id); ","    pm.environment.set(\"product-type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{product-type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"myNewKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/product-types/{{product-type-id}}","host":["{{host}}"],"path":["{{project-key}}","product-types","{{product-type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ProductTypes"},"response":[]}]}]},{"name":"Quotes","description":"A quote holds the negotiated offer.","item":[{"name":"Get Quote by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","quotes","key={{quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","quotes","key={{quote-key}}"],"query":[]},"description":"Checks if a Quote exists with the provided `key`. Returns a `200` status if the Quote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Quote by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","quotes","key={{quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteState\",\n    \"quoteState\" : \"Accepted\"\n  } ]\n}"}},"response":[]},{"name":"Delete Quote by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","quotes","key={{quote-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{quote-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Quote by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[]},"description":"Checks if a Quote exists with the provided `id`. Returns a `200` status if the Quote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Quote by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteState\",\n    \"quoteState\" : \"Accepted\"\n  } ]\n}"}},"response":[]},{"name":"Delete Quote by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{quote-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Quotes","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes","host":["{{host}}"],"path":["{{project-key}}","quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes","host":["{{host}}"],"path":["{{project-key}}","quotes"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Quotes exist for the provided query predicate. Returns a `200` status if any Quotes match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Quote","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes","host":["{{host}}"],"path":["{{project-key}}","quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"stagedQuote\" : {\n    \"typeId\" : \"staged-quote\",\n    \"id\" : \"2a3baa00-44fa-4ab8-bec7-933c31e18dcc\"\n  },\n  \"stagedQuoteVersion\" : 1\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"43ddac22-3daa-4689-8975-9f80750ea2e7\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"ChangeQuoteState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeQuoteState\",\n            \"quoteState\" : \"Accepted\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"RequestQuoteRenegotiation","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"requestQuoteRenegotiation\",\n            \"buyerComment\" : \"Please also give me a 10% discount on the red T-shirts.\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]}]}]},{"name":"Quote-requests","description":"A request for a Quote holds product variants and can be ordered.","item":[{"name":"Get QuoteRequest by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","key={{quote-request-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","key={{quote-request-key}}"],"query":[]},"description":"Checks if a QuoteRequest exists with the provided `key`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update QuoteRequest by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","key={{quote-request-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteRequestState\",\n    \"quoteRequestState\" : \"Cancelled\"\n  } ]\n}"}},"response":[]},{"name":"Delete QuoteRequest by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","key={{quote-request-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{quote-request-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get QuoteRequest by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[]},"description":"Checks if a QuoteRequest exists with the provided `id`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update QuoteRequest by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteRequestState\",\n    \"quoteRequestState\" : \"Cancelled\"\n  } ]\n}"}},"response":[]},{"name":"Delete QuoteRequest by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{quote-request-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query QuoteRequests","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","quote-requests"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","quote-requests"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more QuoteRequests exist for the provided query predicate. Returns a `200` status if any QuoteRequests match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create QuoteRequest","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","quote-requests"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"cart\" : {\n    \"typeId\" : \"cart\",\n    \"id\" : \"168e5783-73c8-4f2d-91f4-3c90b872c708\"\n  },\n  \"cartVersion\" : 1,\n  \"comment\" : \"Give me 10% discount\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"900bcbef-77e6-4739-8fdf-c3511d14b32a\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]},{"name":"ChangeQuoteRequestState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeQuoteRequestState\",\n            \"quoteRequestState\" : \"Rejected\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]}]}]},{"name":"Staged-quotes","description":"A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).","item":[{"name":"Get StagedQuote by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/key={{staged-quote-key}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","key={{staged-quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StagedQuote exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/key={{staged-quote-key}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","key={{staged-quote-key}}"],"query":[]},"description":"Checks if a StagedQuote exists with the provided `key`. Returns a `200` status if the StagedQuote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update StagedQuote by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/key={{staged-quote-key}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","key={{staged-quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeStagedQuoteState\",\n    \"stagedQuoteState\" : \"Sent\"\n  } ]\n}"}},"response":[]},{"name":"Delete StagedQuote by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/key={{staged-quote-key}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","key={{staged-quote-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{staged-quote-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get StagedQuote by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StagedQuote exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[]},"description":"Checks if a StagedQuote exists with the provided `id`. Returns a `200` status if the StagedQuote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update StagedQuote by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeStagedQuoteState\",\n    \"stagedQuoteState\" : \"Sent\"\n  } ]\n}"}},"response":[]},{"name":"Delete StagedQuote by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{staged-quote-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query StagedQuotes","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes","host":["{{host}}"],"path":["{{project-key}}","staged-quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StagedQuote exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes","host":["{{host}}"],"path":["{{project-key}}","staged-quotes"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more StagedQuotes exist for the provided query predicate. Returns a `200` status if any StagedQuotes match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create StagedQuote","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes","host":["{{host}}"],"path":["{{project-key}}","staged-quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"quoteRequest\" : {\n    \"typeId\" : \"quote-request\",\n    \"id\" : \"168e5783-73c8-4f2d-91f4-3c90b872c708\"\n  },\n  \"quoteRequestVersion\" : 1\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeStagedQuoteState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeStagedQuoteState\",\n            \"stagedQuoteState\" : \"Sent\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"SetSellerComment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSellerComment\",\n            \"sellerComment\" : \"Please let me know if this matches your expectations\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"SetValidTo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidTo\",\n            \"validTo\" : \"2022-09-22T15:41:55.816Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]}]}]},{"name":"Recurring-orders","description":"A Recurring Order can be created from an Order, usually after a checkout process has been completed or directly via the Recurring Orders API.\n","item":[{"name":"Get RecurringOrder by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Recurring Order with the provided `id`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if RecurringOrder exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[]},"description":"Checks if a Recurring Order exists with the provided `id`. Returns a `200` status if the Recurring Order exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update RecurringOrder by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"new-key\"\n  } ]\n}"}},"response":[]},{"name":"Get RecurringOrder by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/key={{recurring-order-key}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","key={{recurring-order-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Recurring Order with the provided `key`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if RecurringOrder exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/key={{recurring-order-key}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","key={{recurring-order-key}}"],"query":[]},"description":"Checks if a Recurring Order exists with the provided `key`. Returns a `200` status if the Recurring Order exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update RecurringOrder by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/key={{recurring-order-key}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","key={{recurring-order-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"new-key\"\n  } ]\n}"}},"response":[]},{"name":"Query RecurringOrders","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders","host":["{{host}}"],"path":["{{project-key}}","recurring-orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Recurring Orders in the Project.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if RecurringOrder exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders","host":["{{host}}"],"path":["{{project-key}}","recurring-orders"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Recurring Orders exist for the provided query predicate. Returns a `200` status if any Recurring Orders match the query predicate, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create RecurringOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders","host":["{{host}}"],"path":["{{project-key}}","recurring-orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a Recurring Order in the Project.\nThe Cart is validated to ensure that it is convertible to an [Order](ctp:api:type:Order). If validation fails, an error is returned.\n\nProduces the [RecurringOrderCreated](ctp:api:type:RecurringOrderCreatedMessage) message.\n\nIf a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Recurring Order creation may still successfully complete after the error is returned.\nIf you receive this error, you should verify the status of the Recurring Order by querying a unique identifier supplied during the creation request, such as the key.\n","body":{"mode":"raw","raw":"{\n  \"cart\" : {\n    \"id\" : \"7c2e2694-aefe-43d7-888e-6a99514caaca\",\n    \"typeId\" : \"cart\"\n  },\n  \"cartVersion\" : 10,\n  \"startsAt\" : \"2017-01-04T19:54:49.797Z\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurring-order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"ExampleStringTypeField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurring-order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurring-order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n"},"response":[]},{"name":"SetOrderSkipConfiguration","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurring-order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setOrderSkipConfiguration\",\n            \"skipConfiguration\" : {\n              \"type\" : \"counter\",\n              \"totalToSkip\" : 3\n            },\n            \"updatedExpiresAt\" : \"2025-10-15T15:00:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n"},"response":[]},{"name":"SetRecurringOrderState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurring-order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setRecurringOrderState\",\n            \"recurringOrderState\" : {\n              \"type\" : \"active\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n"},"response":[]},{"name":"SetSchedule","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurring-order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSchedule\",\n            \"recurrencePolicy\" : {\n              \"typeId\" : \"recurrence-policy\",\n              \"id\" : \"{{recurrence-policy-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n"},"response":[]},{"name":"SetStartsAt","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurring-order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStartsAt\",\n            \"startsAt\" : \"2025-10-15T15:00:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurring-order-id\", data.results[0].id); ","    pm.environment.set(\"recurring-order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurring-order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurring-order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurring-order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurring-order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurring-order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurring-orders/{{recurring-order-id}}","host":["{{host}}"],"path":["{{project-key}}","recurring-orders","{{recurring-order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).\n"},"response":[]}]}]},{"name":"Recurrence-policies","description":"A Recurrence Policy is a configuration of a schedule.","item":[{"name":"Get RecurrencePolicy by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/key={{recurrence-policy-key}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","key={{recurrence-policy-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Recurrence Policy with the provided `key`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if RecurrencePolicy exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/key={{recurrence-policy-key}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","key={{recurrence-policy-key}}"],"query":[]},"description":"Checks if a Recurrence Policy exists with the provided `key`. Returns a `200` status if the Recurrence Policy exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update RecurrencePolicy by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/key={{recurrence-policy-key}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","key={{recurrence-policy-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"new-key\"\n  } ]\n}"}},"response":[]},{"name":"Get RecurrencePolicy by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/{{recurrence-policy-id}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","{{recurrence-policy-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Recurrence Policy with the provided `id`.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if RecurrencePolicy exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/{{recurrence-policy-id}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","{{recurrence-policy-id}}"],"query":[]},"description":"Checks if a Recurrence Policy exists with the provided `id`. Returns a `200` status if the Recurrence Policy exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update RecurrencePolicy by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/{{recurrence-policy-id}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","{{recurrence-policy-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"new-key\"\n  } ]\n}"}},"response":[]},{"name":"Query RecurrencePolicies","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Recurrence Policies in the Project.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if RecurrencePolicy exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Recurrence Policies exist for the provided query predicate. Returns a `200` status if any Recurrence Policies match the query predicate, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create RecurrencePolicy","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a Recurrence Policy in the Project.\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"daily\",\n  \"name\" : {\n    \"en\" : \"daily\"\n  },\n  \"schedule\" : {\n    \"type\" : \"standard\",\n    \"value\" : 1,\n    \"intervalUnit\" : \"Days\"\n  }\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurrence-policy-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"en\" : \"New description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/{{recurrence-policy-id}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","{{recurrence-policy-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).\n"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurrence-policy-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/{{recurrence-policy-id}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","{{recurrence-policy-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).\n"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurrence-policy-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : {\n              \"en\" : \"New name\",\n              \"de\" : \"Neuer Name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/{{recurrence-policy-id}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","{{recurrence-policy-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).\n"},"response":[]},{"name":"SetSchedule","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"recurrence-policy-id\", data.results[0].id); ","    pm.environment.set(\"recurrence-policy-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"recurrence-policy-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"recurrence-policy-version\", data.version);","}","if(data.id){","    pm.environment.set(\"recurrence-policy-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"recurrence-policy-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{recurrence-policy-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSchedule\",\n            \"schedule\" : {\n              \"type\" : \"standard\",\n              \"value\" : 1,\n              \"intervalUnit\" : \"Days\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/recurrence-policies/{{recurrence-policy-id}}","host":["{{host}}"],"path":["{{project-key}}","recurrence-policies","{{recurrence-policy-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).\n"},"response":[]}]}]},{"name":"Reviews","description":"Reviews are used to evaluate products and channels.","item":[{"name":"Get Review by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/key={{review-key}}","host":["{{host}}"],"path":["{{project-key}}","reviews","key={{review-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Review exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/key={{review-key}}","host":["{{host}}"],"path":["{{project-key}}","reviews","key={{review-key}}"],"query":[]},"description":"Checks if a Review exists with the provided `key`. Returns a `200` status if the Review exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Review by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/key={{review-key}}","host":["{{host}}"],"path":["{{project-key}}","reviews","key={{review-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setAuthorName\",\n    \"authorName\" : \"John Doe\"\n  } ]\n}"}},"response":[]},{"name":"Delete Review by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/key={{review-key}}","host":["{{host}}"],"path":["{{project-key}}","reviews","key={{review-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{review-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Review by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Review exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[]},"description":"Checks if a Review exists with the provided `id`. Returns a `200` status if the Review exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Review by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setAuthorName\",\n    \"authorName\" : \"John Doe\"\n  } ]\n}"}},"response":[]},{"name":"Delete Review by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{review-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Reviews","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews","host":["{{host}}"],"path":["{{project-key}}","reviews"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Review exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews","host":["{{host}}"],"path":["{{project-key}}","reviews"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Reviews exist for the provided query predicate. Returns a `200` status if any Reviews match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Review","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews","host":["{{host}}"],"path":["{{project-key}}","reviews"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"authorName\" : \"John Doe\",\n  \"title\" : \"Incredible\",\n  \"text\" : \"Best product ever\",\n  \"rating\" : 5,\n  \"target\" : {\n    \"typeId\" : \"product\",\n    \"id\" : \"8fddacac-6ef5-4e66-af6e-124452123456\"\n  }\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"SetAuthorName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAuthorName\",\n            \"authorName\" : \"myAuthorName\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"0c2eaad4-833c-43c1-98a4-5d03f57e9329\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"myReviewKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"en-US\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetRating","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setRating\",\n            \"rating\" : 60\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetTarget","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTarget\",\n            \"target\" : {\n              \"typeId\" : \"product\",\n              \"id\" : \"{{product-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetText","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setText\",\n            \"text\" : \"reviewText\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"SetTitle","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTitle\",\n            \"title\" : \"reviewTitle\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"review-id\", data.results[0].id); ","    pm.environment.set(\"review-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"review-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"review-version\", data.version);","}","if(data.id){","    pm.environment.set(\"review-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"review-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{review-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/reviews/{{review-id}}","host":["{{host}}"],"path":["{{project-key}}","reviews","{{review-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Reviews"},"response":[]}]}]},{"name":"Shipping-methods","description":"ShippingMethods define where orders can be shipped and what the costs are.","item":[{"name":"Get ShippingMethod by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/key={{shipping-method-key}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","key={{shipping-method-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShippingMethod exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/key={{shipping-method-key}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","key={{shipping-method-key}}"],"query":[]},"description":"Checks if a ShippingMethod exists with the provided `key`. Returns a `200` status if the ShippingMethod exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ShippingMethod by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/key={{shipping-method-key}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","key={{shipping-method-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"New Name\"\n  } ]\n}"}},"response":[]},{"name":"Delete ShippingMethod by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/key={{shipping-method-key}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","key={{shipping-method-key}}"],"query":[{"key":"version","value":"{{shipping-method-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ShippingMethods for a Cart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-cart-id\", data.results[0].id); ","    pm.environment.set(\"matching-cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/matching-cart","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","matching-cart"],"query":[{"key":"cartId","value":"","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves the active ShippingMethods that can ship to the shipping address of the given Cart.\nEach ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.\nThis ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).\nIf a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if matching ShippingMethod exists for a Cart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-cart-id\", data.results[0].id); ","    pm.environment.set(\"matching-cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/matching-cart","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","matching-cart"],"query":[{"key":"cartId","value":"","equals":true,"disabled":false}]},"description":"Checks if an active ShippingMethod exists for the given Cart. If a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array. Returns a `200` status if the ShippingMethod exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ShippingMethods for a Cart and Location","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-cart-location-id\", data.results[0].id); ","    pm.environment.set(\"matching-cart-location-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-cart-location-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-cart-location-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-cart-location-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-cart-location-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/matching-cart-location","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","matching-cart-location"],"query":[{"key":"country","value":"","equals":true,"disabled":false},{"key":"state","value":"","equals":true,"disabled":true},{"key":"cartId","value":"","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves the active ShippingMethods that can ship to the given [Location](ctp:api:type:Location)\nwith a `predicate` that matches the given Cart.\nEach ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.\nThis ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).\nIf a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if matching ShippingMethod exists for a Cart and Location","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-cart-location-id\", data.results[0].id); ","    pm.environment.set(\"matching-cart-location-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-cart-location-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-cart-location-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-cart-location-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-cart-location-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/matching-cart-location","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","matching-cart-location"],"query":[{"key":"country","value":"","equals":true,"disabled":false},{"key":"state","value":"","equals":true,"disabled":true},{"key":"cartId","value":"","equals":true,"disabled":false}]},"description":"Checks if an active ShippingMethod that can ship to the given [Location](ctp:api:type:Location) exists for the given Cart. Returns a `200` status if the ShippingMethod exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ShippingMethods for an Order Edit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-orderedit-id\", data.results[0].id); ","    pm.environment.set(\"matching-orderedit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-orderedit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-orderedit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-orderedit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-orderedit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/matching-orderedit","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","matching-orderedit"],"query":[{"key":"orderEditId","value":"","equals":true,"disabled":false},{"key":"country","value":"","equals":true,"disabled":false},{"key":"state","value":"","equals":true,"disabled":true}]},"description":"Retrieves the active ShippingMethods that can ship to the given [Location](ctp:api:type:Location) for an [OrderEdit](ctp:api:type:OrderEdit).\nIf a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.\nIf the OrderEdit preview cannot be generated, an [EditPreviewFailed](ctp:api:type:EditPreviewFailedError) error is returned.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if matching ShippingMethod exists for an Order Edit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-orderedit-id\", data.results[0].id); ","    pm.environment.set(\"matching-orderedit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-orderedit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-orderedit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-orderedit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-orderedit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/matching-orderedit","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","matching-orderedit"],"query":[{"key":"orderEditId","value":"","equals":true,"disabled":false},{"key":"country","value":"","equals":true,"disabled":false},{"key":"state","value":"","equals":true,"disabled":true}]},"description":"Checks if an active ShippingMethod that can ship to the given [Location](ctp:api:type:Location) exists for the given [OrderEdit](ctp:api:type:OrderEdit). Returns a `200` status if the ShippingMethod exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ShippingMethods for a Location","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-location-id\", data.results[0].id); ","    pm.environment.set(\"matching-location-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-location-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-location-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-location-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-location-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/matching-location","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","matching-location"],"query":[{"key":"country","value":"","equals":true,"disabled":false},{"key":"state","value":"","equals":true,"disabled":true},{"key":"currency","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true}]},"description":"Retrieves the active ShippingMethods that can ship to the given [Location](/projects/zones#location).\nShippingMethods that have a `predicate` defined are automatically disqualified.\nIf the `currency` parameter is given, then the ShippingMethods must also have a rate defined in the specified currency.\nEach ShippingMethod contains at least one ShippingRate with the flag `isMatching` set to `true`.\nIf the `currency` parameter is given, exactly one ShippingRate will contain it.\nIf a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if matching ShippingMethod exists for a Location","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-location-id\", data.results[0].id); ","    pm.environment.set(\"matching-location-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-location-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-location-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-location-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-location-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/matching-location","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","matching-location"],"query":[{"key":"country","value":"","equals":true,"disabled":false},{"key":"state","value":"","equals":true,"disabled":true},{"key":"currency","value":"","equals":true,"disabled":true}]},"description":"Checks if an active ShippingMethod that can ship to the given [Location](ctp:api:type:Location) exists. Returns a `200` status if the ShippingMethod exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ShippingMethod by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShippingMethod exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[]},"description":"Checks if a ShippingMethod exists with the provided `id`. Returns a `200` status if the ShippingMethod exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ShippingMethod by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"New Name\"\n  } ]\n}"}},"response":[]},{"name":"Delete ShippingMethod by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"version","value":"{{shipping-method-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ShippingMethods","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods","host":["{{host}}"],"path":["{{project-key}}","shipping-methods"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShippingMethod exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods","host":["{{host}}"],"path":["{{project-key}}","shipping-methods"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ShippingMethods exist for the provided query predicate. Returns a `200` status if any ShippingMethods match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods","host":["{{host}}"],"path":["{{project-key}}","shipping-methods"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"DHL\",\n  \"localizedDescription\" : {\n    \"en\" : \"Standard delivery\"\n  },\n  \"taxCategory\" : {\n    \"typeId\" : \"tax-category\",\n    \"id\" : \"5a21f15b-34f8-4b7f-9407-d1eb82a73eba\"\n  },\n  \"zoneRates\" : [ {\n    \"zone\" : {\n      \"typeId\" : \"zone\",\n      \"id\" : \"5cb532be-c680-43ab-ba14-b664bb03dc35\"\n    },\n    \"shippingRates\" : [ {\n      \"price\" : {\n        \"currencyCode\" : \"EUR\",\n        \"centAmount\" : 570\n      }\n    } ]\n  }, {\n    \"zone\" : {\n      \"typeId\" : \"zone\",\n      \"id\" : \"ebe01381-82be-4e63-9993-d1eb8f8e588b\"\n    },\n    \"shippingRates\" : [ {\n      \"price\" : {\n        \"currencyCode\" : \"USD\",\n        \"centAmount\" : 990\n      }\n    } ]\n  } ],\n  \"isDefault\" : false\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddShippingRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingRate\",\n            \"zone\" : {\n              \"typeId\" : \"zone\",\n              \"id\" : \"{{zone-id}}\"\n            },\n            \"shippingRate\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4000\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"AddZone","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addZone\",\n            \"zone\" : {\n              \"typeId\" : \"zone\",\n              \"id\" : \"{{zone-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"ChangeActive","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeActive\",\n            \"active\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"ChangeIsDefault","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeIsDefault\",\n            \"isDefault\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"nameString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"ChangeTaxCategory","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxCategory\",\n            \"taxCategory\" : {\n              \"id\" : \"{{tax-category-id}}\",\n              \"typeId\" : \"tax-category\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"RemoveShippingRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingRate\",\n            \"zone\" : {\n              \"typeId\" : \"zone\",\n              \"id\" : \"{{zone-id}}\"\n            },\n            \"shippingRate\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4000\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"RemoveZone","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeZone\",\n            \"zone\" : {\n              \"typeId\" : \"zone\",\n              \"id\" : \"{{zone-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"keyString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"SetLocalizedDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocalizedDescription\",\n            \"localizedDescription\" : {\n              \"en\" : \"localizedDescriptionString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"SetLocalizedName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocalizedName\",\n            \"localizedName\" : {\n              \"en\" : \"localizedNameString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]},{"name":"SetPredicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shipping-method-id\", data.results[0].id); ","    pm.environment.set(\"shipping-method-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shipping-method-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shipping-method-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shipping-method-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shipping-method-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shipping-method-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPredicate\",\n            \"predicate\" : \"1=1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shipping-methods/{{shipping-method-id}}","host":["{{host}}"],"path":["{{project-key}}","shipping-methods","{{shipping-method-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post ShippingMethods"},"response":[]}]}]},{"name":"Shopping-lists","description":"shopping-lists e.g. for wishlist support","item":[{"name":"Get ShoppingList by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `key`.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `key`. Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ShoppingList by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ShoppingList by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ShoppingList by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `id`.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `id`. Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ShoppingList by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions).","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ShoppingList by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ShoppingLists","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves ShoppingLists in the Project.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","shopping-lists"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ShoppingLists exist for the provided query predicate. Returns a `200` status if any ShoppingLists match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ShoppingList","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Create a ShoppingList in the Project.","body":{"mode":"raw","raw":"{\n  \"name\" : {\n    \"en\" : \"My shopping list\"\n  },\n  \"slug\" : {\n    \"en\" : \"my-shopping-list\"\n  },\n  \"customer\" : {\n    \"typeId\" : \"customer\",\n    \"id\" : \"e73cd97f-846e-44a0-b418-3ed044a8e398\"\n  },\n  \"key\" : \"my-shopping-list\",\n  \"deleteDaysAfterLastModification\" : 100,\n  \"lineItems\" : [ {\n    \"sku\" : \"product-variant-sku\",\n    \"quantity\" : 5\n  }, {\n    \"productId\" : \"0e131f46-8d1a-4761-9c83-b45ab5d3501e\",\n    \"variantId\" : 2\n  } ],\n  \"textLineItems\" : [ {\n    \"name\" : {\n      \"en\" : \"My shopping list item\"\n    },\n    \"description\" : {\n      \"en\" : \"This is a good gift idea\"\n    },\n    \"quantity\" : 5\n  } ],\n  \"businessUnit\" : {\n    \"key\" : \"bu-345-france\",\n    \"typeId\" : \"business-unit\"\n  }\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLineItem\",\n            \"productId\" : \"{{product-id}}\",\n            \"variantId\" : 1,\n            \"quantity\" : 2\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"AddTextLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addTextLineItem\",\n            \"name\" : {\n              \"de\" : \"German name for text line item\",\n              \"en\" : \"English name for text line item\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"ChangeLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 8\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"ChangeLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemsOrder\",\n            \"lineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"de\" : \"German name\",\n              \"en\" : \"English name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"ChangeTextLineItemName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTextLineItemName\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"name\" : {\n              \"de\" : \"New German text line item name\",\n              \"en\" : \"New English text line item name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"ChangeTextLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTextLineItemQuantity\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"ChangeTextLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTextLineItemsOrder\",\n            \"textLineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"RemoveLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 2\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"RemoveTextLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeTextLineItem\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetAnonymousId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAnonymousId\",\n            \"anonymousId\" : \"anonymousId\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBusinessUnit\",\n            \"businessUnit\" : {\n              \"key\" : \"{{business-unit-key}}\",\n              \"typeId\" : \"business-unit\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"{{customer-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetDeleteDaysAfterLastModification","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeleteDaysAfterLastModification\",\n            \"deleteDaysAfterLastModification\" : 10\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"en\" : \"New description\",\n              \"de\" : \"Neue Beschreibung\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-shopping-list-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetSlug","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSlug\",\n            \"slug\" : {\n              \"en\" : \"en-slug\",\n              \"de\" : \"de-slug\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetTextLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTextLineItemCustomField\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetTextLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTextLineItemCustomType\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]},{"name":"SetTextLineItemDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTextLineItemDescription\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"description\" : {\n              \"en\" : \"New description\",\n              \"de\" : \"Neue Beschreibung\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions)."},"response":[]}]}]},{"name":"States","description":"commercetools Composable Commerce allows you to model states of certain objects, such as orders, line items, products,\nreviews, and payments in order to define finite state machines reflecting the business logic you'd like to\nimplement.\n","item":[{"name":"Get State by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/key={{state-key}}","host":["{{host}}"],"path":["{{project-key}}","states","key={{state-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if State exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/key={{state-key}}","host":["{{host}}"],"path":["{{project-key}}","states","key={{state-key}}"],"query":[]},"description":"Checks if a State exists with the provided `key`. Returns a `200` status if the State exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update State by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/key={{state-key}}","host":["{{host}}"],"path":["{{project-key}}","states","key={{state-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete State by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/key={{state-key}}","host":["{{host}}"],"path":["{{project-key}}","states","key={{state-key}}"],"query":[{"key":"version","value":"{{state-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get State by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if State exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[]},"description":"Checks if a State exists with the provided `id`. Returns a `200` status if the State exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update State by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete State by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"version","value":"{{state-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query States","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states","host":["{{host}}"],"path":["{{project-key}}","states"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if State exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states","host":["{{host}}"],"path":["{{project-key}}","states"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more States exist for the provided query predicate. Returns a `200` status if any States match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create State","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states","host":["{{host}}"],"path":["{{project-key}}","states"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"key\" : \"Initial\",\n  \"type\" : \"LineItemState\",\n  \"roles\" : [ ],\n  \"name\" : {\n    \"en\" : \"Initial\"\n  },\n  \"description\" : {\n    \"en\" : \"Initial is the first State that a (custom) Line Item gets after its creation.\"\n  },\n  \"initial\" : true\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddRoles","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addRoles\",\n            \"roles\" : [ \"ReviewIncludedInStatistics\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]},{"name":"ChangeInitial","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeInitial\",\n            \"initial\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]},{"name":"ChangeKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeKey\",\n            \"key\" : \"ChangedStateKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]},{"name":"ChangeType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeType\",\n            \"type\" : \"ReviewState\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]},{"name":"RemoveRoles","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeRoles\",\n            \"roles\" : [ \"ReviewIncludedInStatistics\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"de\" : \"State Beschreibung\",\n              \"en\" : \"State description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : {\n              \"de\" : \"State Name\",\n              \"en\" : \"State name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]},{"name":"SetRoles","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setRoles\",\n            \"roles\" : [ \"ReviewIncludedInStatistics\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]},{"name":"SetTransitions","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"state-id\", data.results[0].id); ","    pm.environment.set(\"state-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"state-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"state-version\", data.version);","}","if(data.id){","    pm.environment.set(\"state-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"state-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{state-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTransitions\",\n            \"transitions\" : [ {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }, {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id2}}\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/states/{{state-id}}","host":["{{host}}"],"path":["{{project-key}}","states","{{state-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post States"},"response":[]}]}]},{"name":"Subscriptions","description":"Subscriptions allow you to be notified of new messages or changes via a Message Queue of your choice","item":[{"name":"Get Subscription by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/key={{subscription-key}}","host":["{{host}}"],"path":["{{project-key}}","subscriptions","key={{subscription-key}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Subscription exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/key={{subscription-key}}","host":["{{host}}"],"path":["{{project-key}}","subscriptions","key={{subscription-key}}"],"query":[]},"description":"Checks if a Subscription exists with the provided `key`. Returns a `200` status if the Subscription exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Subscription by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/key={{subscription-key}}","host":["{{host}}"],"path":["{{project-key}}","subscriptions","key={{subscription-key}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"new-key\"\n  } ]\n}"}},"response":[]},{"name":"Delete Subscription by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/key={{subscription-key}}","host":["{{host}}"],"path":["{{project-key}}","subscriptions","key={{subscription-key}}"],"query":[{"key":"version","value":"{{subscription-version}}","equals":true,"disabled":false}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Health Status of Subscription by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"health-id\", data.results[0].id); ","    pm.environment.set(\"health-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"health-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"health-version\", data.version);","}","if(data.id){","    pm.environment.set(\"health-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"health-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/{{subscription-id}}/health","host":["{{host}}"],"path":["{{project-key}}","subscriptions","{{subscription-id}}","health"],"query":[]},"description":"This endpoint can be polled by a monitoring or alerting system that checks the health of your Subscriptions. To ease integration with such systems this endpoint does not require [Authorization](/../api/authorization).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Subscription by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/{{subscription-id}}","host":["{{host}}"],"path":["{{project-key}}","subscriptions","{{subscription-id}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Subscription exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/{{subscription-id}}","host":["{{host}}"],"path":["{{project-key}}","subscriptions","{{subscription-id}}"],"query":[]},"description":"Checks if a Subscription exists with the provided `id`. Returns a `200` status if the Subscription exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Subscription by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/{{subscription-id}}","host":["{{host}}"],"path":["{{project-key}}","subscriptions","{{subscription-id}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"new-key\"\n  } ]\n}"}},"response":[]},{"name":"Delete Subscription by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions/{{subscription-id}}","host":["{{host}}"],"path":["{{project-key}}","subscriptions","{{subscription-id}}"],"query":[{"key":"version","value":"{{subscription-version}}","equals":true,"disabled":false}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Subscriptions","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions","host":["{{host}}"],"path":["{{project-key}}","subscriptions"],"query":[{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Subscription exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions","host":["{{host}}"],"path":["{{project-key}}","subscriptions"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Subscriptions exist for the provided query predicate. Returns a `200` status if any Subscriptions match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Subscription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"subscription-id\", data.results[0].id); ","    pm.environment.set(\"subscription-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"subscription-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"subscription-version\", data.version);","}","if(data.id){","    pm.environment.set(\"subscription-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"subscription-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/subscriptions","host":["{{host}}"],"path":["{{project-key}}","subscriptions"],"query":[]},"description":"A test notification is sent to ensure the correct configuration of the Destination. If the notification cannot be delivered, the Subscription will not be created. The payload of the test notification is of type [ResourceCreated](/../api/projects/subscriptions#resourcecreateddeliverypayload) for the `resourceTypeId` `subscription`.\n","body":{"mode":"raw","raw":"{\n  \"destination\" : {\n    \"type\" : \"SQS\",\n    \"queueUrl\" : \"https://sqs.my-region.amazonaws.com/my-aws-account-number/my-queue\",\n    \"authenticationMode\" : \"IAM\",\n    \"region\" : \"my-region\"\n  },\n  \"messages\" : [ {\n    \"resourceTypeId\" : \"product\",\n    \"types\" : [ ]\n  } ],\n  \"key\" : \"test-queue\"\n}"}},"response":[]}]},{"name":"Tax-categories","description":"Tax Categories define how products are to be taxed in different countries.","item":[{"name":"Get TaxCategory by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/key={{tax-category-key}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","key={{tax-category-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if TaxCategory exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/key={{tax-category-key}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","key={{tax-category-key}}"],"query":[]},"description":"Checks if a TaxCategory exists with the provided `key`. Returns a `200` status if the Tax Category exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update TaxCategory by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/key={{tax-category-key}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","key={{tax-category-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"New Name\"\n  } ]\n}"}},"response":[]},{"name":"Delete TaxCategory by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/key={{tax-category-key}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","key={{tax-category-key}}"],"query":[{"key":"version","value":"{{tax-category-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get TaxCategory by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if TaxCategory exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[]},"description":"Checks if a TaxCategory exists with the provided `id`. Returns a `200` status if the TaxCategory exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update TaxCategory by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"New Name\"\n  } ]\n}"}},"response":[]},{"name":"Delete TaxCategory by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"version","value":"{{tax-category-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query TaxCategories","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories","host":["{{host}}"],"path":["{{project-key}}","tax-categories"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if TaxCategory exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories","host":["{{host}}"],"path":["{{project-key}}","tax-categories"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Tax Categories exist for the provided query predicate. Returns a `200` status if any TaxCategories match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create TaxCategory","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories","host":["{{host}}"],"path":["{{project-key}}","tax-categories"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"test-tax-category\",\n  \"rates\" : [ {\n    \"name\" : \"HST Ontario\",\n    \"amount\" : 0.13,\n    \"includedInPrice\" : true,\n    \"country\" : \"CA\",\n    \"state\" : \"ON\",\n    \"subRates\" : [ {\n      \"name\" : \"Federal rate (GST 5%)\",\n      \"amount\" : 0.05\n    }, {\n      \"name\" : \"Provincial rate (PST 8%)\",\n      \"amount\" : 0.08\n    } ]\n  } ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{tax-category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addTaxRate\",\n            \"taxRate\" : {\n              \"name\" : \"TaxRateName\",\n              \"amount\" : 0.3,\n              \"includedInPrice\" : true,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post TaxCategories"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{tax-category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"New Name\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post TaxCategories"},"response":[]},{"name":"RemoveTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{tax-category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeTaxRate\",\n            \"taxRateId\" : \"{{taxRateID}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post TaxCategories"},"response":[]},{"name":"ReplaceTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{tax-category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"replaceTaxRate\",\n            \"taxRateId\" : \"{{taxRateID}}\",\n            \"taxRate\" : {\n              \"name\" : \"TaxRateName\",\n              \"amount\" : 0.4,\n              \"includedInPrice\" : true,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post TaxCategories"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{tax-category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : \"new Description\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post TaxCategories"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"tax-category-id\", data.results[0].id); ","    pm.environment.set(\"tax-category-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"tax-category-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"tax-category-version\", data.version);","}","if(data.id){","    pm.environment.set(\"tax-category-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"tax-category-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{tax-category-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"keyString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/tax-categories/{{tax-category-id}}","host":["{{host}}"],"path":["{{project-key}}","tax-categories","{{tax-category-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post TaxCategories"},"response":[]}]}]},{"name":"Types","description":"Types define custom fields that are used to enhance resources as you need.","item":[{"name":"Get Type by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/key={{type-key}}","host":["{{host}}"],"path":["{{project-key}}","types","key={{type-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Type exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/key={{type-key}}","host":["{{host}}"],"path":["{{project-key}}","types","key={{type-key}}"],"query":[]},"description":"Checks if a Type exists with the provided `key`. Returns a `200` status if the Type exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Type by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/key={{type-key}}","host":["{{host}}"],"path":["{{project-key}}","types","key={{type-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Type by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/key={{type-key}}","host":["{{host}}"],"path":["{{project-key}}","types","key={{type-key}}"],"query":[{"key":"version","value":"{{type-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Type by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Type exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[]},"description":"Checks if a Type exists with the provided `id`. Returns a `200` status if the Type exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Type by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Type by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"version","value":"{{type-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Types","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types","host":["{{host}}"],"path":["{{project-key}}","types"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Type exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types","host":["{{host}}"],"path":["{{project-key}}","types"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Types exist for the provided query predicate. Returns a `200` status if any Types match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Type","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types","host":["{{host}}"],"path":["{{project-key}}","types"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"key\" : \"line-item-string-field\",\n  \"name\" : {\n    \"en\" : \"String Custom Field on Line Items\"\n  },\n  \"description\" : {\n    \"en\" : \"This adds a Custom Field on Line Items, which can hold any string value.\"\n  },\n  \"resourceTypeIds\" : [ \"line-item\" ],\n  \"fieldDefinitions\" : [ {\n    \"name\" : \"exampleStringField\",\n    \"label\" : {\n      \"en\" : \"Example string field.\"\n    },\n    \"required\" : false,\n    \"type\" : {\n      \"name\" : \"String\"\n    },\n    \"inputHint\" : \"SingleLine\"\n  } ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddEnumValue","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addEnumValue\",\n            \"fieldName\" : \"exampleEnumField\",\n            \"value\" : {\n              \"key\" : \"NewENumKey\",\n              \"label\" : \"NewENumLabel\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"AddFieldDefinition","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addFieldDefinition\",\n            \"fieldDefinition\" : {\n              \"type\" : {\n                \"name\" : \"LocalizedString\"\n              },\n              \"name\" : \"fieldDefinitionName\",\n              \"label\" : {\n                \"de\" : \"labelDE\",\n                \"en\" : \"labelEN\"\n              },\n              \"required\" : false,\n              \"inputHint\" : \"MultiLine\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"AddLocalizedEnumValue","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLocalizedEnumValue\",\n            \"fieldName\" : \"exampleLocalizedEnumField\",\n            \"value\" : {\n              \"key\" : \"NewLocalizedEnumKeyString\",\n              \"label\" : {\n                \"en\" : \"NewLocalizedEnumLabelEN\",\n                \"de\" : \"NewLocalizedEnumLabelDE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeEnumValueLabel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeEnumValueLabel\",\n            \"fieldName\" : \"exampleEnumField\",\n            \"value\" : {\n              \"key\" : \"NewENumKey\",\n              \"label\" : \"New value\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeEnumValueOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeEnumValueOrder\",\n            \"fieldName\" : \"exampleEnumField\",\n            \"keys\" : [ \"enum3\", \"enum4\", \"enum2\", \"enum1\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeFieldDefinitionOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeFieldDefinitionOrder\",\n            \"fieldNames\" : [ \"exampleEnumField\", \"exampleLocalizedEnumField\", \"exampleStringField\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeInputHint","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeInputHint\",\n            \"fieldName\" : \"exampleBooleanField\",\n            \"inputHint\" : \"MultiLine\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeKey\",\n            \"key\" : \"NewKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeLabel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLabel\",\n            \"fieldName\" : \"exampleStringField\",\n            \"label\" : {\n              \"de\" : \"NewLabelDE\",\n              \"en\" : \"NewLabelEN\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeLocalizedEnumValueLabel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLocalizedEnumValueLabel\",\n            \"fieldName\" : \"exampleLocalizedEnumField\",\n            \"value\" : {\n              \"key\" : \"NewLocalizedEnumKeyString\",\n              \"label\" : {\n                \"en\" : \"NewLocalizedEnumLabelEN\",\n                \"de\" : \"NewLocalizedEnumLabelDE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeLocalizedEnumValueOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLocalizedEnumValueOrder\",\n            \"fieldName\" : \"exampleLocalizedEnumField\",\n            \"keys\" : [ \"lenum3\", \"lenum4\", \"lenum2\", \"lenum1\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"en\" : \"NameDE\",\n              \"de\" : \"NameEN\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"RemoveFieldDefinition","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeFieldDefinition\",\n            \"fieldName\" : \"fieldDefinitionName\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"type-id\", data.results[0].id); ","    pm.environment.set(\"type-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"type-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"type-version\", data.version);","}","if(data.id){","    pm.environment.set(\"type-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"type-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{type-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"de\" : \"DescriptionDE\",\n              \"en\" : \"DescriptionEN\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/types/{{type-id}}","host":["{{host}}"],"path":["{{project-key}}","types","{{type-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Types"},"response":[]}]}]},{"name":"Zones","description":"Zones allow defining ShippingRates for specific Locations.","item":[{"name":"Get Zone by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/key={{zone-key}}","host":["{{host}}"],"path":["{{project-key}}","zones","key={{zone-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Zone exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/key={{zone-key}}","host":["{{host}}"],"path":["{{project-key}}","zones","key={{zone-key}}"],"query":[]},"description":"Checks if a Zone exists with the provided `key`. Returns a `200` status if the Zone exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Zone by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/key={{zone-key}}","host":["{{host}}"],"path":["{{project-key}}","zones","key={{zone-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"New Name\"\n  } ]\n}"}},"response":[]},{"name":"Delete Zone by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/key={{zone-key}}","host":["{{host}}"],"path":["{{project-key}}","zones","key={{zone-key}}"],"query":[{"key":"version","value":"{{zone-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Zone by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Zone exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[]},"description":"Checks if a Zone exists with the provided `id`. Returns a `200` status if the Zone exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Zone by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : \"New Name\"\n  } ]\n}"}},"response":[]},{"name":"Delete Zone by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[{"key":"version","value":"{{zone-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Zones","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones","host":["{{host}}"],"path":["{{project-key}}","zones"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Zone exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones","host":["{{host}}"],"path":["{{project-key}}","zones"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Zones exist for the provided query predicate. Returns a `200` status if any Zones match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Zone","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones","host":["{{host}}"],"path":["{{project-key}}","zones"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"US\",\n  \"locations\" : [ {\n    \"country\" : \"US\"\n  } ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddLocation","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{zone-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLocation\",\n            \"location\" : {\n              \"country\" : \"AT\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Zones"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{zone-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"changedName\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Zones"},"response":[]},{"name":"RemoveLocation","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{zone-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeLocation\",\n            \"location\" : {\n              \"country\" : \"AT\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Zones"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{zone-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : \"new ZoneDescription\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Zones"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"zone-id\", data.results[0].id); ","    pm.environment.set(\"zone-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"zone-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"zone-version\", data.version);","}","if(data.id){","    pm.environment.set(\"zone-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"zone-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{zone-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"keyString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/zones/{{zone-id}}","host":["{{host}}"],"path":["{{project-key}}","zones","{{zone-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Zones"},"response":[]}]}]},{"name":"Me","description":"null","item":[{"name":"Verify email of My Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"confirm-id\", data.results[0].id); ","    pm.environment.set(\"confirm-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"confirm-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"confirm-version\", data.version);","}","if(data.id){","    pm.environment.set(\"confirm-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"confirm-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/email/confirm","host":["{{host}}"],"path":["{{project-key}}","me","email","confirm"],"query":[]},"description":"This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer).\n\nAfter the email is verified, all email tokens issued previously through the [email verification flow](/../api/projects/customers#email-verification-of-customer) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).\n","body":{"mode":"raw","raw":"{\n  \"tokenValue\" : \"hI_6fkuFIyd_wadz1JmpRGh1vMvgFrlsSJia3G6d\"\n}"}},"response":[]},{"name":"Password","description":"null","item":[{"name":"Reset password of My Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"reset-id\", data.results[0].id); ","    pm.environment.set(\"reset-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"reset-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"reset-version\", data.version);","}","if(data.id){","    pm.environment.set(\"reset-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"reset-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/password/reset","host":["{{host}}"],"path":["{{project-key}}","me","password","reset"],"query":[]},"description":"This is the last step in the [password reset process of a Customer](/../api/projects/customers#password-reset-of-customer).\n\nResetting a password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.\n\nAfter the password is reset, all password tokens issued previously through the [password reset flow](/../api/projects/customers#password-reset-of-customer) are invalidated. In addition, any access and refresh tokens issued previously through the [password flow](/../api/authorization#password-flow) and [refresh token flow](/../api/authorization#refresh-token-flow) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).\n","body":{"mode":"raw","raw":"{\n  \"tokenValue\" : \"VRndRV5oCr-pKH2360DnlhqEOVVUZXSAIUXgT5HL\",\n  \"newPassword\" : \"newsecret123\"\n}"}},"response":[]},{"name":"Change password of My Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"password-id\", data.results[0].id); ","    pm.environment.set(\"password-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"password-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"password-version\", data.version);","}","if(data.id){","    pm.environment.set(\"password-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"password-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/password","host":["{{host}}"],"path":["{{project-key}}","me","password"],"query":[]},"description":"Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.\n\nIf the current password does not match, an [InvalidCurrentPassword](ctp:api:type:InvalidCurrentPasswordError) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"currentPassword\" : \"secret123\",\n  \"newPassword\" : \"newSecret456\"\n}"}},"response":[]}]},{"name":"Create (sign up) My Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"signup-id\", data.results[0].id); ","    pm.environment.set(\"signup-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"signup-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"signup-version\", data.version);","}","if(data.id){","    pm.environment.set(\"signup-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"signup-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/signup","host":["{{host}}"],"path":["{{project-key}}","me","signup"],"query":[]},"description":"If used with an optional [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly created Customer.\n\nCreating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\",\n  \"firstName\" : \"John\",\n  \"lastName\" : \"Doe\",\n  \"password\" : \"secret123\"\n}"}},"response":[]},{"name":"Authenticate (sign in) My Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"login-id\", data.results[0].id); ","    pm.environment.set(\"login-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"login-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"login-version\", data.version);","}","if(data.id){","    pm.environment.set(\"login-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"login-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/login","host":["{{host}}"],"path":["{{project-key}}","me","login"],"query":[]},"description":"Retrieves the authenticated customer (that matches the given email/password pair).\n\nIf used with an optional [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly logged-in Customer.\n\n- If the Customer does not have a Cart yet, the most recently modified anonymous cart becomes the Customer's Cart.\n- If the Customer already has a Cart, the most recently modified anonymous cart is handled in accordance with [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).\n\nA Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#update-a-cart) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).\n\nIf an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\",\n  \"password\" : \"secret123\"\n}"}},"response":[]},{"name":"Get My active Cart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"active-cart-id\", data.results[0].id); ","    pm.environment.set(\"active-cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"active-cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"active-cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"active-cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"active-cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/active-cart","host":["{{host}}"],"path":["{{project-key}}","me","active-cart"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves the Customer's most recently modified [active Cart](ctp:api:type:CartState). Returns a `200` status if successful.\n\nCarts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no active Cart exists.\n- If an active Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My active Cart exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"active-cart-id\", data.results[0].id); ","    pm.environment.set(\"active-cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"active-cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"active-cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"active-cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"active-cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/active-cart","host":["{{host}}"],"path":["{{project-key}}","me","active-cart"],"query":[]},"description":"Checks if an active Cart exists. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no active Cart exists.\n- If an active Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Business-units","description":"MyBusinessUnit creates and provides access to Business Units scoped to a specific user.","item":[{"name":"Get My Business Unit by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Returns a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Business Unit exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[]},"description":"Checks if a BusinessUnit exists with the provided `id`. Returns a `200` status if the BusinessUnit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Business Units by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Get My Business Unit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","key={{business-unit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Returns a Business Unit for a given `key`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Business Unit exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","key={{business-unit-key}}"],"query":[]},"description":"Checks if a BusinessUnit exists with the provided `key`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Business Unit by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","key={{business-unit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `key`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Query My Business Units","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units","host":["{{host}}"],"path":["{{project-key}}","me","business-units"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Business Units for the authenticated Customer. Returns a `200` status if successful, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Business Unit exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units","host":["{{host}}"],"path":["{{project-key}}","me","business-units"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more BusinessUnits exist for the provided query predicate. Returns a `200` status if any BusinessUnits match the Query Predicate and the Customer has access to them, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My Business Units","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units","host":["{{host}}"],"path":["{{project-key}}","me","business-units"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Automatically assigns the Associate to the Business Unit in the default [Associate Role](ctp:api:type:AssociateRole) defined in [BusinessUnitConfiguration](ctp:api:type:BusinessUnitConfiguration). If there is no default Associate Role configured, this request fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error. When creating a Division, the Associate must have the `AddChildUnits` [Permission](ctp:api:type:Permission) in the parent unit. If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"name\" : \"commercetools\",\n  \"unitType\" : \"Company\",\n  \"key\" : \"commercetools\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAddress\",\n            \"address\" : {\n              \"id\" : \"exampleAddress\",\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"mail@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"AddBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"AddShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"ChangeAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAddress\",\n            \"addressId\" : \"{{addressId}}\",\n            \"address\" : {\n              \"id\" : \"exampleAddress\",\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"ChangeAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssociate\",\n            \"associate\" : {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              }, {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"commercetools\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"ChangeParentUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeParentUnit\",\n            \"parentUnit\" : {\n              \"typeId\" : \"business-unit\",\n              \"key\" : \"commercetools\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"RemoveAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"RemoveAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAssociate\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"some-customer-id\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"RemoveBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"RemoveShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"SetAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\",\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"SetAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"SetContactEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setContactEmail\",\n            \"contactEmail\" : \"contact@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"SetDefaultBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultBillingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]},{"name":"SetDefaultShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultShippingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","me","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n"},"response":[]}]}]},{"name":"Carts","description":"A shopping cart holds product variants and can be ordered.","item":[{"name":"Get My Cart by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Returns a Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Cart exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[]},"description":"Checks if a Cart exists with the provided `id`. Returns a `200` status if the Cart exists.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Cart by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addLineItem\",\n    \"productId\" : \"9f10dcfb-5cc9-4a18-843a-c07f7e22d01f\",\n    \"variantId\" : 1,\n    \"quantity\" : 1\n  } ]\n}"}},"response":[]},{"name":"Delete My Cart by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"version","value":"{{cart-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Replicate My Cart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"replicate-id\", data.results[0].id); ","    pm.environment.set(\"replicate-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"replicate-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"replicate-version\", data.version);","}","if(data.id){","    pm.environment.set(\"replicate-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"replicate-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/replicate","host":["{{host}}"],"path":["{{project-key}}","me","carts","replicate"],"query":[]},"description":"Creates a new Cart by replicating an existing Cart or Order of the authenticated Customer.\nThis can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.\n\nThe replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order.\nIf the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart.\nIf the Customer switches to another Customer Group, the new Cart is updated with the new value.\nIt has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).\n\nThe new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.\n\nIf the Cart or Order to be replicated does not belong to the authenticated Customer, the API returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error\n\nSpecific Error Codes:\n\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query My Carts","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts","host":["{{host}}"],"path":["{{project-key}}","me","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Carts for the authenticated Customer or anonymous user.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Cart exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts","host":["{{host}}"],"path":["{{project-key}}","me","carts"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if a Cart exists that matches a given Query Predicate and contains either a matching `customerId` or `anonymousId`. Returns a `200` status if the Cart exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My Cart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts","host":["{{host}}"],"path":["{{project-key}}","me","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"\nCreates a Cart for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Cart is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n\nSpecific Error Codes:\n\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"currency\" : \"EUR\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDiscountCode\",\n            \"code\" : \"mydiscountcode\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"AddItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"AddLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLineItem\",\n            \"productId\" : \"{{product-id}}\",\n            \"variantId\" : 2,\n            \"quantity\" : 1,\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"AddPayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ApplyDeltaToLineItemShippingDetailsTargets","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyDeltaToLineItemShippingDetailsTargets\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"targetsDelta\" : [ {\n              \"addressKey\" : \"addressKeyString\",\n              \"quantity\" : 1\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemsOrder\",\n            \"lineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeTaxMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxMode\",\n            \"taxMode\" : \"Platform\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"Recalculate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"recalculate\",\n            \"updateProductData\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemoveDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDiscountCode\",\n            \"discountCode\" : {\n              \"typeId\" : \"discount-code\",\n              \"id\" : \"{{discount-code-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemoveItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeItemShippingAddress\",\n            \"addressKey\" : \"{{addressKey}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemoveLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1,\n            \"externalPrice\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            },\n            \"shippingDetailsToRemove\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemovePayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n                |{\n            \"action\": \"setBusinessUnit\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCountry","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCountry\",\n            \"country\" : \"DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemRecurrenceInfo\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomerEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n                |{\n            \"action\": \"setCustomerEmail\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetDeleteDaysAfterLastModification","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeleteDaysAfterLastModification\",\n            \"deleteDaysAfterLastModification\" : 90\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemDistributionChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemDistributionChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemRecurrenceInfo\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              },\n              \"priceSelectionMode\" : \"Fixed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemShippingDetails\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 1\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemSupplyChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemSupplyChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethod\",\n            \"shippingMethod\" : {\n              \"id\" : \"{{shipping-method-id}}\",\n              \"typeId\" : \"shipping-method\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"UpdateItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id`. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists with the provided `id`.\n- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]}]}]},{"name":"Orders","description":"An order can be created from a cart, usually after a checkout process has been completed.","item":[{"name":"Get My Order by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","me","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an Order with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Order exists for the provided `id`.\n- If the Order exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Order exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","me","orders","{{order-id}}"],"query":[]},"description":"Checks if an Order exists with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no Order exists for the provided `id`.\n- If the Order exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My Order from Quote","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/orders/quotes","host":["{{host}}"],"path":["{{project-key}}","me","orders","quotes"],"query":[]},"description":"\nCreates an Order from a [Quote](ctp:api:type:Quote) for the authenticated Customer. To create [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyQuotes` [Permission](ctp:api:type:Permission).\n\nThe referenced Quote must have the `Pending` [state](ctp:api:type:QuoteState) and must be valid (not past the `validTo` date); otherwise, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.\n\nProduces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.\n\nSpecific Error Codes:\n\n- [OutOfStock](ctp:api:type:OutOfStockError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)\n- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)\n","body":{"mode":"raw","raw":"{\n  \"id\" : \"40d04a85-34d3-4769-a1b6-ecd00db2a587\",\n  \"version\" : 1,\n  \"quoteStateToAccepted\" : true\n}"}},"response":[]},{"name":"Query My Orders","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/orders","host":["{{host}}"],"path":["{{project-key}}","me","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Orders for the authenticated Customer or anonymous user.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Orders exist for the provided query predicate.\n- If an Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Order exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/orders","host":["{{host}}"],"path":["{{project-key}}","me","orders"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Orders exist for the provided query predicate for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no Orders exist that match the provided query predicate.\n- If one or more Orders exist but don't have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My Order","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/orders","host":["{{host}}"],"path":["{{project-key}}","me","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"\nCreates an Order from a Cart for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Order is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n\nThe Cart must have a shipping address and an active Shipping Method set. When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyCarts` [Permission](ctp:api:type:Permission).\n\nIf the Cart's `customerId` does not match the [customer:{id}](/scopes#composable-commerce-oauth) scope, or the `anonymousId` does not match the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.\n\nCreating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.\n\nIf a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.\nIf you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.\n\nSpecific Error Codes:\n\n- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [OutOfStock](ctp:api:type:OutOfStockError)\n- [PriceChanged](ctp:api:type:PriceChangedError)\n- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"id\" : \"7c2e2694-aefe-43d7-888e-6a99514caaca\",\n  \"version\" : 10\n}"}},"response":[]}]},{"name":"Payments","description":"The My Payments endpoint creates and provides access to payments scoped to a specific user.","item":[{"name":"Get My Payment by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a [Payment](/projects/me-payments#mypayment) with the provided `id` for the authenticated Customer or anonymous user.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Payment exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[]},"description":"Checks if a [Payment](/projects/me-payments#mypayment) exists with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if the Payment exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Payment by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeAmountPlanned\",\n    \"amount\" : {\n      \"currencyCode\" : \"USD\",\n      \"centAmount\" : 1000\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete My Payment by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"version","value":"{{payment-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a [Payment](/projects/me-payments#mypayment) with the provided `id` for the authenticated Customer or anonymous user.\nYou can only delete a Payment if it has no [Transactions](ctp:api:type:Transaction).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query My Payments","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments","host":["{{host}}"],"path":["{{project-key}}","me","payments"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves [Payments](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Payment exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments","host":["{{host}}"],"path":["{{project-key}}","me","payments"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more [Payments](/projects/me-payments#mypayment) exist for the provided query predicate for the authenticated Customer or anonymous user. Returns a `200` status if any Payments match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My Payment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments","host":["{{host}}"],"path":["{{project-key}}","me","payments"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user.\nCreating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"amountPlanned\" : {\n    \"currencyCode\" : \"USD\",\n    \"centAmount\" : 1000\n  },\n  \"paymentMethodInfo\" : {\n    \"paymentInterface\" : \"STRIPE\",\n    \"method\" : \"CREDIT_CARD\",\n    \"name\" : {\n      \"en\" : \"Credit Card\"\n    }\n  },\n  \"transaction\" : {\n    \"timestamp\" : \"2015-10-20T08:54:24.000Z\",\n    \"type\" : \"Charge\",\n    \"amount\" : {\n      \"currencyCode\" : \"USD\",\n      \"centAmount\" : 1000\n    }\n  }\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddTransaction","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addTransaction\",\n            \"transaction\" : {\n              \"type\" : \"Authorization\",\n              \"amount\" : {\n                \"centAmount\" : 4000,\n                \"currencyCode\" : \"EUR\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"ChangeAmountPlanned","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAmountPlanned\",\n            \"amount\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"SetMethodInfoCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoCustomField\",\n            \"name\" : \"last4\",\n            \"value\" : 4567\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"SetMethodInfoCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoCustomType\",\n            \"type\" : {\n              \"key\" : \"payment-method-info-cc-last4\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"last4\" : 1234\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"SetMethodInfoInterface","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoInterface\",\n            \"interface\" : \"MethodInfoInterfaceString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"SetMethodInfoInterfaceAccount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoInterfaceAccount\",\n            \"interfaceAccount\" : \"ADYEN-123\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"SetMethodInfoMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoMethod\",\n            \"method\" : \"MethodInfoMethodString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"SetMethodInfoName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMethodInfoName\",\n            \"name\" : {\n              \"de\" : \"MethodInfoNameStringDE\",\n              \"en\" : \"MethodInfoNameStringEN\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]},{"name":"SetTransactionCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"payment-id\", data.results[0].id); ","    pm.environment.set(\"payment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"payment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"payment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"payment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"payment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{payment-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTransactionCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/payments/{{payment-id}}","host":["{{host}}"],"path":["{{project-key}}","me","payments","{{payment-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).\nYou can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).\n"},"response":[]}]}]},{"name":"Quote-requests","description":"The My Quote Requests endpoint creates and provides access to Quote Requests scoped to a specific user.","item":[{"name":"Get My QuoteRequest by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My QuoteRequest exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests","{{quote-request-id}}"],"query":[]},"description":"Checks if a QuoteRequest exists with the provided `id`. Returns a `200` status if the QuoteRequest exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My QuoteRequest by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"cancelQuoteRequest\"\n  } ]\n}"}},"response":[]},{"name":"Get My QuoteRequest by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests","key={{quote-request-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My QuoteRequest exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests","key={{quote-request-key}}"],"query":[]},"description":"Checks if a QuoteRequest exists with the provided `key`. Returns a `200` status if the QuoteRequest exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My QuoteRequest by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests","key={{quote-request-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"cancelQuoteRequest\"\n  } ]\n}"}},"response":[]},{"name":"Query My QuoteRequests","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Quote Requests for the authenticated Customer. Returns a `200` status if successful.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My QuoteRequest exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more QuoteRequests exist for the provided query predicate. Returns a `200` status if any QuoteRequests match the query predicate, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My QuoteRequest","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"cartId\" : \"168e5783-73c8-4f2d-91f4-3c90b872c708\",\n  \"cartVersion\" : 1,\n  \"comment\" : \"Give me 10% discount\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"CancelQuoteRequest","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n                |{\n            \"action\": \"cancelQuoteRequest\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","me","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]}]}]},{"name":"Quotes","description":"The My Quote endpoint provides access to Quotes scoped to a specific user.","item":[{"name":"Get My Quote by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","me","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Quote exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","me","quotes","{{quote-id}}"],"query":[]},"description":"Checks if a Quote exists with the provided `id`. Returns a `200` status if the Quote exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Quote by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","me","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeMyQuoteState\",\n    \"quoteState\" : \"Accepted\"\n  } ]\n}"}},"response":[]},{"name":"Get My Quote by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","me","quotes","key={{quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Quote exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","me","quotes","key={{quote-key}}"],"query":[]},"description":"Checks if a Quote exists with the provided `key`. Returns a `200` status if the Quote exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Quote by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","me","quotes","key={{quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeMyQuoteState\",\n    \"quoteState\" : \"Accepted\"\n  } ]\n}"}},"response":[]},{"name":"Query My Quotes","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes","host":["{{host}}"],"path":["{{project-key}}","me","quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Quote exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes","host":["{{host}}"],"path":["{{project-key}}","me","quotes"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Quotes exist for the provided query predicate. Returns a `200` status if any Quotes match the query predicate, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeMyQuoteState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeMyQuoteState\",\n            \"quoteState\" : \"Accepted\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","me","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]}]}]},{"name":"Shopping-lists","description":"The My Shopping Lists endpoint creates and provides access to Shopping Lists scoped to a specific user.","item":[{"name":"Get My ShoppingList by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists with the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My ShoppingList exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My ShoppingList by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"My shopping list\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete My ShoppingList by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists with the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get My ShoppingList by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `key` for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists with the provided `key`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My ShoppingList exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","key={{shopping-list-key}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `key` for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no ShoppingList exists with the provided `key`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My ShoppingList by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `key`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"My shopping list\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete My ShoppingList by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `key`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query My ShoppingLists","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves ShoppingLists for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided query predicate.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My ShoppingList exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ShoppingLists exist for the provided query predicate for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided query predicate.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My ShoppingList","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a ShoppingList for the authenticated Customer or anonymous user. The `customerId` or `anonymousId` on the ShoppingList is automatically set based on the given [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":"{\n  \"name\" : {\n    \"en\" : \"My shopping list\"\n  },\n  \"description\" : {\n    \"en\" : \"Description of my shopping list\"\n  },\n  \"lineItems\" : [ {\n    \"sku\" : \"product-variant-sku\",\n    \"quantity\" : 5\n  }, {\n    \"productId\" : \"0e131f46-8d1a-4761-9c83-b45ab5d3501e\",\n    \"variantId\" : 2\n  } ],\n  \"textLineItems\" : [ {\n    \"name\" : {\n      \"en\" : \"My shopping list item\"\n    },\n    \"description\" : {\n      \"en\" : \"This is a good gift idea\"\n    },\n    \"quantity\" : 5\n  } ],\n  \"deleteDaysAfterLastModification\" : 100\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLineItem\",\n            \"productId\" : \"{{product-id}}\",\n            \"variantId\" : 1,\n            \"quantity\" : 2\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"AddTextLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addTextLineItem\",\n            \"name\" : {\n              \"de\" : \"German name for text line item\",\n              \"en\" : \"English name for text line item\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 8\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemsOrder\",\n            \"lineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"de\" : \"German name\",\n              \"en\" : \"English name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeTextLineItemName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTextLineItemName\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"name\" : {\n              \"de\" : \"New German text line item name\",\n              \"en\" : \"New English text line item name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeTextLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTextLineItemQuantity\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeTextLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTextLineItemsOrder\",\n            \"textLineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemoveLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 2\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemoveTextLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeTextLineItem\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetDeleteDaysAfterLastModification","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeleteDaysAfterLastModification\",\n            \"deleteDaysAfterLastModification\" : 10\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"en\" : \"New description\",\n              \"de\" : \"Neue Beschreibung\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetTextLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTextLineItemCustomField\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetTextLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTextLineItemCustomType\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetTextLineItemDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{shopping-list-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTextLineItemDescription\",\n            \"textLineItemId\" : \"{{lineItemId}}\",\n            \"description\" : {\n              \"en\" : \"New description\",\n              \"de\" : \"Neue Beschreibung\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList exists for the provided `id`.\n- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]}]}]},{"name":"Get My Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"me-id\", data.results[0].id); ","    pm.environment.set(\"me-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"me-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"me-version\", data.version);","}","if(data.id){","    pm.environment.set(\"me-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"me-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me","host":["{{host}}"],"path":["{{project-key}}","me"],"query":[{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Returns a Customer for a given Query Predicate. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Customer exists for the given Query Predicate.\n- If a Customer exists for the given Query Predicate, but does not have an `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"me-id\", data.results[0].id); ","    pm.environment.set(\"me-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"me-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"me-version\", data.version);","}","if(data.id){","    pm.environment.set(\"me-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"me-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me","host":["{{host}}"],"path":["{{project-key}}","me"],"query":[]},"description":"Updates the Customer specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope. Returns a `200` status if successful.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete My Customer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"me-id\", data.results[0].id); ","    pm.environment.set(\"me-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"me-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"me-version\", data.version);","}","if(data.id){","    pm.environment.set(\"me-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"me-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/me","host":["{{host}}"],"path":["{{project-key}}","me"],"query":[{"key":"version","value":"{{me-version}}","equals":true,"disabled":false}]},"description":"Deletes the Customer specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope. Returns a `200` status if successful.","body":{"mode":"raw","raw":""}},"response":[]}]},{"name":"Extensions","description":"Extend the behavior of an API with your business logic","item":[{"name":"Get Extension by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions/key={{extension-key}}","host":["{{host}}"],"path":["{{project-key}}","extensions","key={{extension-key}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Extension exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions/key={{extension-key}}","host":["{{host}}"],"path":["{{project-key}}","extensions","key={{extension-key}}"],"query":[]},"description":"Checks if an Extension exists with the provided `key`. Returns a `200` status if the Extension exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Extension by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions/key={{extension-key}}","host":["{{host}}"],"path":["{{project-key}}","extensions","key={{extension-key}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"my-new-extension-key\"\n  } ]\n}"}},"response":[]},{"name":"Delete Extension by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions/key={{extension-key}}","host":["{{host}}"],"path":["{{project-key}}","extensions","key={{extension-key}}"],"query":[{"key":"version","value":"{{extension-version}}","equals":true,"disabled":false}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Extension by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions/{{extension-id}}","host":["{{host}}"],"path":["{{project-key}}","extensions","{{extension-id}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Extension exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions/{{extension-id}}","host":["{{host}}"],"path":["{{project-key}}","extensions","{{extension-id}}"],"query":[]},"description":"Checks if an Extension exists with the provided `id`. Returns a `200` status if the Extension exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Extension by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions/{{extension-id}}","host":["{{host}}"],"path":["{{project-key}}","extensions","{{extension-id}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setKey\",\n    \"key\" : \"my-new-extension-key\"\n  } ]\n}"}},"response":[]},{"name":"Delete Extension by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions/{{extension-id}}","host":["{{host}}"],"path":["{{project-key}}","extensions","{{extension-id}}"],"query":[{"key":"version","value":"{{extension-version}}","equals":true,"disabled":false}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Extensions","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions","host":["{{host}}"],"path":["{{project-key}}","extensions"],"query":[{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Extension exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions","host":["{{host}}"],"path":["{{project-key}}","extensions"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Extensions exist for the provided query predicate. Returns a `200` status if any Extensions match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Extension","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"extension-id\", data.results[0].id); ","    pm.environment.set(\"extension-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"extension-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"extension-version\", data.version);","}","if(data.id){","    pm.environment.set(\"extension-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"extension-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/extensions","host":["{{host}}"],"path":["{{project-key}}","extensions"],"query":[]},"description":"null","body":{"mode":"raw","raw":"{\n  \"destination\" : {\n    \"type\" : \"HTTP\",\n    \"url\" : \"https://example.azurewebsites.net/api/extension\",\n    \"authentication\" : {\n      \"type\" : \"AzureFunctions\",\n      \"key\" : \"some-azure-function-code\"\n    }\n  },\n  \"triggers\" : [ {\n    \"resourceTypeId\" : \"cart\",\n    \"actions\" : [ \"Create\", \"Update\" ]\n  } ],\n  \"key\" : \"my-extension\"\n}"}},"response":[]}]},{"name":"Api-clients","description":"Manage your API Clients via an API. Useful for Infrastructure-as-Code tooling, and regularly rotating API secrets.\n","item":[{"name":"Get ApiClient by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"api-client-id\", data.results[0].id); ","    pm.environment.set(\"api-client-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"api-client-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"api-client-version\", data.version);","}","if(data.id){","    pm.environment.set(\"api-client-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"api-client-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/api-clients/{{api-client-id}}","host":["{{host}}"],"path":["{{project-key}}","api-clients","{{api-client-id}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ApiClient exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"api-client-id\", data.results[0].id); ","    pm.environment.set(\"api-client-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"api-client-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"api-client-version\", data.version);","}","if(data.id){","    pm.environment.set(\"api-client-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"api-client-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/api-clients/{{api-client-id}}","host":["{{host}}"],"path":["{{project-key}}","api-clients","{{api-client-id}}"],"query":[]},"description":"Checks if an API Client exists with the provided `id`. Returns a `200` status if the API Client exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Delete ApiClient by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"api-client-id\", data.results[0].id); ","    pm.environment.set(\"api-client-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"api-client-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"api-client-version\", data.version);","}","if(data.id){","    pm.environment.set(\"api-client-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"api-client-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/api-clients/{{api-client-id}}","host":["{{host}}"],"path":["{{project-key}}","api-clients","{{api-client-id}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ApiClients","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"api-client-id\", data.results[0].id); ","    pm.environment.set(\"api-client-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"api-client-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"api-client-version\", data.version);","}","if(data.id){","    pm.environment.set(\"api-client-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"api-client-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/api-clients","host":["{{host}}"],"path":["{{project-key}}","api-clients"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ApiClient exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"api-client-id\", data.results[0].id); ","    pm.environment.set(\"api-client-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"api-client-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"api-client-version\", data.version);","}","if(data.id){","    pm.environment.set(\"api-client-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"api-client-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/api-clients","host":["{{host}}"],"path":["{{project-key}}","api-clients"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if an API Client exists for the provided query predicate. Returns a `200` status if any API Clients match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ApiClient","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"api-client-id\", data.results[0].id); ","    pm.environment.set(\"api-client-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"api-client-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"api-client-version\", data.version);","}","if(data.id){","    pm.environment.set(\"api-client-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"api-client-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/api-clients","host":["{{host}}"],"path":["{{project-key}}","api-clients"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"api-client-name\",\n  \"scope\" : \"view_products:{projectKey}\",\n  \"accessTokenValiditySeconds\" : 3600,\n  \"refreshTokenValiditySeconds\" : 31536000\n}"}},"response":[]}]},{"name":"Stores","description":"Stores let you model the context your customers shop in.","item":[{"name":"Get Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/key={{store-key}}","host":["{{host}}"],"path":["{{project-key}}","stores","key={{store-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Store exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/key={{store-key}}","host":["{{host}}"],"path":["{{project-key}}","stores","key={{store-key}}"],"query":[]},"description":"Checks if a Store exists with the provided `key`. Returns a `200` status if the Store exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/key={{store-key}}","host":["{{host}}"],"path":["{{project-key}}","stores","key={{store-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/key={{store-key}}","host":["{{host}}"],"path":["{{project-key}}","stores","key={{store-key}}"],"query":[{"key":"version","value":"{{store-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Store exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[]},"description":"Checks if a Store exists with the provided `id`. Returns a `200` status if the Store exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"version","value":"{{store-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Stores","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores","host":["{{host}}"],"path":["{{project-key}}","stores"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Store exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores","host":["{{host}}"],"path":["{{project-key}}","stores"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Stores exist for the provided query predicate. Returns a `200` status if any Stores match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores","host":["{{host}}"],"path":["{{project-key}}","stores"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"key\" : \"random-key-123\",\n  \"name\" : {\n    \"en\" : \"main store\"\n  }\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddCountry","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCountry\",\n            \"country\" : {\n              \"code\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"AddDistributionChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDistributionChannel\",\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"12345\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"AddProductSelection","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addProductSelection\",\n            \"productSelection\" : {\n              \"typeId\" : \"product-selection\",\n              \"id\" : \"e7ba4555-b1bb-483d-92d8-2c4a10778427\"\n            },\n            \"active\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"AddSupplyChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addSupplyChannel\",\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"12345\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"ChangeProductSelectionActive","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeProductSelectionActive\",\n            \"productSelection\" : {\n              \"typeId\" : \"product-selection\",\n              \"id\" : \"e7ba4555-b1bb-483d-92d8-2c4a10778427\"\n            },\n            \"active\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"RemoveCountry","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeCountry\",\n            \"country\" : {\n              \"code\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"RemoveDistributionChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDistributionChannel\",\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"12345\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"RemoveProductSelection","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeProductSelection\",\n            \"productSelection\" : {\n              \"typeId\" : \"product-selection\",\n              \"id\" : \"e7ba4555-b1bb-483d-92d8-2c4a10778427\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"RemoveSupplyChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeSupplyChannel\",\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"12345\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"SetCountries","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCountries\",\n            \"countries\" : [ {\n              \"code\" : \"DE\"\n            }, {\n              \"code\" : \"IT\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"SetDistributionChannels","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDistributionChannels\",\n            \"distributionChannels\" : [ {\n              \"typeId\" : \"channel\",\n              \"id\" : \"12345\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"SetLanguages","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLanguages\",\n            \"languages\" : [ \"en\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"SetName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setName\",\n            \"name\" : {\n              \"en\" : \"New Name\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"SetProductSelections","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setProductSelections\",\n            \"productSelections\" : [ {\n              \"productSelection\" : {\n                \"typeId\" : \"product-selection\",\n                \"id\" : \"e7ba4555-b1bb-483d-92d8-2c4a10778427\"\n              },\n              \"active\" : false\n            }, {\n              \"productSelection\" : {\n                \"typeId\" : \"product-selection\",\n                \"id\" : \"a7ba45e5-b1c2-482d-94d5-2c1a10118426\"\n              },\n              \"active\" : true\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]},{"name":"SetSupplyChannels","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"store-id\", data.results[0].id); ","    pm.environment.set(\"store-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"store-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"store-version\", data.version);","}","if(data.id){","    pm.environment.set(\"store-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"store-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{store-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSupplyChannels\",\n            \"supplyChannels\" : [ {\n              \"typeId\" : \"channel\",\n              \"id\" : \"12345\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/stores/{{store-id}}","host":["{{host}}"],"path":["{{project-key}}","stores","{{store-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Stores"},"response":[]}]}]},{"name":"In-store","description":"null","item":[{"name":"Carts","description":"A shopping cart holds product variants and can be ordered.","item":[{"name":"Get Cart in Store by Customer ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/customer-id={{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","customer-id={{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves the most recently modified [active Cart](ctp:api:type:CartState) of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nTo ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists in Store by Customer ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/customer-id={{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","customer-id={{customer-id}}"],"query":[]},"description":"Checks if one or more Carts exist for a Customer in a [Store](ctp:api:type:Store). Returns a `200` status if the Cart exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Cart in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","key={{cart-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"\nRetrieves a Cart with the provided `key` in a [Store](ctp:api:type:Store).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nTo ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","key={{cart-key}}"],"query":[]},"description":"Checks if a Cart exists with the provided `key` in a [Store](ctp:api:type:Store). Returns a `200` status if the Cart exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Cart in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","key={{cart-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addLineItem\",\n    \"productId\" : \"9f10dcfb-5cc9-4a18-843a-c07f7e22d01f\",\n    \"variantId\" : 1,\n    \"quantity\" : 1\n  } ]\n}"}},"response":[]},{"name":"Delete Cart in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/key={{cart-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","key={{cart-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{cart-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a Cart in a [Store](ctp:api:type:Store).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Replicate Cart in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"replicate-id\", data.results[0].id); ","    pm.environment.set(\"replicate-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"replicate-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"replicate-version\", data.version);","}","if(data.id){","    pm.environment.set(\"replicate-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"replicate-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/replicate","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","replicate"],"query":[]},"description":"Creates a new Cart in a [Store](ctp:api:type:Store) by replicating an existing Cart or Order.\n\nThe following applies to the new Cart:\n\n- It contains the same Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the originating Cart or Order.\n- If a Line Item becomes invalid, it is removed from the new Cart. A common reason for this is removed Products or Prices.\n- Line items and Custom Line Items are reset to their initial [state](/projects/carts#itemstate).\n- It contains no payments or delivery information.\n- It contains up-to-date Tax Rates, Prices, and Line Item product data.\n- The [CartState](/projects/carts#cartstate) is `Active`.\n- If using the `customerGroup` field (for a single Customer Group) and the referenced Customer switched to another Customer Group, the new Cart is automatically updated to reflect the new group and corresponding prices.\n- If using the `customerGroupAssignments` field (for multiple Customer Groups), the Cart no longer keeps a direct reference to a Customer Group. If a Customer’s group assignments change, the Cart and its Line Item prices are not updated automatically. Prices are only updated when the Cart is changed via a [direct update action](/projects/carts#update-actions).\n\nSpecific Error Codes:\n\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"reference\" : {\n    \"id\" : \"74dcac8b-0c67-4f37-b693-3acd33e3c457\",\n    \"typeId\" : \"cart\"\n  }\n}"}},"response":[]},{"name":"Get Cart in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a Cart with the provided `id` in a [Store](ctp:api:type:Store).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nTo ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[]},"description":"Checks if a Cart exists with the provided `id` in a Store. Returns a `200` status if the Cart exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Cart in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addLineItem\",\n    \"productId\" : \"9f10dcfb-5cc9-4a18-843a-c07f7e22d01f\",\n    \"variantId\" : 1,\n    \"quantity\" : 1\n  } ]\n}"}},"response":[]},{"name":"Delete Cart in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{cart-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes a Cart in a [Store](ctp:api:type:Store).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Carts in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Carts in a [Store](ctp:api:type:Store).","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Cart exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Carts exist for the provided query predicate in a [Store](ctp:api:type:Store). Returns a `200` status if any Carts match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Cart in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a Cart in a [Store](ctp:api:type:Store).\n\nIf the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match, or if the Shipping Method is not active, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.\n\nSpecific Error Codes:\n\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)\n","body":{"mode":"raw","raw":"{\n  \"currency\" : \"EUR\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddCustomLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCustomLineItem\",\n            \"name\" : {\n              \"en\" : \"Name EN\",\n              \"de\" : \"Name DE\"\n            },\n            \"quantity\" : 1,\n            \"money\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4200\n            },\n            \"slug\" : \"mySlug\",\n            \"taxCategory\" : {\n              \"typeId\" : \"tax-category\",\n              \"id\" : \"{{tax-category-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddCustomShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCustomShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"shippingMethodName\" : \"oneOfCustomShippingMethods\",\n            \"shippingAddress\" : {\n              \"key\" : \"exampleKey\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\"\n            },\n            \"shippingRate\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            },\n            \"taxCategory\" : {\n              \"id\" : \"{{tax-category-id}}\",\n              \"typeId\" : \"tax-category\"\n            },\n            \"deliveries\" : [ ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDiscountCode\",\n            \"code\" : \"mydiscountcode\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLineItem\",\n            \"productId\" : \"{{product-id}}\",\n            \"variantId\" : 2,\n            \"quantity\" : 1,\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"externalTaxRate\" : {\n              \"name\" : \"StandardExternalTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\",\n              \"state\" : \"Bavaria\"\n            },\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddPayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"shippingMethod\" : {\n              \"id\" : \"{{shipping-method-id}}\",\n              \"typeId\" : \"shipping-method\"\n            },\n            \"shippingAddress\" : {\n              \"key\" : \"exampleKey\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\"\n            },\n            \"shippingRateInput\" : {\n              \"type\" : \"Classification\",\n              \"key\" : \"shippingRateString\"\n            },\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddShoppingList","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShoppingList\",\n            \"shoppingList\" : {\n              \"id\" : \"{{shopping-list-id}}\",\n              \"typeId\" : \"shopping-list\"\n            },\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ApplyDeltaToCustomLineItemShippingDetailsTargets","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyDeltaToCustomLineItemShippingDetailsTargets\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"targetsDelta\" : [ {\n              \"addressKey\" : \"addressKeyString\",\n              \"quantity\" : 1\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ApplyDeltaToLineItemShippingDetailsTargets","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyDeltaToLineItemShippingDetailsTargets\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"targetsDelta\" : [ {\n              \"addressKey\" : \"addressKeyString\",\n              \"quantity\" : 1\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeCustomLineItemMoney","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemMoney\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"money\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4200\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeCustomLineItemPriceMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemPriceMode\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"mode\" : \"External\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeCustomLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomLineItemQuantity\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemsOrder\",\n            \"lineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangePriceRoundingMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePriceRoundingMode\",\n            \"priceRoundingMode\" : \"HalfDown\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeTaxCalculationMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxCalculationMode\",\n            \"taxCalculationMode\" : \"LineItemLevel\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeTaxMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxMode\",\n            \"taxMode\" : \"Platform\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeTaxRoundingMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxRoundingMode\",\n            \"taxRoundingMode\" : \"HalfUp\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"FreezeCart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"freezeCart\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"Recalculate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"recalculate\",\n            \"updateProductData\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemoveCustomLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeCustomLineItem\",\n            \"customLineItemId\" : \"{{customLineItemId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemoveDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDiscountCode\",\n            \"discountCode\" : {\n              \"typeId\" : \"discount-code\",\n              \"id\" : \"{{discount-code-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemoveItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeItemShippingAddress\",\n            \"addressKey\" : \"{{addressKey}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemoveLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1,\n            \"externalPrice\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            },\n            \"shippingDetailsToRemove\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemovePayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemoveShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingMethod\",\n            \"shippingKey\" : \"shippingMethodKey1\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetAnonymousId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAnonymousId\",\n            \"anonymousId\" : \"idString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetBillingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetBillingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBusinessUnit\",\n            \"businessUnit\" : {\n              \"key\" : \"{{business-unit-key}}\",\n              \"typeId\" : \"business-unit\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCartTotalTax","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCartTotalTax\",\n            \"externalTotalGross\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 10000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCountry","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCountry\",\n            \"country\" : \"DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomField\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"customLineItemId\" : \"{{customLineItemId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemRecurrenceInfo\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemShippingDetails\",\n            \"customLineItemId\" : \"{{customlineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 1\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemTaxAmount\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"centAmount\" : 2000000,\n                \"currencyCode\" : \"EUR\"\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemTaxRate\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"externalTaxRate\" : {\n              \"name\" : \"TaxRateName\",\n              \"country\" : \"DE\",\n              \"amount\" : 0.19\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomShippingMethod\",\n            \"shippingMethodName\" : \"myCustomShippingMethod\",\n            \"shippingRate\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            },\n            \"taxCategory\" : {\n              \"id\" : \"{{tax-category-id}}\",\n              \"typeId\" : \"tax-category\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomerEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"email\" : \"email@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomerGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerGroup\",\n            \"customerGroup\" : {\n              \"id\" : \"{{customer-group-id}}\",\n              \"typeId\" : \"customer-group\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomerId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerId\",\n            \"customerId\" : \"{{customer-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetDeleteDaysAfterLastModification","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeleteDaysAfterLastModification\",\n            \"deleteDaysAfterLastModification\" : 90\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetDirectDiscounts","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDirectDiscounts\",\n            \"discounts\" : [ {\n              \"value\" : {\n                \"type\" : \"relative\",\n                \"permyriad\" : 1000\n              },\n              \"target\" : {\n                \"type\" : \"lineItems\",\n                \"predicate\" : \"1=1\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetItemShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomField\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetItemShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomType\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"myNewKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemDistributionChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemDistributionChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemInventoryMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemInventoryMode\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"inventoryMode\" : \"TrackOnly\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemPrice\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalPrice\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemRecurrenceInfo\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              },\n              \"priceSelectionMode\" : \"Fixed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemShippingDetails\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 1\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemSupplyChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemSupplyChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTaxAmount\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 100\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTaxRate\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemTotalPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemTotalPrice\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"externalTotalPrice\" : {\n              \"price\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              },\n              \"totalPrice\" : {\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 4200\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomField\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomType\",\n            \"shippingKey\" : \"shippingMethodKey1\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethod\",\n            \"shippingMethod\" : {\n              \"id\" : \"{{shipping-method-id}}\",\n              \"typeId\" : \"shipping-method\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingMethodTaxAmount","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethodTaxAmount\",\n            \"shippingKey\" : \"shipping-method-key\",\n            \"externalTaxAmount\" : {\n              \"totalGross\" : {\n                \"centAmount\" : 2000000,\n                \"currencyCode\" : \"EUR\"\n              },\n              \"taxRate\" : {\n                \"name\" : \"myTaxRate\",\n                \"amount\" : 0.19,\n                \"country\" : \"DE\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingMethodTaxRate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethodTaxRate\",\n            \"shippingKey\" : \"shipping-method-key\",\n            \"externalTaxRate\" : {\n              \"name\" : \"myTaxRate\",\n              \"amount\" : 0.19,\n              \"country\" : \"DE\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingRateInput","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingRateInput\",\n            \"shippingRateInput\" : {\n              \"type\" : \"Classification\",\n              \"key\" : \"shippingRateString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"UnfreezeCart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"unfreezeCart\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"UpdateItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).\n\nIf the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]}]}]},{"name":"Orders","description":"An order can be created from a cart, usually after a checkout process has been completed.","item":[{"name":"Create Order in Store from Quote","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/quotes","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","quotes"],"query":[]},"description":"\nCreates an Order from a [Quote](ctp:api:type:Quote) in a [Store](ctp:api:type:Store). The referenced Quote must have the `Pending` [state](ctp:api:type:QuoteState) and must be valid (not past the `validTo` date); otherwise, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.\n\nProduces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.\n\nSpecific Error Codes:\n\n- [OutOfStock](ctp:api:type:OutOfStockError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [InvalidOperation](ctp:api:type:InvalidOperationError)\n- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)\n","body":{"mode":"raw","raw":"{\n  \"quote\" : {\n    \"id\" : \"40d04a85-34d3-4769-a1b6-ecd00db2a587\",\n    \"typeId\" : \"quote\"\n  },\n  \"version\" : 1\n}"}},"response":[]},{"name":"Get Order in Store by OrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","order-number={{order-number}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an Order with the provided `orderNumber` in a [Store](ctp:api:type:Store).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Order exists in Store by OrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","order-number={{order-number}}"],"query":[]},"description":"Checks if an Order exists with the provided `orderNumber` in a [Store](ctp:api:type:Store). Returns a `200` status if the Order exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Order in Store by OrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","order-number={{order-number}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeOrderState\",\n    \"orderState\" : \"Complete\"\n  } ]\n}"}},"response":[]},{"name":"Delete Order in Store by OrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/order-number={{order-number}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","order-number={{order-number}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{order-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes an Order in a [Store](ctp:api:type:Store).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nDeleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Order in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an Order with the provided `id` in a [Store](ctp:api:type:Store).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Order exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[]},"description":"Checks if an Order exists with the provided `id` in a [Store](ctp:api:type:Store). Returns a `200` status if the Order exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Order in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeOrderState\",\n    \"orderState\" : \"Complete\"\n  } ]\n}"}},"response":[]},{"name":"Delete Order in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{order-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes an Order in a [Store](ctp:api:type:Store).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nDeleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Orders in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Orders in a [Store](ctp:api:type:Store).","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Order exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Orders exist for the provided query predicate in a [Store](ctp:api:type:Store). Returns a `200` status if any Orders match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Order in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates an Order from a Cart in a [Store](ctp:api:type:Store).\nThe Cart must have a shipping address and an active Shipping Method set.\n\nThe shipping address is used for tax calculation for a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode).\n\nCreating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.\n\nIf a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.\nIf you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.\n\nSpecific Error Codes:\n\n- [OutOfStock](ctp:api:type:OutOfStockError)\n- [PriceChanged](ctp:api:type:PriceChangedError)\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [InvalidOperation](ctp:api:type:InvalidOperationError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)\n","body":{"mode":"raw","raw":"{\n  \"cart\" : {\n    \"id\" : \"7c2e2694-aefe-43d7-888e-6a99514caaca\",\n    \"typeId\" : \"cart\"\n  },\n  \"version\" : 10\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDelivery\",\n            \"items\" : [ {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 1\n            } ],\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            },\n            \"parcels\" : [ {\n              \"measurements\" : {\n                \"heightInMillimeter\" : 11,\n                \"widthInMillimeter\" : 11\n              },\n              \"trackingData\" : {\n                \"trackingId\" : \"{{trackingId}}\",\n                \"carrier\" : \"TNT\",\n                \"provider\" : \"providerName\",\n                \"providerTransaction\" : \"{{transactionId}}\",\n                \"isReturn\" : false\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddParcelToDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addParcelToDelivery\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"measurements\" : {\n              \"heightInMillimeter\" : 11,\n              \"widthInMillimeter\" : 11\n            },\n            \"trackingData\" : {\n              \"trackingId\" : \"{{trackingId}}\",\n              \"carrier\" : \"TNT\",\n              \"provider\" : \"providerName\",\n              \"providerTransaction\" : \"{{transactionId}}\",\n              \"isReturn\" : false\n            },\n            \"items\" : {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 2\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddPayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPayment\",\n            \"payment\" : {\n              \"typeId\" : \"payment\",\n              \"id\" : \"{{payment-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"AddReturnInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addReturnInfo\",\n            \"items\" : [ {\n              \"quantity\" : 1,\n              \"lineItemId\" : \"{{lineItemId}}\",\n              \"shipmentState\" : \"Returned\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeOrderState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeOrderState\",\n            \"orderState\" : \"Open\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangePaymentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changePaymentState\",\n            \"paymentState\" : \"Failed\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ChangeShipmentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeShipmentState\",\n            \"shipmentState\" : \"Ready\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ImportCustomLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"importCustomLineItemState\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"state\" : [ {\n              \"quantity\" : 6,\n              \"state\" : {\n                \"typeId\" : \"state\",\n                \"id\" : \"{{state-id}}\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"ImportLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"importLineItemState\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"state\" : [ {\n              \"quantity\" : 5,\n              \"state\" : {\n                \"typeId\" : \"state\",\n                \"id\" : \"{{state-id}}\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemoveDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDelivery\",\n            \"deliveryId\" : \"{{deliveryId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemoveItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeItemShippingAddress\",\n            \"addressKey\" : \"addressKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemoveParcelFromDelivery","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeParcelFromDelivery\",\n            \"parcelId\" : \"{{parcelId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"RemovePayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePayment\",\n            \"payment\" : {\n              \"typeId\" : \"payment\",\n              \"id\" : \"{{payment-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetBillingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetBillingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBusinessUnit\",\n            \"businessUnit\" : {\n              \"key\" : \"{{business-unit-key}}\",\n              \"typeId\" : \"business-unit\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomField\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemCustomType\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemShippingDetails\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomerEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"email\" : \"email@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetCustomerId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerId\",\n            \"customerId\" : \"{{customer-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetDeliveryAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddress\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetDeliveryAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddressCustomField\",\n            \"deliveryId\" : \"{{delivery-id}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetDeliveryAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryAddressCustomType\",\n            \"deliveryId\" : \"{{delivery-id}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetDeliveryCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryCustomField\",\n            \"deliveryId\" : \"exampleDeliveryID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetDeliveryCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryCustomType\",\n            \"deliveryId\" : \"exampleDeliveryID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetDeliveryItems","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeliveryItems\",\n            \"deliveryId\" : \"{{deliveryId}}\",\n            \"items\" : [ {\n              \"id\" : \"{{itemId}}\",\n              \"quantity\" : 2\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetItemShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomField\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetItemShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setItemShippingAddressCustomType\",\n            \"addressKey\" : \"{{address-key}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemShippingDetails\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetOrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setOrderNumber\",\n            \"orderNumber\" : \"myOrderNumber\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetParcelCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelCustomField\",\n            \"parcelId\" : \"exampleParcelID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetParcelCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelCustomType\",\n            \"parcelId\" : \"exampleParcelID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetParcelItems","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelItems\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"items\" : [ {\n              \"id\" : \"{{lineItemId}}\",\n              \"quantity\" : 2\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetParcelMeasurements","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelMeasurements\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"measurements\" : {\n              \"heightInMillimeter\" : 11,\n              \"lengthInMillimeter\" : 11\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetParcelTrackingData","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setParcelTrackingData\",\n            \"parcelId\" : \"{{parcelId}}\",\n            \"trackingData\" : {\n              \"trackingId\" : \"{{trackingId}}\",\n              \"carrier\" : \"TNT\",\n              \"provider\" : \"providerName\",\n              \"providerTransaction\" : \"{{transactionId}}\",\n              \"isReturn\" : false\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetPurchaseOrderNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPurchaseOrderNumber\",\n            \"purchaseOrderNumber\" : \"purchaseOrderNumberString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetReturnInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnInfo\",\n            \"items\" : [ {\n              \"items\" : [ {\n                \"quantity\" : 1,\n                \"lineItemId\" : \"{{lineItemId}}\",\n                \"comment\" : \"any comment\",\n                \"shipmentState\" : \"Returned\"\n              } ],\n              \"returnTrackingId\" : \"returnTrackingId-example\",\n              \"returnDate\" : \"2021-04-30T09:21:15.003Z\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetReturnItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnItemCustomField\",\n            \"returnItemId\" : \"exampleReturnItemID\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetReturnItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnItemCustomType\",\n            \"returnItemId\" : \"exampleReturnItemID\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetReturnPaymentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnPaymentState\",\n            \"returnItemId\" : \"{{returnItemId}}\",\n            \"paymentState\" : \"NotRefunded\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetReturnShipmentState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setReturnShipmentState\",\n            \"returnItemId\" : \"{{returnItemId}}\",\n            \"shipmentState\" : \"BackInStock\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomField\",\n            \"shippingKey\" : \"shipping-key-express\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetShippingCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingCustomType\",\n            \"shippingKey\" : \"shipping-key-express\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"SetStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"TransitionCustomLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionCustomLineItemState\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"quantity\" : 6,\n            \"fromState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            },\n            \"toState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"TransitionLineItemState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionLineItemState\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 3,\n            \"fromState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            },\n            \"toState\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"UpdateItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]},{"name":"UpdateSyncInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{order-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateSyncInfo\",\n            \"channel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).\nIf the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n"},"response":[]}]}]},{"name":"Me","description":"null","item":[{"name":"Carts","description":"A shopping cart holds product variants and can be ordered.","item":[{"name":"Get My Cart in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Returns a Cart for a given `id` in a Store. Returns a `200` status if the Cart exists.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Cart exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Cart in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"addLineItem\",\n    \"productId\" : \"9f10dcfb-5cc9-4a18-843a-c07f7e22d01f\",\n    \"variantId\" : 1,\n    \"quantity\" : 1\n  } ]\n}"}},"response":[]},{"name":"Delete My Cart in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"version","value":"{{cart-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deletes the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists in the Project but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists in the Project but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query My Carts in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Carts for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Cart exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if a Cart exists for a Store that matches the given Query Predicate, and contains a matching `customerId` or `anonymousId`. Returns a `200` status if any Carts match these conditions, or a `404` status otherwise.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My Cart in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"\nCreates a Cart in a Store for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Cart is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n\nThe `store` field in the created [Cart](ctp:api:type:Cart) is set to the Store specified by the `storeKey` path parameter.\n\nSpecific Error Codes:\n\n- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n","body":{"mode":"raw","raw":"{\n  \"currency\" : \"EUR\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addDiscountCode\",\n            \"code\" : \"mydiscountcode\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"AddItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"AddLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addLineItem\",\n            \"productId\" : \"{{product-id}}\",\n            \"variantId\" : 2,\n            \"quantity\" : 1,\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            },\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"AddPayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ApplyDeltaToLineItemShippingDetailsTargets","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyDeltaToLineItemShippingDetailsTargets\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"targetsDelta\" : [ {\n              \"addressKey\" : \"addressKeyString\",\n              \"quantity\" : 1\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeLineItemQuantity","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeLineItemsOrder","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemsOrder\",\n            \"lineItemOrder\" : [ \"{{lineItemId2}}\", \"{{lineItemId}}\" ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"ChangeTaxMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeTaxMode\",\n            \"taxMode\" : \"Platform\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"Recalculate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"recalculate\",\n            \"updateProductData\" : true\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemoveDiscountCode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeDiscountCode\",\n            \"discountCode\" : {\n              \"typeId\" : \"discount-code\",\n              \"id\" : \"{{discount-code-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemoveItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeItemShippingAddress\",\n            \"addressKey\" : \"{{addressKey}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemoveLineItem","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"quantity\" : 1,\n            \"externalPrice\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 4000\n            },\n            \"shippingDetailsToRemove\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"AddressKeyStringFromAddress\",\n                \"quantity\" : 2\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"RemovePayment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePayment\",\n            \"payment\" : {\n              \"id\" : \"{{payment-id}}\",\n              \"typeId\" : \"payment\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setBillingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetBusinessUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n                |{\n            \"action\": \"setBusinessUnit\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCountry","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCountry\",\n            \"country\" : \"DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomLineItemRecurrenceInfo\",\n            \"customLineItemId\" : \"{{customLineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetCustomerEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n                |{\n            \"action\": \"setCustomerEmail\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetDeleteDaysAfterLastModification","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDeleteDaysAfterLastModification\",\n            \"deleteDaysAfterLastModification\" : 90\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomField\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemCustomType\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemDistributionChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemDistributionChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"distributionChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemRecurrenceInfo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemRecurrenceInfo\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"recurrenceInfo\" : {\n              \"recurrencePolicy\" : {\n                \"id\" : \"{{recurrence-policy-id}}\",\n                \"typeId\" : \"recurrence-policy\"\n              },\n              \"priceSelectionMode\" : \"Fixed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemShippingDetails","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemShippingDetails\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"shippingDetails\" : {\n              \"targets\" : [ {\n                \"addressKey\" : \"{{addressKey}}\",\n                \"quantity\" : 1\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLineItemSupplyChannel","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLineItemSupplyChannel\",\n            \"lineItemId\" : \"{{lineItemId}}\",\n            \"supplyChannel\" : {\n              \"typeId\" : \"channel\",\n              \"id\" : \"{{channel-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"SetShippingMethod","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setShippingMethod\",\n            \"shippingMethod\" : {\n              \"id\" : \"{{shipping-method-id}}\",\n              \"typeId\" : \"shipping-method\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]},{"name":"UpdateItemShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-id\", data.results[0].id); ","    pm.environment.set(\"cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"updateItemShippingAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/carts/{{cart-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","carts","{{cart-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Cart exists in the Store for the given `id`.\n- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.\n- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n"},"response":[]}]}]},{"name":"Orders","description":"An order can be created from a order, usually after a checkout process has been completed.","item":[{"name":"Get My Order in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","orders","{{order-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves an Order with the provided `id` in a [Store](ctp:api:type:Store) for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Orders exists in the Store with the provided `id`.\n- If an Order exists but does not have a `store` specified, or the `store` field references a different Store.\n- If an Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Order exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/orders/{{order-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","orders","{{order-id}}"],"query":[]},"description":"Checks if an Order exists with the provided `id` in a [Store](ctp:api:type:Store) for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no Order exists in the Store with the provided `id`.\n- If an Order exists but does not have a `store` specified, or the `store` field references a different Store.\n- If an Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query My Orders in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/orders","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves Orders in a [Store](ctp:api:type:Store) for the authenticated Customer or anonymous user.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Orders exist that match the provided query predicate.\n- If an Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My Order exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/orders","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","orders"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Orders exist for the provided query predicate in a [Store](ctp:api:type:Store) for the authenticated Customer or anonymous user. Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no Orders exist in the Store that match the Query Predicate.\n- If an Order matches the Query Predicate, but no `store` is specified, or the `store` field references a different Store.\n- If an Order matches the Query Predicate, but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My Order in Store from Cart","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"order-id\", data.results[0].id); ","    pm.environment.set(\"order-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"order-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"order-version\", data.version);","}","if(data.id){","    pm.environment.set(\"order-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"order-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/orders","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","orders"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"\nCreates an Order from a Cart in a [Store](ctp:api:type:Store) for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Order is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n\nThe Cart must have a shipping address and an active Shipping Method set.\n\nWhen creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyCarts` [Permission](ctp:api:type:Permission).\n\nIf the Cart's `customerId` does not match the [customer:{id}](/scopes#composable-commerce-oauth) scope, or the `anonymousId` does not match the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.\n\nCreating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.\n\nSpecific Error Codes:\n\n- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)\n- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)\n- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)\n- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)\n- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)\n- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)\n- [OutOfStock](ctp:api:type:OutOfStockError)\n- [PriceChanged](ctp:api:type:PriceChangedError)\n- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)\n","body":{"mode":"raw","raw":"{\n  \"id\" : \"7c2e2694-aefe-43d7-888e-6a99514caaca\",\n  \"version\" : 10\n}"}},"response":[]}]},{"name":"Get My active Cart in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"active-cart-id\", data.results[0].id); ","    pm.environment.set(\"active-cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"active-cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"active-cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"active-cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"active-cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/active-cart","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","active-cart"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves the Customer's most recently modified [active Cart](ctp:api:type:CartState) in a Store. Returns a `200` status if successful.\n\nCarts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no active Cart exists.\n- If an active Cart exists but does not have a `store` specified, or the `store` field references a different Store.\n- If an active Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if active Cart exists in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"active-cart-id\", data.results[0].id); ","    pm.environment.set(\"active-cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"active-cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"active-cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"active-cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"active-cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/active-cart","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","active-cart"],"query":[]},"description":"Checks if an active Cart exists in a Store. Returns `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no active Cart exists in a Store.\n- If an active Cart exists but does not have a `store` specified, or the `store` field references a different Store.\n- If an active Cart exists but does not contain a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Shopping-lists","description":"shopping-lists e.g. for wishlist support\n","item":[{"name":"Get My ShoppingList in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `key` for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList matches the provided `key` in a Store.\n- If a ShoppingList matches the provided `key` but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList matches the provided `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope,\n   or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My ShoppingList exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists","key={{shopping-list-key}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `key` for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no ShoppingList exists that matches the provided `key` in a Store.\n- If a ShoppingList matches the provided `key` but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList matches the provided `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My ShoppingList in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/me-shoppingLists#update-actions). Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList matches the provided `key` in a Store.\n- If a ShoppingList matches the provided `key` but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList matches the provided `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete My ShoppingList in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList in a [Store](ctp:api:type:Store). Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList matches the provided `key` in a Store.\n- If a ShoppingList matches the provided `key` but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList matches the provided `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get My ShoppingList in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `id` for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList matches the provided `id` in a Store.\n- If a ShoppingList matches the provided `id` but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList matches the provided `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My ShoppingList exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `id` for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns a `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no ShoppingList matches the provided `id` in a Store.\n- If a ShoppingList matches the provided `id` but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList matches the provided `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My ShoppingList in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/me-shoppingLists#update-actions). Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList matches the provided `id` in a Store.\n- If a ShoppingList matches the provided `id` but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList matches the provided `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete My ShoppingList in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList in a [Store](ctp:api:type:Store). Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingList matches the provided `id` in a Store.\n- If a ShoppingList matches the provided `id` but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList matches the provided `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query My ShoppingLists in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves ShoppingLists for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no ShoppingLists exist in a Store.\n- If a ShoppingList exists but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList exists in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if My ShoppingList exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ShoppingLists exist for the provided query predicate for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200` status if successful.\n\nA [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:\n\n- If no ShoppingLists exist for the provided query predicate in a Store.\n- If a ShoppingList matches the query predicate but does not have a `store` specified, or the `store` field references a different Store.\n- If a ShoppingList exists in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create My ShoppingList in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"\nCreates a ShoppingList for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). The `customer` or `anonymousId` field on the ShoppingList is automatically set based on the given [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.\n\nWhen using this endpoint, the `store` field of a ShoppingList is always set to the Store specified in the path parameter.\n","body":{"mode":"raw","raw":"{\n  \"name\" : {\n    \"en\" : \"My shopping list\"\n  },\n  \"slug\" : {\n    \"en\" : \"my-shopping-list\"\n  },\n  \"customer\" : {\n    \"typeId\" : \"customer\",\n    \"id\" : \"e73cd97f-846e-44a0-b418-3ed044a8e398\"\n  },\n  \"key\" : \"my-shopping-list\",\n  \"deleteDaysAfterLastModification\" : 100,\n  \"lineItems\" : [ {\n    \"sku\" : \"product-variant-sku\",\n    \"quantity\" : 5\n  }, {\n    \"productId\" : \"0e131f46-8d1a-4761-9c83-b45ab5d3501e\",\n    \"variantId\" : 2\n  } ],\n  \"textLineItems\" : [ {\n    \"name\" : {\n      \"en\" : \"My shopping list item\"\n    },\n    \"description\" : {\n      \"en\" : \"This is a good gift idea\"\n    },\n    \"quantity\" : 5\n  } ],\n  \"businessUnit\" : {\n    \"key\" : \"bu-345-france\",\n    \"typeId\" : \"business-unit\"\n  }\n}"}},"response":[]}]},{"name":"Verify email of My Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"confirm-id\", data.results[0].id); ","    pm.environment.set(\"confirm-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"confirm-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"confirm-version\", data.version);","}","if(data.id){","    pm.environment.set(\"confirm-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"confirm-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/email/confirm","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","email","confirm"],"query":[]},"description":"This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer-in-store). Returns a `200` status if successful.\n\nAfter the email is verified, all email tokens issued previously through the [email verification flow](/../api/projects/customers#email-verification-of-customer) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.\n","body":{"mode":"raw","raw":"{\n  \"tokenValue\" : \"hI_6fkuFIyd_wadz1JmpRGh1vMvgFrlsSJia3G6d\"\n}"}},"response":[]},{"name":"Password","description":"null","item":[{"name":"Reset password of My Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"reset-id\", data.results[0].id); ","    pm.environment.set(\"reset-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"reset-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"reset-version\", data.version);","}","if(data.id){","    pm.environment.set(\"reset-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"reset-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/password/reset","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","password","reset"],"query":[]},"description":"This is the last step in the [password reset process of the authenticated Customer](/../api/projects/customers#password-reset-of-customer-in-store).\n\nResetting a password produces the Customer [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.\n\nAfter the password is reset, all password tokens issued previously through the [password reset flow](/../api/projects/customers#password-reset-of-customer) are invalidated. In addition, any access and refresh tokens issued previously through the [password flow](/../api/authorization#password-flow) and [refresh token flow](/../api/authorization#refresh-token-flow) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.\n","body":{"mode":"raw","raw":"{\n  \"tokenValue\" : \"VRndRV5oCr-pKH2360DnlhqEOVVUZXSAIUXgT5HL\",\n  \"newPassword\" : \"newsecret123\"\n}"}},"response":[]},{"name":"Change password of My Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"password-id\", data.results[0].id); ","    pm.environment.set(\"password-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"password-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"password-version\", data.version);","}","if(data.id){","    pm.environment.set(\"password-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"password-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/password","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","password"],"query":[]},"description":"Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.  Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"currentPassword\" : \"secret123\",\n  \"newPassword\" : \"newSecret456\"\n}"}},"response":[]}]},{"name":"Create (sign up) My Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"signup-id\", data.results[0].id); ","    pm.environment.set(\"signup-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"signup-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"signup-version\", data.version);","}","if(data.id){","    pm.environment.set(\"signup-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"signup-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/signup","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","signup"],"query":[]},"description":"\nIf used with an optional [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly created Customer.\n\nIf omitted in the request body, the [Customer](ctp:api:type:Customer) `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.\n\nA Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#update-a-cart) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).\n\nCreating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\",\n  \"firstName\" : \"John\",\n  \"lastName\" : \"Doe\",\n  \"password\" : \"secret123\"\n}"}},"response":[]},{"name":"Authenticate (sign in) My Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"login-id\", data.results[0].id); ","    pm.environment.set(\"login-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"login-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"login-version\", data.version);","}","if(data.id){","    pm.environment.set(\"login-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"login-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me/login","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me","login"],"query":[]},"description":"\nRetrieves the authenticated Customer (that matches the given email/password pair) if they are part of a specific [Store](ctp:api:type:Store).\n\nIf used with an optional [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly logged-in Customer.\n\n- If the Customer does not have a Cart, the most recently modified anonymous cart becomes the Customer's Cart.\n- If the Customer already has a Cart, the most recently modified anonymous cart is handled according to [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).\n\nA Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#update-a-cart) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).\n\nIf an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\",\n  \"password\" : \"secret123\"\n}"}},"response":[]},{"name":"Get My Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"me-id\", data.results[0].id); ","    pm.environment.set(\"me-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"me-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"me-version\", data.version);","}","if(data.id){","    pm.environment.set(\"me-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"me-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me"],"query":[{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Returns a Customer for a given Query Predicate in a [Store](ctp:api:type:Store). Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Customer exists in the Store for the given Query Predicate.\n- If a Customer exists in the Store for the given Query Predicate, but does not have an `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n- If a Customer exists for the given Query Predicate but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update My Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"me-id\", data.results[0].id); ","    pm.environment.set(\"me-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"me-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"me-version\", data.version);","}","if(data.id){","    pm.environment.set(\"me-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"me-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me"],"query":[]},"description":"Updates the Customer in a [Store](ctp:api:type:Store). Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete My Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"me-id\", data.results[0].id); ","    pm.environment.set(\"me-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"me-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"me-version\", data.version);","}","if(data.id){","    pm.environment.set(\"me-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"me-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/me","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","me"],"query":[{"key":"version","value":"{{me-version}}","equals":true,"disabled":false}]},"description":"Deletes the Customer in a [Store](ctp:api:type:Store). Returns a `200` status if successful.\n\nA [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:\n\n- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.\n- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.\n","body":{"mode":"raw","raw":""}},"response":[]}]},{"name":"Customers","description":"A Customer is a person purchasing products. Carts, Orders,\nComments and Reviews can be associated to a Customer.\n","item":[{"name":"Get Customer in Store by password token","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/password-token={{password-token}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","password-token={{password-token}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Use this method to retrieve a Store-specific Customer's details by using the password reset token during their [password reset process](/../api/customers-overview#customer-password-reset).\n\nIf the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Customer in Store by email token","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/email-token={{email-token}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","email-token={{email-token}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Use this method to retrieve a Store-specific Customer's details by using the email token during their [email verification process](/../api/customers-overview#customer-email-verification).\n\nIf the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create email token for Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"email-token-id\", data.results[0].id); ","    pm.environment.set(\"email-token-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"email-token-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"email-token-version\", data.version);","}","if(data.id){","    pm.environment.set(\"email-token-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"email-token-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/email-token","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","email-token"],"query":[]},"description":"Use this method to create an email token for a Store-specific Customer during their [email verification process](/../api/customers-overview#customer-email-verification).\n\nIf the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nCreating an email token for the Customer produces the [CustomerEmailTokenCreated](ctp:api:type:CustomerEmailTokenCreatedMessage) Message.\nThe Message will include the token's value, if the token's validity is 60 minutes or less.\n","body":{"mode":"raw","raw":"{\n  \"id\" : \"58ae9ffc-7e7b-414c-b060-357749d80c55\",\n  \"ttlMinutes\" : 4320\n}"}},"response":[]},{"name":"Verify email of Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"confirm-id\", data.results[0].id); ","    pm.environment.set(\"confirm-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"confirm-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"confirm-version\", data.version);","}","if(data.id){","    pm.environment.set(\"confirm-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"confirm-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/email/confirm","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","email","confirm"],"query":[]},"description":"Use this method to verify a Store-specific Customer's email during their [email verification process](/../api/customers-overview#customer-email-verification).\n\nVerifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.\n\nIf the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nAfter the email is verified, all email tokens issued previously through the [email verification flow](/../api/projects/customers#email-verification-of-customer) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).\n","body":{"mode":"raw","raw":"{\n  \"tokenValue\" : \"hI_6fkuFIyd_wadz1JmpRGh1vMvgFrlsSJia3G6d\"\n}"}},"response":[]},{"name":"Change password of Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"password-id\", data.results[0].id); ","    pm.environment.set(\"password-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"password-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"password-version\", data.version);","}","if(data.id){","    pm.environment.set(\"password-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"password-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/password","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","password"],"query":[]},"description":"Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.\n","body":{"mode":"raw","raw":"{\n  \"id\" : \"3cdcdcc8-80c5-41bb-abb5-ac8772c9cc24\",\n  \"version\" : 1,\n  \"currentPassword\" : \"secret123\",\n  \"newPassword\" : \"newSecret456\"\n}"}},"response":[]},{"name":"Reset password of Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"reset-id\", data.results[0].id); ","    pm.environment.set(\"reset-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"reset-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"reset-version\", data.version);","}","if(data.id){","    pm.environment.set(\"reset-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"reset-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/password/reset","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","password","reset"],"query":[]},"description":"Use this method to reset a Store-specific Customer's password during their [password reset process](/../api/customers-overview#customer-password-reset).\n\nResetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.\n\nAfter the password is reset, all password tokens issued previously through the [password reset flow](/../api/projects/customers#password-reset-of-customer) are invalidated. In addition, any access and refresh tokens issued previously through the [password flow](/../api/authorization#password-flow) and [refresh token flow](/../api/authorization#refresh-token-flow) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).\n\nIf the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), then this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":"{\n  \"tokenValue\" : \"VRndRV5oCr-pKH2360DnlhqEOVVUZXSAIUXgT5HL\",\n  \"newPassword\" : \"newsecret123\"\n}"}},"response":[]},{"name":"Create password reset token for Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"password-token-id\", data.results[0].id); ","    pm.environment.set(\"password-token-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"password-token-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"password-token-version\", data.version);","}","if(data.id){","    pm.environment.set(\"password-token-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"password-token-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/password-token","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","password-token"],"query":[]},"description":"Use this method to create a password reset token for a Store-specific Customer during their [password reset process](/../api/customers-overview#customer-password-reset).\n\nIf the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nCreating a password reset token for the Customer produces the [CustomerPasswordTokenCreated](ctp:api:type:CustomerPasswordTokenCreatedMessage) Message.\nThe Message will include the token's value, if the token's validity is 60 minutes or less.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\"\n}"}},"response":[]},{"name":"Get Customer in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/key={{customer-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","key={{customer-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Customer exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/key={{customer-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","key={{customer-key}}"],"query":[]},"description":"Checks if a Customer exists with the provided `key`. Returns a `200` status if the Customer exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Customer in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/key={{customer-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","key={{customer-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Customer in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/key={{customer-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","key={{customer-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{customer-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.\n\nIf the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Customer in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Customer exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[]},"description":"Checks if a Customer exists with the provided `id`. Returns a `200` status if the Customer exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Customer in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete Customer in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{customer-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.\n\nIf the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Customers in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Customers exist in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Customers exist for the provided query predicate. Returns a `200` status if any Customers match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create (sign up) Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"When using this endpoint, if omitted, the Customer `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.\n\nIf the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).\nSimilarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.\nIf a Cart with a `store` field specified, the `store` field must reference the same [Store](ctp:api:type:Store) specified in the `{storeKey}` path parameter.\n\nCreating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message. Simultaneously creating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\",\n  \"firstName\" : \"John\",\n  \"lastName\" : \"Doe\",\n  \"password\" : \"secret123\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAddress\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"AddBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"AddCustomerGroupAssignment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addCustomerGroupAssignment\",\n            \"customerGroupAssignment\" : {\n              \"customerGroup\" : {\n                \"id\" : \"{{customer-group-id}}\",\n                \"typeId\" : \"customer-group\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"AddShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"AddStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"ChangeAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAddress\",\n            \"addressId\" : \"{{addressId}}\",\n            \"address\" : {\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"ChangeEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeEmail\",\n            \"email\" : \"email@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"RemoveAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"RemoveBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"RemoveCustomerGroupAssignment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeCustomerGroupAssignment\",\n            \"customerGroup\" : {\n              \"id\" : \"{{customer-group-id}}\",\n              \"typeId\" : \"customer-group\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"RemoveShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"RemoveStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\",\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetAuthenticationMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAuthenticationMode\",\n            \"authMode\" : \"ExternalAuth\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetCompanyName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCompanyName\",\n            \"companyName\" : \"Company Ltd.\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetCustomerGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerGroup\",\n            \"customerGroup\" : {\n              \"id\" : \"{{customer-group-id}}\",\n              \"typeId\" : \"customer-group\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetCustomerGroupAssignments","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerGroupAssignments\",\n            \"customerGroupAssignments\" : [ {\n              \"customerGroup\" : {\n                \"id\" : \"{{customer-group-id-1}}\",\n                \"typeId\" : \"customer-group\"\n              }\n            }, {\n              \"customerGroup\" : {\n                \"id\" : \"{{customer-group-id-2}}\",\n                \"typeId\" : \"customer-group\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetCustomerNumber","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerNumber\",\n            \"customerNumber\" : \"123\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetDateOfBirth","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDateOfBirth\",\n            \"dateOfBirth\" : \"2015-10-21\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetDefaultBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultBillingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetDefaultShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultShippingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetExternalId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setExternalId\",\n            \"externalId\" : \"123\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetFirstName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setFirstName\",\n            \"firstName\" : \"John\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"newKey\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetLastName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLastName\",\n            \"lastName\" : \"Person\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetLocale","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setLocale\",\n            \"locale\" : \"de-DE\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetMiddleName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setMiddleName\",\n            \"middleName\" : \"middleName\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetSalutation","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSalutation\",\n            \"salutation\" : \"Mr\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetStores","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStores\",\n            \"stores\" : [ {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetTitle","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setTitle\",\n            \"title\" : \"Dr\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]},{"name":"SetVatId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{customer-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setVatId\",\n            \"vatId\" : \"vatId\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/customers/{{customer-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","customers","{{customer-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.\n\nSimultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.\n"},"response":[]}]}]},{"name":"Authenticate (sign in) Customer in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"login-id\", data.results[0].id); ","    pm.environment.set(\"login-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"login-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"login-version\", data.version);","}","if(data.id){","    pm.environment.set(\"login-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"login-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/login","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","login"],"query":[]},"description":"Authenticates a Customer associated with a [Store](ctp:api:type:Store). For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).\n\nA Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#update-a-cart) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).\n\nTriggers [Cart merge during sign-in](/../api/customers-overview#cart-merge-during-sign-in).\n\nIf the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error.\n","body":{"mode":"raw","raw":"{\n  \"email\" : \"johndoe@example.com\",\n  \"password\" : \"secret123\",\n  \"anonymousCart\" : {\n    \"id\" : \"{{cart-id}}\",\n    \"typeId\" : \"cart\"\n  }\n}"}},"response":[]},{"name":"Shipping-methods","description":"null","item":[{"name":"Get matching ShippingMethods for a Cart in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-cart-id\", data.results[0].id); ","    pm.environment.set(\"matching-cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shipping-methods/matching-cart","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shipping-methods","matching-cart"],"query":[{"key":"cartId","value":"","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves the active ShippingMethods that can ship to the shipping address of the given Cart in a given [Store](ctp:api:type:Store).\nEach ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.\nThis ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).\nIf a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if matching ShippingMethod exists for a Cart in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"matching-cart-id\", data.results[0].id); ","    pm.environment.set(\"matching-cart-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"matching-cart-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"matching-cart-version\", data.version);","}","if(data.id){","    pm.environment.set(\"matching-cart-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"matching-cart-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shipping-methods/matching-cart","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shipping-methods","matching-cart"],"query":[{"key":"cartId","value":"","equals":true,"disabled":false}]},"description":"Checks if an active ShippingMethod that can ship to the shipping address of the given Cart exists in the given [Store](ctp:api:type:Store). Returns a `200` status if the ShippingMethod exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]}]},{"name":"Shopping-lists","description":"shopping-lists e.g. for wishlist support\n","item":[{"name":"Get ShoppingList in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `key` in a [Store](ctp:api:type:Store).\nIf a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,\nthe [ResourceNotFound](/errors#404-not-found-1) error is returned.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `key` in a [Store](ctp:api:type:Store). Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ShoppingList in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/shoppingLists#update-actions).\nIf a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,\nthe [ResourceNotFound](/errors#404-not-found-1) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ShoppingList in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists/key={{shopping-list-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists","key={{shopping-list-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList in a [Store](ctp:api:type:Store).\nIf a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,\nthe [ResourceNotFound](/errors#404-not-found-1) error is returned.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get ShoppingList in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Retrieves a ShoppingList with the provided `id` in a [Store](ctp:api:type:Store).\nIf a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,\nthe [ResourceNotFound](/errors#404-not-found-1) error is returned.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists","{{shopping-list-id}}"],"query":[]},"description":"Checks if a ShoppingList exists with the provided `id` in a [Store](ctp:api:type:Store). Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update ShoppingList in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates a ShoppingList in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/shoppingLists#update-actions).\nIf a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,\nthe [ResourceNotFound](/errors#404-not-found-1) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"New Name\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete ShoppingList in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists/{{shopping-list-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists","{{shopping-list-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{shopping-list-version}}","equals":true,"disabled":false}]},"description":"Deletes a ShoppingList in a [Store](ctp:api:type:Store).\nIf a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,\nthe [ResourceNotFound](/errors#404-not-found-1) error is returned.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query ShoppingLists in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Retrieves ShoppingLists in a [Store](ctp:api:type:Store).","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if ShoppingList exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more ShoppingLists exist for the provided query predicate in a [Store](ctp:api:type:Store). Returns a `200` status if any ShoppingLists match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create ShoppingList in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"shopping-list-id\", data.results[0].id); ","    pm.environment.set(\"shopping-list-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"shopping-list-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"shopping-list-version\", data.version);","}","if(data.id){","    pm.environment.set(\"shopping-list-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"shopping-list-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/shopping-lists","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","shopping-lists"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a ShoppingList in a [Store](ctp:api:type:Store).\nWhen using this endpoint, the `store` field of a ShoppingList is always set to the [Store](ctp:api:type:Store) specified in the path parameter.\n","body":{"mode":"raw","raw":"{\n  \"name\" : {\n    \"en\" : \"My shopping list\"\n  },\n  \"slug\" : {\n    \"en\" : \"my-shopping-list\"\n  },\n  \"customer\" : {\n    \"typeId\" : \"customer\",\n    \"id\" : \"e73cd97f-846e-44a0-b418-3ed044a8e398\"\n  },\n  \"key\" : \"my-shopping-list\",\n  \"deleteDaysAfterLastModification\" : 100,\n  \"lineItems\" : [ {\n    \"sku\" : \"product-variant-sku\",\n    \"quantity\" : 5\n  }, {\n    \"productId\" : \"0e131f46-8d1a-4761-9c83-b45ab5d3501e\",\n    \"variantId\" : 2\n  } ],\n  \"textLineItems\" : [ {\n    \"name\" : {\n      \"en\" : \"My shopping list item\"\n    },\n    \"description\" : {\n      \"en\" : \"This is a good gift idea\"\n    },\n    \"quantity\" : 5\n  } ],\n  \"businessUnit\" : {\n    \"key\" : \"bu-345-france\",\n    \"typeId\" : \"business-unit\"\n  }\n}"}},"response":[]}]},{"name":"Product-projections","description":"null","item":[{"name":"Gets the current or staged representation of a product by its key from a specific Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/product-projections/key={{product-projection-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","product-projections","key={{product-projection-key}}"],"query":[{"key":"staged","value":"","equals":true,"disabled":true},{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"localeProjection","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key in the specified [Store](ctp:api:type:Store).\nIf the Store has defined some languages, countries, distribution, supply Channels, and/or Product Selection,\nthey are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices),\nand [inventory](ctp:api:type:ProductProjectionInventoryEntries).\n\nIf [ProductSelection](ctp:api:type:ProductSelection) is used, it affects the [availability of the Product](/projects/stores#products-available-in-store) in the specified Store.\n\nIf a [ProductTailoring](ctp:api:type:ProductTailoring) exists for the Product with the given `key` and the given Store, this endpoint returns the ProductProjection with tailored data.\n\nWhen used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check ProductProjection exists by key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/product-projections/key={{product-projection-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","product-projections","key={{product-projection-key}}"],"query":[]},"description":"Checks if the current or staged representations of a Product exists with the provided `key` in the specified [Store](ctp:api:type:Store). Returns a `200` status if the ProductProjection exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Gets the current or staged representation of a product by its ID from a specific Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/product-projections/{{product-projection-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","product-projections","{{product-projection-id}}"],"query":[{"key":"staged","value":"","equals":true,"disabled":true},{"key":"priceCurrency","value":"","equals":true,"disabled":true},{"key":"priceCountry","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroup","value":"","equals":true,"disabled":true},{"key":"priceCustomerGroupAssignments","value":"","equals":true,"disabled":true},{"key":"priceChannel","value":"","equals":true,"disabled":true},{"key":"priceRecurrencePolicy","value":"","equals":true,"disabled":true},{"key":"localeProjection","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID in the specified [Store](ctp:api:type:Store).\nIf the Store has defined some languages, countries, distribution, supply Channels, and/or Product Selection,\nthey are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices),\nand [inventory](ctp:api:type:ProductProjectionInventoryEntries).\n\nIf [ProductSelection](ctp:api:type:ProductSelection) is used, it affects the [availability of the Product](/projects/stores#products-available-in-store) in the specified Store.\n\nIf a [ProductTailoring](ctp:api:type:ProductTailoring) exists for the Product with the given `id` and the given Store, this endpoint returns the ProductProjection with tailored data.\n\nWhen used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check ProductProjection exists by id","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-projection-id\", data.results[0].id); ","    pm.environment.set(\"product-projection-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-projection-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-projection-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-projection-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-projection-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/product-projections/{{product-projection-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","product-projections","{{product-projection-id}}"],"query":[]},"description":"Checks if the current or staged representations of a Product exists with the provided `id` in the specified [Store](ctp:api:type:Store). Returns a `200` status if the ProductProjection exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]}]},{"name":"Query available products in store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-selection-assignment-id\", data.results[0].id); ","    pm.environment.set(\"product-selection-assignment-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-selection-assignment-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-selection-assignment-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-selection-assignment-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-selection-assignment-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/product-selection-assignments","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","product-selection-assignments"],"query":[{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"Queries Product Selection assignments in a specific [Store](ctp:api:type:Store).\n\nThe response will include duplicate Products whenever more than one active Product Selection of the Store\nincludes a Product. To make clear through which Product Selection a Product is available in the Store\nthe response contains assignments including both the Product and the Product Selection.\nOnly Products of Product Selections that are activated in the Store will be returned.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Cart-discounts","description":"null","item":[{"name":"Get CartDiscount in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts/key={{cart-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts","key={{cart-discount-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CartDiscount exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts/key={{cart-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts","key={{cart-discount-key}}"],"query":[]},"description":"Checks if a CartDiscount exists with the provided `key`. Returns a `200` status if the CartDiscount exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update CartDiscount in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts/key={{cart-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts","key={{cart-discount-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"To update a CartDiscount, you must have permissions for all Stores the CartDiscount is associated with, except when [removing a Store](ctp:api:type:CartDiscountRemoveStoreAction).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeValue\",\n    \"value\" : {\n      \"type\" : \"relative\",\n      \"permyriad\" : 1500\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete CartDiscount in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts/key={{cart-discount-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts","key={{cart-discount-key}}"],"query":[{"key":"version","value":"{{cart-discount-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"To delete a CartDiscount, specify the `manage_cart_discounts:{projectKey}:{storeKey}` scope for all Stores associated with the CartDiscount.\n\nDeleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get CartDiscount in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CartDiscount exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts","{{cart-discount-id}}"],"query":[]},"description":"Checks if a CartDiscount exists with the provided `id`. Returns a `200` status if the CartDiscount exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update CartDiscount in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"To update a CartDiscount, you must have permissions for all Stores the CartDiscount is associated with, except when [removing a Store](ctp:api:type:CartDiscountRemoveStoreAction).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeValue\",\n    \"value\" : {\n      \"type\" : \"relative\",\n      \"permyriad\" : 1500\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete CartDiscount in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts/{{cart-discount-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts","{{cart-discount-id}}"],"query":[{"key":"version","value":"{{cart-discount-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"To delete a CartDiscount, specify the `manage_cart_discounts:{projectKey}:{storeKey}` scope for all Stores associated with the CartDiscount.\n\nDeleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query CartDiscounts in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if CartDiscount exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more CartDiscounts exist for the provided query predicate. Returns a `200` status if any CartDiscounts match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create CartDiscount in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"cart-discount-id\", data.results[0].id); ","    pm.environment.set(\"cart-discount-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"cart-discount-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"cart-discount-version\", data.version);","}","if(data.id){","    pm.environment.set(\"cart-discount-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"cart-discount-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/cart-discounts","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","cart-discounts"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"When using the endpoint, the Store specified in the path and the Stores specified in the payload's `stores` field are added to the CartDiscount.\n\nCreating a Cart Discount produces the [CartDiscountCreated](ctp:api:type:CartDiscountCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"black-friday-sale\",\n  \"name\" : {\n    \"en\" : \"Black Friday Sale\"\n  },\n  \"description\" : {\n    \"en\" : \"10% discount on all items in cart\"\n  },\n  \"value\" : {\n    \"type\" : \"relative\",\n    \"permyriad\" : 1000\n  },\n  \"cartPredicate\" : \"lineItemTotal(true = true) >= \\\"500.00 USD\\\"\",\n  \"target\" : {\n    \"type\" : \"lineItems\",\n    \"predicate\" : \"categories.id = (\\\"{{category-id}}\\\")\"\n  },\n  \"sortOrder\" : \"0.01\",\n  \"stores\" : [ {\n    \"key\" : \"europe\",\n    \"typeId\" : \"store\"\n  } ],\n  \"isActive\" : true,\n  \"requiresDiscountCode\" : true,\n  \"stackingMode\" : \"Stacking\"\n}"}},"response":[]}]},{"name":"Query available product tailoring in store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","product-tailoring"],"query":[{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"expand","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true}]},"description":"Queries Product Tailoring in a specific [Store](ctp:api:type:Store).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Product Tailoring in store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","product-tailoring"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creates a [ProductTailoring](ctp:api:type:ProductTailoring) in the [Store](ctp:api:type:Store) specified by `storeKey`.\nWhen using this endpoint the ProductTailoring's `store` field is always set to the [Store](ctp:api:type:Store) specified in the path parameter.\n\nGenerates the [ProductTailoringCreated](ctp:api:type:ProductTailoringCreatedMessage) Message.\n","body":{"mode":"raw","raw":"{\n  \"product\" : {\n    \"typeId\" : \"product\",\n    \"id\" : \"daf720e5-9e8e-4300-98db-3a3219327db9\"\n  },\n  \"name\" : {\n    \"en\" : \"tailored name\"\n  },\n  \"metaTitle\" : {\n    \"en\" : \"tailored meta title\"\n  },\n  \"metaDescription\" : {\n    \"en\" : \"tailored meta description\"\n  },\n  \"metaKeywords\" : {\n    \"en\" : \"tailored meta keywords\"\n  },\n  \"slug\" : {\n    \"en\" : \"tailored-slug\"\n  },\n  \"description\" : {\n    \"en\" : \"tailored description\"\n  },\n  \"variants\" : [ {\n    \"id\" : 1,\n    \"images\" : [ {\n      \"url\" : \"//myimage.jpg\",\n      \"dimensions\" : {\n        \"w\" : 400,\n        \"h\" : 300\n      }\n    } ],\n    \"attributes\" : [ {\n      \"name\" : \"my-attribute\",\n      \"value\" : \"attribute-1\"\n    } ]\n  }, {\n    \"sku\" : \"sku-1\",\n    \"images\" : [ {\n      \"url\" : \"//myimage-2.png\",\n      \"dimensions\" : {\n        \"w\" : 400,\n        \"h\" : 300\n      }\n    } ],\n    \"attributes\" : [ {\n      \"name\" : \"my-attribute\",\n      \"value\" : \"attribute-2\"\n    } ]\n  } ],\n  \"publish\" : false\n}"}},"response":[]},{"name":"Products","description":"null","item":[{"name":"Product-tailoring","description":"null","item":[{"name":"Upload a Product Tailoring image","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"image-id\", data.results[0].id); ","    pm.environment.set(\"image-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"image-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"image-version\", data.version);","}","if(data.id){","    pm.environment.set(\"image-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"image-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/products/{{product-id}}/product-tailoring/images","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","products","{{product-id}}","product-tailoring","images"],"query":[{"key":"filename","value":"","equals":true,"disabled":true},{"key":"variant","value":"","equals":true,"disabled":true},{"key":"sku","value":"","equals":true,"disabled":true},{"key":"staged","value":"","equals":true,"disabled":true}]},"description":"Uploads a JPEG, PNG and GIF file to a [ProductVariantTailoring](ctp:api:type:ProductVariantTailoring).\nThe maximum file size of the image is **10MB**.\nEither `variant` or `sku` is required to update a specific ProductVariant.\nIf neither is provided, the image is uploaded to the Master Variant of the Product.\n\nThe response status code depends on the size of the original image.\nIf the image is small, the API responds with `200 OK`, and if the image is larger, it responds with `202 Accepted`.\nThe Product returned with a `202 Accepted` status code contains a `warnings` field with an [ImageProcessingOngoing](ctp:api:type:ImageProcessingOngoingWarning) Warning.\n\nProduces the [ProductTailoringImageAdded](/projects/messages/product-catalog-messages#product-tailoring-image-added) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Gets the current or staged representation of a Product Tailoring by its Product ID from a specific Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/products/{{product-id}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","products","{{product-id}}","product-tailoring"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Gets the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product ID in the specified [Store](ctp:api:type:Store).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update a Product Tailoring by its Product ID from a specific Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/products/{{product-id}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","products","{{product-id}}","product-tailoring"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product ID in the specified [Store](ctp:api:type:Store).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setDescription\",\n    \"description\" : {\n      \"en\" : \"A description\"\n    },\n    \"staged\" : true\n  } ]\n}"}},"response":[]},{"name":"Delete a Product Tailoring by its Product ID from a specific Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/products/{{product-id}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","products","{{product-id}}","product-tailoring"],"query":[{"key":"version","value":"{{product-tailoring-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]}]},{"name":"Product-tailoring","description":"null","item":[{"name":"Upload a Product Tailoring image","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"image-id\", data.results[0].id); ","    pm.environment.set(\"image-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"image-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"image-version\", data.version);","}","if(data.id){","    pm.environment.set(\"image-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"image-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/products/key={{product-key}}/product-tailoring/images","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","products","key={{product-key}}","product-tailoring","images"],"query":[{"key":"filename","value":"","equals":true,"disabled":true},{"key":"variant","value":"","equals":true,"disabled":true},{"key":"sku","value":"","equals":true,"disabled":true},{"key":"staged","value":"","equals":true,"disabled":true}]},"description":"Uploads a JPEG, PNG and GIF file to a [ProductVariantTailoring](ctp:api:type:ProductVariantTailoring).\nThe maximum file size of the image is **10MB**.\nEither `variant` or `sku` is required to update a specific ProductVariant.\nIf neither is provided, the image is uploaded to the Master Variant of the Product.\n\nThe response status code depends on the size of the original image.\nIf the image is small, the API responds with `200 OK`, and if the image is larger, it responds with `202 Accepted`.\nThe Product returned with a `202 Accepted` status code contains a `warnings` field with an [ImageProcessingOngoing](ctp:api:type:ImageProcessingOngoingWarning) Warning.\n\nProduces the [ProductTailoringImageAdded](/projects/messages/product-catalog-messages#product-tailoring-image-added) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Gets the current or staged representation of a Product Tailoring by its Product key from a specific Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/products/key={{product-key}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","products","key={{product-key}}","product-tailoring"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Gets the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product key in the specified [Store](ctp:api:type:Store).\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update a Product Tailoring by its Product key from a specific Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/products/key={{product-key}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","products","key={{product-key}}","product-tailoring"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Updates the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product key in the specified [Store](ctp:api:type:Store).\n","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"setDescription\",\n    \"description\" : {\n      \"en\" : \"A description\"\n    },\n    \"staged\" : true\n  } ]\n}"}},"response":[]},{"name":"Delete a Product Tailoring by its Product key from a specific Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"product-tailoring-id\", data.results[0].id); ","    pm.environment.set(\"product-tailoring-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"product-tailoring-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"product-tailoring-version\", data.version);","}","if(data.id){","    pm.environment.set(\"product-tailoring-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"product-tailoring-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/products/key={{product-key}}/product-tailoring","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","products","key={{product-key}}","product-tailoring"],"query":[{"key":"version","value":"{{product-tailoring-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]}]}]},{"name":"Quote-requests","description":"A request for a Quote holds product variants and can be ordered.","item":[{"name":"Get QuoteRequest in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","key={{quote-request-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","key={{quote-request-key}}"],"query":[]},"description":"Checks if a QuoteRequest exists with the provided `key`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update QuoteRequest in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","key={{quote-request-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteRequestState\",\n    \"quoteRequestState\" : \"Cancelled\"\n  } ]\n}"}},"response":[]},{"name":"Delete QuoteRequest in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/key={{quote-request-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","key={{quote-request-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{quote-request-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get QuoteRequest in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[]},"description":"Checks if a QuoteRequest exists with the provided `id`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update QuoteRequest in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteRequestState\",\n    \"quoteRequestState\" : \"Cancelled\"\n  } ]\n}"}},"response":[]},{"name":"Delete QuoteRequest in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{quote-request-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query QuoteRequests in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if QuoteRequest exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more QuoteRequests exist for the provided query predicate. Returns a `200` status if any QuoteRequests match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create QuoteRequest in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"","body":{"mode":"raw","raw":"{\n  \"cart\" : {\n    \"typeId\" : \"cart\",\n    \"id\" : \"168e5783-73c8-4f2d-91f4-3c90b872c708\"\n  },\n  \"cartVersion\" : 1,\n  \"comment\" : \"Give me 10% discount\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"900bcbef-77e6-4739-8fdf-c3511d14b32a\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]},{"name":"ChangeQuoteRequestState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeQuoteRequestState\",\n            \"quoteRequestState\" : \"Rejected\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-request-id\", data.results[0].id); ","    pm.environment.set(\"quote-request-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-request-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-request-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-request-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-request-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-request-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quote-requests/{{quote-request-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quote-requests","{{quote-request-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post QuoteRequests"},"response":[]}]}]},{"name":"Staged-quotes","description":"A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).","item":[{"name":"Get StagedQuote in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/key={{staged-quote-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","key={{staged-quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StagedQuote exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/key={{staged-quote-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","key={{staged-quote-key}}"],"query":[]},"description":"Checks if a StagedQuote exists with the provided `key`. Returns a `200` status if the StagedQuote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update StagedQuote in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/key={{staged-quote-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","key={{staged-quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeStagedQuoteState\",\n    \"stagedQuoteState\" : \"Sent\"\n  } ]\n}"}},"response":[]},{"name":"Delete StagedQuote in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/key={{staged-quote-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","key={{staged-quote-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{staged-quote-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get StagedQuote in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StagedQuote exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[]},"description":"Checks if a StagedQuote exists with the provided `id`. Returns a `200` status if the StagedQuote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update StagedQuote in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeStagedQuoteState\",\n    \"stagedQuoteState\" : \"Sent\"\n  } ]\n}"}},"response":[]},{"name":"Delete StagedQuote in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{staged-quote-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query StagedQuotes in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StagedQuote exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more StagedQuotes exist for the provided query predicate. Returns a `200` status if any StagedQuotes match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create StagedQuote in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"quoteRequest\" : {\n    \"typeId\" : \"quote-request\",\n    \"id\" : \"168e5783-73c8-4f2d-91f4-3c90b872c708\"\n  },\n  \"quoteRequestVersion\" : 1\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeStagedQuoteState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeStagedQuoteState\",\n            \"stagedQuoteState\" : \"Sent\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"SetSellerComment","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setSellerComment\",\n            \"sellerComment\" : \"Please let me know if this matches your expectations\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"SetValidTo","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidTo\",\n            \"validTo\" : \"2022-09-22T15:41:55.816Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"staged-quote-id\", data.results[0].id); ","    pm.environment.set(\"staged-quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"staged-quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"staged-quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"staged-quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"staged-quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{staged-quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/staged-quotes/{{staged-quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","staged-quotes","{{staged-quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StagedQuotes"},"response":[]}]}]},{"name":"Quotes","description":"A quote holds the negotiated offer.","item":[{"name":"Get Quote in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","key={{quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","key={{quote-key}}"],"query":[]},"description":"Checks if a Quote exists with the provided `key`. Returns a `200` status if the Quote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Quote in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","key={{quote-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteState\",\n    \"quoteState\" : \"Accepted\"\n  } ]\n}"}},"response":[]},{"name":"Delete Quote in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/key={{quote-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","key={{quote-key}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{quote-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Quote in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[]},"description":"Checks if a Quote exists with the provided `id`. Returns a `200` status if the Quote exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Quote in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeQuoteState\",\n    \"quoteState\" : \"Accepted\"\n  } ]\n}"}},"response":[]},{"name":"Delete Quote in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"dataErasure","value":"","equals":true,"disabled":true},{"key":"version","value":"{{quote-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query Quotes in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Quote exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more Quotes exist for the provided query predicate. Returns a `200` status if any Quotes match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create Quote in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"stagedQuote\" : {\n    \"typeId\" : \"staged-quote\",\n    \"id\" : \"2a3baa00-44fa-4ab8-bec7-933c31e18dcc\"\n  },\n  \"stagedQuoteVersion\" : 1\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"ChangeCustomer","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeCustomer\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"43ddac22-3daa-4689-8975-9f80750ea2e7\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"ChangeQuoteState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeQuoteState\",\n            \"quoteState\" : \"Accepted\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"RequestQuoteRenegotiation","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"requestQuoteRenegotiation\",\n            \"buyerComment\" : \"Please also give me a 10% discount on the red T-shirts.\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]},{"name":"TransitionState","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"quote-id\", data.results[0].id); ","    pm.environment.set(\"quote-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"quote-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"quote-version\", data.version);","}","if(data.id){","    pm.environment.set(\"quote-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"quote-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{quote-version}},\n    \"actions\": [\n        {\n            \"action\" : \"transitionState\",\n            \"state\" : {\n              \"typeId\" : \"state\",\n              \"id\" : \"{{state-id}}\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/quotes/{{quote-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","quotes","{{quote-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post Quotes"},"response":[]}]}]},{"name":"Business-units","description":"A Business Unit can represent a Company or a Division.","item":[{"name":"Get BusinessUnit in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","key={{business-unit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","key={{business-unit-key}}"],"query":[]},"description":"Checks if a BusinessUnit exists with the provided `key`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update BusinessUnit in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","key={{business-unit-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete BusinessUnit in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/key={{business-unit-key}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","key={{business-unit-key}}"],"query":[{"key":"version","value":"{{business-unit-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get BusinessUnit in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[]},"description":"Checks if a BusinessUnit exists with the provided `id`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update BusinessUnit in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 3,\n  \"actions\" : [ {\n    \"action\" : \"addAddress\",\n    \"address\" : {\n      \"streetName\" : \"Any Street\",\n      \"streetNumber\" : \"1337\",\n      \"postalCode\" : \"11111\",\n      \"city\" : \"Any City\",\n      \"country\" : \"US\"\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete BusinessUnit in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"version","value":"{{business-unit-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Associate in BusinessUnit in Store by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-id\", data.results[0].id); ","    pm.environment.set(\"associate-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/key={{associate-key}}/associates/{{associate-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","key={{associate-key}}","associates","{{associate-id}}"],"query":[]},"description":"Retrieves roles and permissions of an Associate in a Business Unit in a Store.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get Associate in BusinessUnit in Store by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"associate-id\", data.results[0].id); ","    pm.environment.set(\"associate-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"associate-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"associate-version\", data.version);","}","if(data.id){","    pm.environment.set(\"associate-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"associate-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}/associates/{{associate-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}","associates","{{associate-id}}"],"query":[]},"description":"Retrieves roles and permissions of an Associate in a Business Unit in a Store.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query BusinessUnits in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if BusinessUnit exists in Store by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more BusinessUnits exist for the provided query predicate. Returns a `200` status if any BusinessUnits match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create BusinessUnit in Store","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : \"commercetools\",\n  \"unitType\" : \"Company\",\n  \"key\" : \"commercetools\"\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAddress\",\n            \"address\" : {\n              \"id\" : \"exampleAddress\",\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"mail@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAssociate\",\n            \"associate\" : {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              }, {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"AddStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAddress\",\n            \"addressId\" : \"{{addressId}}\",\n            \"address\" : {\n              \"id\" : \"exampleAddress\",\n              \"key\" : \"exampleKey\",\n              \"title\" : \"My Address\",\n              \"salutation\" : \"Mr.\",\n              \"firstName\" : \"Example\",\n              \"lastName\" : \"Person\",\n              \"streetName\" : \"Example Street\",\n              \"streetNumber\" : \"4711\",\n              \"additionalStreetInfo\" : \"Backhouse\",\n              \"postalCode\" : \"80933\",\n              \"city\" : \"Exemplary City\",\n              \"region\" : \"Exemplary Region\",\n              \"state\" : \"Exemplary State\",\n              \"country\" : \"DE\",\n              \"company\" : \"My Company Name\",\n              \"department\" : \"Sales\",\n              \"building\" : \"Hightower 1\",\n              \"apartment\" : \"247\",\n              \"pOBox\" : \"2471\",\n              \"phone\" : \"+49 89 12345678\",\n              \"mobile\" : \"+49 171 2345678\",\n              \"email\" : \"email@example.com\",\n              \"fax\" : \"+49 89 12345679\",\n              \"additionalAddressInfo\" : \"no additional Info\",\n              \"externalId\" : \"Information not needed\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeApprovalRuleMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeApprovalRuleMode\",\n            \"approvalRuleMode\" : \"Explicit\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeAssociate\",\n            \"associate\" : {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              }, {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeAssociateMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n                |{\n            \"action\": \"changeAssociateMode\"\n        }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : \"commercetools\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeParentUnit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeParentUnit\",\n            \"parentUnit\" : {\n              \"typeId\" : \"business-unit\",\n              \"key\" : \"commercetools\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"ChangeStatus","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeStatus\",\n            \"status\" : \"Inactive\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveAssociate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAssociate\",\n            \"customer\" : {\n              \"typeId\" : \"customer\",\n              \"id\" : \"some-customer-id\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveBillingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeBillingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveShippingAddressId","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeShippingAddressId\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"RemoveStore","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeStore\",\n            \"store\" : {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAddressCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\",\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAddressCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAddressCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            },\n            \"addressId\" : \"{{address-id}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetAssociates","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAssociates\",\n            \"associates\" : [ {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"some-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"admin\"\n                },\n                \"inheritance\" : \"Enabled\"\n              } ]\n            }, {\n              \"customer\" : {\n                \"typeId\" : \"customer\",\n                \"id\" : \"another-customer-id\"\n              },\n              \"associateRoleAssignments\" : [ {\n                \"associateRole\" : {\n                  \"typeId\" : \"associate-role\",\n                  \"key\" : \"buyer\"\n                }\n              } ]\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetContactEmail","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setContactEmail\",\n            \"contactEmail\" : \"contact@example.com\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetDefaultBillingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultBillingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetDefaultShippingAddress","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDefaultShippingAddress\",\n            \"addressId\" : \"{{addressId}}\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetStoreMode","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStoreMode\",\n            \"storeMode\" : \"FromParent\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetStores","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setStores\",\n            \"stores\" : [ {\n              \"key\" : \"{{store-key}}\",\n              \"typeId\" : \"store\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]},{"name":"SetUnitType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"business-unit-id\", data.results[0].id); ","    pm.environment.set(\"business-unit-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"business-unit-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"business-unit-version\", data.version);","}","if(data.id){","    pm.environment.set(\"business-unit-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"business-unit-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{business-unit-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setUnitType\",\n            \"unitType\" : \"Division\",\n            \"parentUnit\" : {\n              \"typeId\" : \"business-unit\",\n              \"key\" : \"commercetools\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-store/key={{store-key}}/business-units/{{business-unit-id}}","host":["{{host}}"],"path":["{{project-key}}","in-store","key={{store-key}}","business-units","{{business-unit-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post BusinessUnits"},"response":[]}]}]}]},{"name":"Standalone-prices","description":"A standalone price assigns a price to a product variant for a given scope. The API will use the standalone prices associated with a Product if its field [`priceMode`](/projects/products#pricemode) is set to `Standalone` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum).","item":[{"name":"Get StandalonePrice by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/key={{standalone-price-key}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","key={{standalone-price-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StandalonePrice exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/key={{standalone-price-key}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","key={{standalone-price-key}}"],"query":[]},"description":"Checks if a StandalonePrice exists with the provided `key`. Returns a `200` status if the StandalonePrice exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update StandalonePrice by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/key={{standalone-price-key}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","key={{standalone-price-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeValue\",\n    \"value\" : {\n      \"currencyCode\" : \"EUR\",\n      \"centAmount\" : 15000\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete StandalonePrice by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/key={{standalone-price-key}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","key={{standalone-price-key}}"],"query":[{"key":"version","value":"{{standalone-price-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get StandalonePrice by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StandalonePrice exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[]},"description":"Checks if a StandalonePrice exists with the provided `id`. Returns a `200` status if the StandalonePrice exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update StandalonePrice by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeValue\",\n    \"value\" : {\n      \"currencyCode\" : \"EUR\",\n      \"centAmount\" : 15000\n    }\n  } ]\n}"}},"response":[]},{"name":"Delete StandalonePrice by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"version","value":"{{standalone-price-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.\n","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query StandalonePrices","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices","host":["{{host}}"],"path":["{{project-key}}","standalone-prices"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if StandalonePrice exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices","host":["{{host}}"],"path":["{{project-key}}","standalone-prices"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more StandalonePrices exist for the provided query predicate. Returns a `200` status if any StandalonePrices match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create StandalonePrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices","host":["{{host}}"],"path":["{{project-key}}","standalone-prices"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"Creating a Standalone Price produces the [StandalonePriceCreated](ctp:api:type:StandalonePriceCreatedMessage) Message.\n\n- If the Standalone Price has the same price scope as an existing Standalone Price, a [DuplicateStandalonePriceScope](ctp:api:type:DuplicateStandalonePriceScopeError) error is returned.\n- If the Standalone Price has overlapping validity periods within the same price scope, a [OverlappingStandalonePriceValidity](ctp:api:type:OverlappingStandalonePriceValidityError) error is returned. A Price without validity period does not conflict with a Price defined for a time period.\n","body":{"mode":"raw","raw":"{\n  \"key\" : \"red-jacket-de-price\",\n  \"sku\" : \"A0E200000002E49\",\n  \"value\" : {\n    \"currencyCode\" : \"EUR\",\n    \"centAmount\" : 10000\n  },\n  \"country\" : \"DE\",\n  \"customerGroup\" : {\n    \"typeId\" : \"customer-group\",\n    \"id\" : \"{{customer-group-id}}\"\n  },\n  \"tiers\" : [ {\n    \"minimumQuantity\" : 10,\n    \"value\" : {\n      \"currencyCode\" : \"EUR\",\n      \"centAmount\" : 9000\n    }\n  } ],\n  \"active\" : true\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddPriceTier","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addPriceTier\",\n            \"tier\" : {\n              \"minimumQuantity\" : 100,\n              \"value\" : {\n                \"centAmount\" : 4200,\n                \"currencyCode\" : \"EUR\",\n                \"type\" : \"centPrecision\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"ApplyStagedChanges","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"applyStagedChanges\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"ChangeActive","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeActive\",\n            \"active\" : false\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"ChangeValue","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeValue\",\n            \"staged\" : false,\n            \"value\" : {\n              \"currencyCode\" : \"EUR\",\n              \"centAmount\" : 20000\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"RemovePriceTier","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removePriceTier\",\n            \"tierMinimumQuantity\" : 100\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"RemoveStagedChanges","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeStagedChanges\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"SetCustomField","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\" : \"exampleStringField\",\n            \"value\" : \"TextString\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"SetCustomType","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomType\",\n            \"type\" : {\n              \"id\" : \"{{type-id}}\",\n              \"typeId\" : \"type\"\n            },\n            \"fields\" : {\n              \"exampleStringField\" : \"TextString\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"SetDiscountedPrice","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDiscountedPrice\",\n            \"discounted\" : {\n              \"value\" : {\n                \"type\" : \"centPrecision\",\n                \"currencyCode\" : \"EUR\",\n                \"centAmount\" : 2990,\n                \"fractionDigits\" : 2\n              },\n              \"discount\" : {\n                \"typeId\" : \"product-discount\",\n                \"id\" : \"{{product-discount-id}}\"\n              }\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"new-key\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"SetPriceTiers","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setPriceTiers\",\n            \"tiers\" : [ {\n              \"minimumQuantity\" : 100,\n              \"value\" : {\n                \"centAmount\" : 4200,\n                \"currencyCode\" : \"EUR\",\n                \"type\" : \"centPrecision\"\n              }\n            }, {\n              \"minimumQuantity\" : 150,\n              \"value\" : {\n                \"centAmount\" : 4000,\n                \"currencyCode\" : \"EUR\",\n                \"type\" : \"centPrecision\"\n              }\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"SetValidFrom","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidFrom\",\n            \"validFrom\" : \"2025-03-30T20:30:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"SetValidFromAndUntil","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidFromAndUntil\",\n            \"validFrom\" : \"2025-03-30T20:30:00.000Z\",\n            \"validUntil\" : \"2025-04-21T20:30:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]},{"name":"SetValidUntil","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"standalone-price-id\", data.results[0].id); ","    pm.environment.set(\"standalone-price-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"standalone-price-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"standalone-price-version\", data.version);","}","if(data.id){","    pm.environment.set(\"standalone-price-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"standalone-price-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{standalone-price-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setValidUntil\",\n            \"validUntil\" : \"2025-04-21T20:30:00.000Z\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/standalone-prices/{{standalone-price-id}}","host":["{{host}}"],"path":["{{project-key}}","standalone-prices","{{standalone-price-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post StandalonePrices"},"response":[]}]}]},{"name":"In-business-unit","description":"null","item":[{"name":"Me","description":"null","item":[{"name":"Create an Associate in a Business Unit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"customer-id\", data.results[0].id); ","    pm.environment.set(\"customer-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"customer-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"customer-version\", data.version);","}","if(data.id){","    pm.environment.set(\"customer-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"customer-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/in-business-unit/key={{business-unit-key}}/me/customers","host":["{{host}}"],"path":["{{project-key}}","in-business-unit","key={{business-unit-key}}","me","customers"],"query":[]},"description":"The My Business Unit endpoint does not support assigning existing Customers to a Business Unit.\nAssociates with the `UpdateAssociates` [Permission](ctp:api:type:Permission) can use this endpoint to create a new Customer and associate it with the Business Unit.\nIf the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.\n","body":{"mode":"raw","raw":"{\n  \"version\" : 2,\n  \"customer\" : {\n    \"email\" : \"<random>@example.com\",\n    \"password\" : \"secret123\",\n    \"firstName\" : \"John\",\n    \"lastName\" : \"Doe\"\n  },\n  \"associateRoleAssignments\" : [ {\n    \"associateRole\" : {\n      \"key\" : \"buyer-role\"\n    }\n  } ]\n}"}},"response":[]}]}]},{"name":"Attribute-groups","description":"Attribute groups ... TODO","item":[{"name":"Get AttributeGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/key={{attribute-group-key}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","key={{attribute-group-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if AttributeGroup exists by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/key={{attribute-group-key}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","key={{attribute-group-key}}"],"query":[]},"description":"Checks if an AttributeGroup exists with the provided `key`. Returns `200` status if the AttributeGroup exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update AttributeGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/key={{attribute-group-key}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","key={{attribute-group-key}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 100,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"Attribute Group\"\n    }\n  }, {\n    \"action\" : \"setDescription\",\n    \"description\" : {\n      \"en\" : \"Description\"\n    }\n  }, {\n    \"action\" : \"setAttributes\",\n    \"attributes\" : [ {\n      \"key\" : \"a1\"\n    }, {\n      \"key\" : \"a2\"\n    } ]\n  } ]\n}"}},"response":[]},{"name":"Delete AttributeGroup by Key","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/key={{attribute-group-key}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","key={{attribute-group-key}}"],"query":[{"key":"version","value":"{{attribute-group-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Get AttributeGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if AttributeGroup exists by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[]},"description":"Checks if an AttributeGroup exists with the provided `id`. Returns a `200` status if the AttributeGroup exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update AttributeGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 100,\n  \"actions\" : [ {\n    \"action\" : \"changeName\",\n    \"name\" : {\n      \"en\" : \"Attribute Group\"\n    }\n  }, {\n    \"action\" : \"setDescription\",\n    \"description\" : {\n      \"en\" : \"Description\"\n    }\n  }, {\n    \"action\" : \"setAttributes\",\n    \"attributes\" : [ {\n      \"key\" : \"a1\"\n    }, {\n      \"key\" : \"a2\"\n    } ]\n  } ]\n}"}},"response":[]},{"name":"Delete AttributeGroup by ID","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"delete","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"version","value":"{{attribute-group-version}}","equals":true,"disabled":false},{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Query AttributeGroups","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups","host":["{{host}}"],"path":["{{project-key}}","attribute-groups"],"query":[{"key":"expand","value":"","equals":true,"disabled":true},{"key":"sort","value":"","equals":true,"disabled":true},{"key":"limit","value":"","equals":true,"disabled":true},{"key":"offset","value":"","equals":true,"disabled":true},{"key":"withTotal","value":"","equals":true,"disabled":true},{"key":"where","value":"","equals":true,"disabled":true},{"key":"/^var[.][a-zA-Z0-9]+$/","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if AttributeGroup exists by Query Predicate","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups","host":["{{host}}"],"path":["{{project-key}}","attribute-groups"],"query":[{"key":"where","value":"","equals":true,"disabled":true}]},"description":"Checks if one or more AttributeGroups exist for the provided query predicate. Returns `200` status if any AttributeGroups match the query predicate, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Create AttributeGroup","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups","host":["{{host}}"],"path":["{{project-key}}","attribute-groups"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"null","body":{"mode":"raw","raw":"{\n  \"name\" : {\n    \"en\" : \"Sample name\"\n  },\n  \"description\" : {\n    \"en\" : \"Sample description\"\n  },\n  \"key\" : \"group-1\",\n  \"attributes\" : [ {\n    \"key\" : \"Attribute 1\"\n  }, {\n    \"key\" : \"Attribute 2\"\n  } ]\n}"}},"response":[]},{"name":"Update actions","item":[{"name":"AddAttribute","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{attribute-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"addAttribute\",\n            \"attribute\" : {\n              \"key\" : \"a1\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AttributeGroups"},"response":[]},{"name":"ChangeName","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{attribute-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeName\",\n            \"name\" : {\n              \"en\" : \"Attribute Group\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AttributeGroups"},"response":[]},{"name":"RemoveAttribute","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{attribute-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"removeAttribute\",\n            \"attribute\" : {\n              \"key\" : \"a0\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AttributeGroups"},"response":[]},{"name":"SetAttributes","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{attribute-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setAttributes\",\n            \"attributes\" : [ {\n              \"key\" : \"a1\"\n            }, {\n              \"key\" : \"a2\"\n            } ]\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AttributeGroups"},"response":[]},{"name":"SetDescription","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{attribute-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setDescription\",\n            \"description\" : {\n              \"en\" : \"Description\"\n            }\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AttributeGroups"},"response":[]},{"name":"SetKey","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"attribute-group-id\", data.results[0].id); ","    pm.environment.set(\"attribute-group-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"attribute-group-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"attribute-group-version\", data.version);","}","if(data.id){","    pm.environment.set(\"attribute-group-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"attribute-group-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","body":{"mode":"raw","raw":"{\n    \"version\": {{attribute-group-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setKey\",\n            \"key\" : \"k2\"\n          }\n    ]\n}"},"header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}/attribute-groups/{{attribute-group-id}}","host":["{{host}}"],"path":["{{project-key}}","attribute-groups","{{attribute-group-id}}"],"query":[{"key":"expand","value":"","equals":true,"disabled":true}]},"description":"post AttributeGroups"},"response":[]}]}]},{"name":"Get Project","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"-id\", data.results[0].id); ","    pm.environment.set(\"-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"-version\", data.version);","}","if(data.id){","    pm.environment.set(\"-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"get","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}","host":["{{host}}"],"path":["{{project-key}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Check if Project exists","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"-id\", data.results[0].id); ","    pm.environment.set(\"-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"-version\", data.version);","}","if(data.id){","    pm.environment.set(\"-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"head","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}","host":["{{host}}"],"path":["{{project-key}}"],"query":[]},"description":"Checks if a Project exists for a given `projectKey`. Returns a `200` status if the Project exists, or a `404` status otherwise.","body":{"mode":"raw","raw":""}},"response":[]},{"name":"Update Project","event":[{"listen":"test","script":{"type":"text/javascript","exec":["tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;","var data = JSON.parse(responseBody);","if(data.results && data.results[0] && data.results[0].id && data.results[0].version){","    pm.environment.set(\"-id\", data.results[0].id); ","    pm.environment.set(\"-version\", data.results[0].version);","}","if(data.results && data.results[0] && data.results[0].key){","    pm.environment.set(\"-key\", data.results[0].key); ","}","if(data.version){","    pm.environment.set(\"-version\", data.version);","}","if(data.id){","    pm.environment.set(\"-id\", data.id); ","}","if(data.key){","    pm.environment.set(\"-key\", data.key);","}",""]}}],"request":{"auth":{"type":"oauth2","oauth2":{"accessToken":"{{ctp_access_token}}","addTokenTo":"header","tokenType":"Bearer"}},"method":"post","header":[{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{host}}/{{project-key}}","host":["{{host}}"],"path":["{{project-key}}"],"query":[]},"description":"null","body":{"mode":"raw","raw":"{\n  \"version\" : 1,\n  \"actions\" : [ {\n    \"action\" : \"changeCurrencies\",\n    \"currencies\" : [ \"EUR\", \"USD\" ]\n  } ]\n}"}},"response":[]}]}]}
